{"version":3,"file":"functions.modern.js","sources":["../src/utils.ts","../src/center.ts","../src/list-node-scenes.ts","../src/clear-node-parent.ts","../../../node_modules/gl-matrix/esm/common.js","../../../node_modules/gl-matrix/esm/mat4.js","../../../node_modules/gl-matrix/esm/mat3.js","../../../node_modules/gl-matrix/esm/vec3.js","../../../node_modules/gl-matrix/esm/vec4.js","../src/transform-primitive.ts","../src/transform-mesh.ts","../src/clear-node-transform.ts","../src/dedup.ts","../src/dequantize.ts","../src/draco.ts","../src/prune.ts","../src/flatten.ts","../src/get-node-scene.ts","../src/inspect.ts","../src/instance.ts","../src/join-primitives.ts","../src/join.ts","../src/list-texture-channels.ts","../src/list-texture-info.ts","../src/list-texture-slots.ts","../src/reorder.ts","../src/sort-primitive-weights.ts","../src/quantize.ts","../src/meshopt.ts","../src/metal-rough.ts","../src/unweld.ts","../src/normals.ts","../src/partition.ts","../../../node_modules/gl-matrix/esm/quat.js","../src/resample.ts","../src/sequence.ts","../src/weld.ts","../src/clean-primitive.ts","../src/simplify.ts","../src/sparse.ts","../src/texture-resize.ts","../src/texture-compress.ts","../src/tangents.ts","../src/unlit.ts","../src/unpartition.ts","../src/vertex-color-space.ts"],"sourcesContent":["import type { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tProperty,\n\tPropertyType,\n\tTexture,\n\tTransform,\n\tTransformContext,\n} from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n * @hidden\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\n/** @hidden */\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/**\n * Maps pixels from source to target textures, with a per-pixel callback.\n * @hidden\n */\nexport async function rewriteTexture(\n\tsource: Texture,\n\ttarget: Texture,\n\tfn: (pixels: NdArray, i: number, j: number) => void\n): Promise<Texture | null> {\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor (let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor (let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\n/** @hidden */\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices ? indices.getCount() / 2 : position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices ? indices.getCount() / 3 : position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\n/** @hidden */\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n\n/** @hidden */\nexport function formatBytes(bytes: number, decimals = 2): string {\n\tif (bytes === 0) return '0 Bytes';\n\n\tconst k = 1000;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/** @hidden */\nexport function formatLong(x: number): string {\n\treturn x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n/** @hidden */\nexport function formatDelta(a: number, b: number, decimals = 2): string {\n\tconst prefix = a > b ? '–' : '+';\n\tconst suffix = '%';\n\treturn prefix + ((Math.abs(a - b) / a) * 100).toFixed(decimals) + suffix;\n}\n\n/** @hidden */\nexport function formatDeltaOp(a: number, b: number) {\n\treturn `${formatLong(a)} → ${formatLong(b)} (${formatDelta(a, b)})`;\n}\n\n/**\n * Returns a list of all unique vertex attributes on the given primitive and\n * its morph targets.\n * @hidden\n */\nexport function deepListAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n\n/** @hidden */\nexport function deepSwapAttribute(prim: Primitive, src: Accessor, dst: Accessor): void {\n\tprim.swap(src, dst);\n\tfor (const target of prim.listTargets()) {\n\t\ttarget.swap(src, dst);\n\t}\n}\n\n/** @hidden */\nexport function remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\n/** @hidden */\nexport function createIndices(count: number, maxIndex = count): Uint16Array | Uint32Array {\n\tconst array = maxIndex <= 65534 ? new Uint16Array(count) : new Uint32Array(count);\n\tfor (let i = 0; i < array.length; i++) array[i] = i;\n\treturn array;\n}\n\n/** @hidden */\nexport function isUsed(prop: Property): boolean {\n\treturn prop.listParents().some((parent) => parent.propertyType !== PropertyType.ROOT);\n}\n\n/**\n * Creates a unique key associated with the structure and draw call characteristics of\n * a {@link Primitive}, independent of its vertex content. Helper method, used to\n * identify candidate Primitives for joining.\n * @hidden\n */\nexport function createPrimGroupKey(prim: Primitive): string {\n\tconst document = Document.fromGraph(prim.getGraph())!;\n\tconst material = prim.getMaterial();\n\tconst materialIndex = document.getRoot().listMaterials().indexOf(material!);\n\tconst mode = prim.getMode();\n\tconst indices = !!prim.getIndices();\n\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.sort()\n\t\t.map((semantic) => {\n\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\tconst componentType = attribute.getComponentType();\n\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t})\n\t\t.join('+');\n\n\tconst targets = prim\n\t\t.listTargets()\n\t\t.map((target) => {\n\t\t\treturn target\n\t\t\t\t.listSemantics()\n\t\t\t\t.sort()\n\t\t\t\t.map((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst elementSize = attribute.getElementSize();\n\t\t\t\t\tconst componentType = attribute.getComponentType();\n\t\t\t\t\treturn `${semantic}:${elementSize}:${componentType}`;\n\t\t\t\t})\n\t\t\t\t.join('+');\n\t\t})\n\t\t.join('~');\n\n\treturn `${materialIndex}|${mode}|${indices}|${attributes}|${targets}`;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { getBounds } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = { pivot: 'center' };\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n */\nexport function center(_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = { ...CENTER_DEFAULTS, ..._options } as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot()\n\t\t\t.listScenes()\n\t\t\t.forEach((scene, index) => {\n\t\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\t\tlet pivot: vec3;\n\t\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\t\tconst bbox = getBounds(scene);\n\t\t\t\t\tpivot = [\n\t\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t\t];\n\t\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t\t} else {\n\t\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\t\tif (isAnimated) {\n\t\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\t\tscene.addChild(offsetNode);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\t\tchild.setTranslation([t[0] + offset[0], t[1] + offset[1], t[2] + offset[2]]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { Node, Scene } from '@gltf-transform/core';\n\n/**\n * Finds the parent {@link Scene Scenes} associated with the given {@link Node}.\n * In most cases a Node is associated with only one Scene, but it is possible\n * for a Node to be located in two or more Scenes, or none at all.\n *\n * Example:\n *\n * ```typescript\n * import { listNodeScenes } from '@gltf-transform/functions';\n *\n * const node = document.getRoot().listNodes()\n *  .find((node) => node.getName() === 'MyNode');\n *\n * const scenes = listNodeScenes(node);\n * ```\n */\nexport function listNodeScenes(node: Node): Scene[] {\n\tconst visited = new Set<Node>();\n\n\tlet child = node;\n\tlet parent: Node | null;\n\n\twhile ((parent = child.getParentNode() as Node | null)) {\n\t\tif (visited.has(parent)) {\n\t\t\tthrow new Error('Circular dependency in scene graph.');\n\t\t}\n\t\tvisited.add(parent);\n\t\tchild = parent;\n\t}\n\n\treturn child.listParents().filter((parent) => parent instanceof Scene) as Scene[];\n}\n","import type { Node } from '@gltf-transform/core';\nimport { listNodeScenes } from './list-node-scenes.js';\n\n/**\n * Clears the parent of the given {@link Node}, leaving it attached\n * directly to its {@link Scene}. Inherited transforms will be applied\n * to the Node. This operation changes the Node's local transform,\n * but leaves its world transform unchanged.\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeParent } from '@gltf-transform/functions';\n *\n * scene.traverse((node) => { ... }); // Scene → … → Node\n *\n * clearNodeParent(node);\n *\n * scene.traverse((node) => { ... }); // Scene → Node\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeParent(node: Node): Node {\n\tconst scenes = listNodeScenes(node);\n\tconst parent = node.getParentNode();\n\n\tif (!parent) return node;\n\n\t// Apply inherited transforms to local matrix. Skinned meshes are not affected\n\t// by the node parent's trasnform, and can be ignored. Updates to IBMs and TRS\n\t// animations are out of scope in this context.\n\tnode.setMatrix(node.getWorldMatrix());\n\n\t// Add to Scene roots.\n\tparent.removeChild(node);\n\tfor (const scene of scenes) scene.addChild(node);\n\n\treturn node;\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import type { vec3, vec4, mat4, Accessor, Primitive } from '@gltf-transform/core';\nimport { create as createMat3, fromMat4, invert, transpose } from 'gl-matrix/mat3';\nimport { create as createVec3, normalize as normalizeVec3, transformMat3, transformMat4 } from 'gl-matrix/vec3';\nimport { create as createVec4 } from 'gl-matrix/vec4';\nimport { createIndices } from './utils.js';\n\n/**\n * Applies a transform matrix to a {@link Primitive}.\n *\n * When calling {@link transformPrimitive}, any un-masked vertices are overwritten\n * directly in the underlying vertex streams. If streams should be detached instead,\n * see {@link transformMesh}.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformPrimitive } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformPrimitive(prim, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param prim\n * @param matrix\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformPrimitive(prim: Primitive, matrix: mat4, skipIndices = new Set<number>()): void {\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst indices = (prim.getIndices()?.getArray() || createIndices(position!.getCount())) as Uint32Array;\n\n\t// Apply transform to base attributes.\n\tif (position) {\n\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t}\n\n\tconst normal = prim.getAttribute('NORMAL');\n\tif (normal) {\n\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t}\n\n\tconst tangent = prim.getAttribute('TANGENT');\n\tif (tangent) {\n\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t}\n\n\t// Apply transform to morph attributes.\n\tfor (const target of prim.listTargets()) {\n\t\tconst position = target.getAttribute('POSITION');\n\t\tif (position) {\n\t\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst normal = target.getAttribute('NORMAL');\n\t\tif (normal) {\n\t\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst tangent = target.getAttribute('TANGENT');\n\t\tif (tangent) {\n\t\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t\t}\n\t}\n\n\t// Update mask.\n\tfor (let i = 0; i < indices.length; i++) skipIndices.add(indices[i]);\n}\n\nfunction applyMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\t// An arbitrary transform may not keep vertex positions in the required\n\t// range of a normalized attribute. Replace the array, instead.\n\tconst dstArray = new Float32Array(attribute.getCount() * 3);\n\tconst elementSize = attribute.getElementSize();\n\n\tfor (let i = 0, el: number[] = [], il = attribute.getCount(); i < il; i++) {\n\t\tdstArray.set(attribute.getElement(i, el), i * elementSize);\n\t}\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat4(vector, vector, matrix);\n\t\tdstArray.set(vector, index * 3);\n\n\t\tskipIndices.add(index);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n\nfunction applyNormalMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst normalMatrix = createMat3();\n\tfromMat4(normalMatrix, matrix);\n\tinvert(normalMatrix, normalMatrix);\n\ttranspose(normalMatrix, normalMatrix);\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat3(vector, vector, normalMatrix);\n\t\tnormalizeVec3(vector, vector);\n\t\tattribute.setElement(index, vector);\n\n\t\tskipIndices.add(index);\n\t}\n}\n\nfunction applyTangentMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst v3 = createVec3() as vec3;\n\tconst v4 = createVec4() as vec4;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, v4);\n\n\t\t// mat4 affine matrix applied to vector, vector interpreted as a direction.\n\t\t// Reference: https://github.com/mrdoob/three.js/blob/9f4de99828c05e71c47e6de0beb4c6e7652e486a/src/math/Vector3.js#L286-L300\n\t\tconst [x, y, z] = v4;\n\t\tv3[0] = matrix[0] * x + matrix[4] * y + matrix[8] * z;\n\t\tv3[1] = matrix[1] * x + matrix[5] * y + matrix[9] * z;\n\t\tv3[2] = matrix[2] * x + matrix[6] * y + matrix[10] * z;\n\t\tnormalizeVec3(v3, v3);\n\n\t\t(v4[0] = v3[0]), (v4[1] = v3[1]), (v4[2] = v3[2]);\n\n\t\tattribute.setElement(index, v4);\n\n\t\tskipIndices.add(index);\n\t}\n}\n","import { mat4, Accessor, Primitive, Mesh, PropertyType, PrimitiveTarget } from '@gltf-transform/core';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { deepListAttributes } from './utils.js';\n\n/**\n * Applies a transform matrix to every {@link Primitive} in the given {@link Mesh}.\n *\n * Method:\n * - If any primitives are shared by other meshes, they will be detached.\n * - If any vertex streams are shared by primitives of other meshes, vertex data\n *  will be overwritten unless _overwrite=false_ or the indices are masked. If\n * \t_overwrite=false_, a detached copy of the vertex stream is made before applying\n * \tthe transform.\n * - Primitives within the mesh sharing vertex streams will continue to share those streams.\n * - For indexed primitives, only indexed vertices are modified.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformMesh } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformMesh(mesh, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param mesh\n * @param matrix\n * @param overwrite Whether to overwrite vertex streams in place. If false,\n * \t\tstreams shared with other meshes will be detached.\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformMesh(mesh: Mesh, matrix: mat4, overwrite = false, skipIndices?: Set<number>): void {\n\t// (1) Detach shared prims.\n\tfor (const srcPrim of mesh.listPrimitives()) {\n\t\tconst isShared = srcPrim.listParents().some((p) => p.propertyType === PropertyType.MESH && p !== mesh);\n\t\tif (isShared) {\n\t\t\tconst dstPrim = srcPrim.clone();\n\t\t\tmesh.swap(srcPrim, dstPrim);\n\n\t\t\tfor (const srcTarget of dstPrim.listTargets()) {\n\t\t\t\tconst dstTarget = srcTarget.clone();\n\t\t\t\tdstPrim.swap(srcTarget, dstTarget);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (2) Detach shared vertex streams.\n\tif (!overwrite) {\n\t\tconst parents = new Set<Primitive | PrimitiveTarget>([\n\t\t\t...mesh.listPrimitives(),\n\t\t\t...mesh.listPrimitives().flatMap((prim) => prim.listTargets()),\n\t\t]);\n\t\tconst attributes = new Map<Accessor, Accessor>();\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\t\t\tconst isShared = srcAttribute\n\t\t\t\t\t.listParents()\n\t\t\t\t\t.some((a) => (a instanceof Primitive || a instanceof PrimitiveTarget) && !parents.has(a));\n\t\t\t\tif (isShared && !attributes.has(srcAttribute)) {\n\t\t\t\t\tattributes.set(srcAttribute, srcAttribute.clone());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const parent of parents) {\n\t\t\tfor (const [srcAttribute, dstAttribute] of attributes) {\n\t\t\t\tparent.swap(srcAttribute, dstAttribute);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (3) Apply transform.\n\tskipIndices = skipIndices || new Set<number>();\n\tfor (const prim of mesh.listPrimitives()) {\n\t\ttransformPrimitive(prim, matrix, skipIndices);\n\t}\n}\n","import { mat4, MathUtils, Node } from '@gltf-transform/core';\nimport { multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { transformMesh } from './transform-mesh.js';\n\n// prettier-ignore\nconst IDENTITY: mat4 = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n];\n\n/**\n * Clears local transform of the {@link Node}, applying the transform to children and meshes.\n *\n * - Applies transform to children\n * - Applies transform to {@link Mesh mesh}\n * - Resets {@link Light lights}, {@link Camera cameras}, and other attachments to the origin\n *\n * Example:\n *\n * ```typescript\n * import { clearNodeTransform } from '@gltf-transform/functions';\n *\n * node.getTranslation(); // → [ 5, 0, 0 ]\n * node.getMesh(); // → vertex data centered at origin\n *\n * clearNodeTransform(node);\n *\n * node.getTranslation(); // → [ 0, 0, 0 ]\n * node.getMesh(); // → vertex data centered at [ 5, 0, 0 ]\n * ```\n *\n * To clear _all_ transforms of a Node, first clear its inherited transforms with\n * {@link clearNodeParent}, then clear the local transform with {@link clearNodeTransform}.\n */\nexport function clearNodeTransform(node: Node): Node {\n\tconst mesh = node.getMesh();\n\tconst localMatrix = node.getMatrix();\n\n\tif (mesh && !MathUtils.eq(localMatrix, IDENTITY)) {\n\t\ttransformMesh(mesh, localMatrix);\n\t}\n\n\tfor (const child of node.listChildren()) {\n\t\tconst matrix = child.getMatrix();\n\t\tmultiplyMat4(matrix, matrix, localMatrix);\n\t\tchild.setMatrix(matrix);\n\t}\n\n\treturn node.setMatrix(IDENTITY);\n}\n","import {\n\tAccessor,\n\tBufferUtils,\n\tDocument,\n\tMaterial,\n\tMesh,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tRoot,\n\tSkin,\n\tTexture,\n\tTransform,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.MESH,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.SKIN,\n\t],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n */\nexport const dedup = function (_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = { ...DEDUP_DEFAULTS, ..._options } as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst logger = document.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(document);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(document);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(document);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(document);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) dedupSkins(document);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction dedupAccessors(document: Document): void {\n\tconst logger = document.getLogger();\n\n\t// Find all accessors used for mesh data.\n\tconst indicesAccessors: Set<Accessor> = new Set();\n\tconst attributeAccessors: Set<Accessor> = new Set();\n\tconst inputAccessors: Set<Accessor> = new Set();\n\tconst outputAccessors: Set<Accessor> = new Set();\n\n\tconst meshes = document.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => attributeAccessors.add(accessor));\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices) indicesAccessors.add(indices);\n\t\t});\n\t});\n\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input) inputAccessors.add(input);\n\t\t\tif (output) outputAccessors.add(output);\n\t\t}\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[]): Map<Accessor, Accessor> {\n\t\tconst duplicateAccessors: Map<Accessor, Accessor> = new Map();\n\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicateAccessors.has(a)) continue;\n\n\t\t\tfor (let j = i + 1; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (duplicateAccessors.has(b)) continue;\n\n\t\t\t\tif (a.getType() !== b.getType()) continue;\n\t\t\t\tif (a.getComponentType() !== b.getComponentType()) continue;\n\t\t\t\tif (a.getCount() !== b.getCount()) continue;\n\t\t\t\tif (a.getNormalized() !== b.getNormalized()) continue;\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicateAccessors.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn duplicateAccessors;\n\t}\n\n\tconst duplicateIndices = detectDuplicates(Array.from(indicesAccessors));\n\tlogger.debug(`${NAME}: Found ${duplicateIndices.size} duplicates among ${indicesAccessors.size} indices.`);\n\n\tconst duplicateAttributes = detectDuplicates(Array.from(attributeAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateAttributes.size} duplicates among ${attributeAccessors.size}` + ' attributes.'\n\t);\n\n\tconst duplicateInputs = detectDuplicates(Array.from(inputAccessors));\n\tconst duplicateOutputs = detectDuplicates(Array.from(outputAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateInputs.size + duplicateOutputs.size} duplicates among` +\n\t\t\t` ${inputAccessors.size + outputAccessors.size} animation accessors.`\n\t);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicateAttributes.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicateAttributes.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicateIndices.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicateIndices.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\tArray.from(duplicateIndices.keys()).forEach((indices) => indices.dispose());\n\tArray.from(duplicateAttributes.keys()).forEach((attribute) => attribute.dispose());\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of document.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicateInputs.has(input)) {\n\t\t\t\tsampler.swap(input, duplicateInputs.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicateOutputs.has(output)) {\n\t\t\t\tsampler.swap(output, duplicateOutputs.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\tArray.from(duplicateInputs.keys()).forEach((input) => input.dispose());\n\tArray.from(duplicateOutputs.keys()).forEach((output) => output.dispose());\n}\n\nfunction dedupMeshes(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor | Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tconst meshKey = srcKeyItems.join(';');\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Found ${numMeshes - uniqueMeshes.size} duplicates among ${numMeshes} meshes.`);\n}\n\nfunction dedupImages(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Found ${duplicates.size} duplicates among ${root.listTextures().length} textures.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates = new Map<Material, Material>();\n\tconst skip = new Set(['name']);\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++) {\n\t\tconst a = materials[i];\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < materials.length; j++) {\n\t\t\tconst b = materials[j];\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Found ${duplicates.size} duplicates among ${materials.length} materials.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupSkins(document: Document): void {\n\tconst logger = document.getLogger();\n\tconst root = document.getRoot();\n\tconst skins = root.listSkins();\n\tconst duplicates = new Map<Skin, Skin>();\n\tconst skip = new Set(['name']);\n\n\tfor (let i = 0; i < skins.length; i++) {\n\t\tconst a = skins[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = i + 1; j < skins.length; j++) {\n\t\t\tconst b = skins[j];\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Found ${duplicates.size} duplicates among ${skins.length} skins.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(prim: Primitive | PrimitiveTarget, refs: Map<Accessor | Material, number>): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n","import type { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { KHRMeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link KHRMeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...DEQUANTIZE_DEFAULTS, ..._options } as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(KHRMeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nfunction dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRDracoMeshCompression } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'draco';\n\nexport interface DracoOptions {\n\tmethod?: 'edgebreaker' | 'sequential';\n\tencodeSpeed?: number;\n\tdecodeSpeed?: number;\n\tquantizePosition?: number;\n\tquantizeNormal?: number;\n\tquantizeColor?: number;\n\tquantizeTexcoord?: number;\n\tquantizeGeneric?: number;\n\tquantizationVolume?: 'mesh' | 'scene';\n}\n\nexport const DRACO_DEFAULTS: DracoOptions = {\n\tmethod: 'edgebreaker',\n\tencodeSpeed: 5,\n\tdecodeSpeed: 5,\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeColor: 8,\n\tquantizeTexcoord: 12,\n\tquantizeGeneric: 12,\n\tquantizationVolume: 'mesh',\n};\n\n/**\n * Applies Draco compression using {@link KHRDracoMeshCompression KHR_draco_mesh_compression}.\n * This type of compression can reduce the size of triangle geometry.\n *\n * This function is a thin wrapper around the {@link KHRDracoMeshCompression} extension itself.\n */\nexport const draco = (_options: DracoOptions = DRACO_DEFAULTS): Transform => {\n\tconst options = { ...DRACO_DEFAULTS, ..._options } as Required<DracoOptions>;\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tdoc.createExtension(KHRDracoMeshCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.method === 'edgebreaker'\n\t\t\t\t\t\t? KHRDracoMeshCompression.EncoderMethod.EDGEBREAKER\n\t\t\t\t\t\t: KHRDracoMeshCompression.EncoderMethod.SEQUENTIAL,\n\t\t\t\tencodeSpeed: options.encodeSpeed,\n\t\t\t\tdecodeSpeed: options.decodeSpeed,\n\t\t\t\tquantizationBits: {\n\t\t\t\t\tPOSITION: options.quantizePosition,\n\t\t\t\t\tNORMAL: options.quantizeNormal,\n\t\t\t\t\tCOLOR: options.quantizeColor,\n\t\t\t\t\tTEX_COORD: options.quantizeTexcoord,\n\t\t\t\t\tGENERIC: options.quantizeGeneric,\n\t\t\t\t},\n\t\t\t\tquantizationVolume: options.quantizationVolume,\n\t\t\t});\n\t});\n};\n","import {\n\tAnimationChannel,\n\tDocument,\n\tGraph,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tNode,\n\tScene,\n\tExtensionProperty,\n\tMaterial,\n\tPrimitive,\n\tPrimitiveTarget,\n\tTexture,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'prune';\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n\t/** Whether to keep empty leaf nodes. */\n\tkeepLeaves?: boolean;\n\t/** Whether to keep unused vertex attributes, such as UVs without an assigned texture. */\n\tkeepAttributes?: boolean;\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t],\n\tkeepLeaves: false,\n\tkeepAttributes: true,\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n */\nexport const prune = function (_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...PRUNE_DEFAULTS, ..._options } as Required<PruneOptions>;\n\tconst propertyTypes = new Set(options.propertyTypes);\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst graph = doc.getGraph();\n\n\t\tconst disposed: Record<string, number> = {};\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\t// Prune empty Meshes.\n\t\tif (propertyTypes.has(PropertyType.MESH)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tif (mesh.listPrimitives().length > 0) continue;\n\t\t\t\tmesh.dispose();\n\t\t\t\tmarkDisposed(mesh);\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.NODE) && !options.keepLeaves) root.listScenes().forEach(nodeTreeShake);\n\t\tif (propertyTypes.has(PropertyType.NODE)) root.listNodes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) root.listSkins().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.MESH)) root.listMeshes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.CAMERA)) root.listCameras().forEach(treeShake);\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE);\n\t\t}\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET);\n\t\t}\n\n\t\t// Prune unused vertex attributes.\n\t\tif (!options.keepAttributes && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tconst required = listRequiredSemantics(doc, prim.getMaterial());\n\t\t\t\t\tconst unused = listUnusedSemantics(prim, required);\n\t\t\t\t\tpruneAttributes(prim, unused);\n\t\t\t\t\tprim.listTargets().forEach((target) => pruneAttributes(target, unused));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.has(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t\tmarkDisposed(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim);\n\t\t\t\t\tsamplers.forEach(treeShake);\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach(treeShake);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) root.listMaterials().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) root.listTextures().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) root.listAccessors().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.BUFFER)) root.listBuffers().forEach(treeShake);\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (Object.keys(disposed).length) {\n\t\t\tconst str = Object.keys(disposed)\n\t\t\t\t.map((t) => `${t} (${disposed[t]})`)\n\t\t\t\t.join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t\t//\n\n\t\t/** Disposes of the given property if it is unused. */\n\t\tfunction treeShake(prop: Property): void {\n\t\t\t// Consider a property unused if it has no references from another property, excluding\n\t\t\t// types Root and AnimationChannel.\n\t\t\tconst parents = prop.listParents().filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\t\t\tif (!parents.length) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * For property types the Root does not maintain references to, we'll need to search the\n\t\t * graph. It's possible that objects may have been constructed without any outbound links,\n\t\t * but since they're not on the graph they don't need to be tree-shaken.\n\t\t */\n\t\tfunction indirectTreeShake(graph: Graph<Property>, propertyType: string): void {\n\t\t\tgraph\n\t\t\t\t.listEdges()\n\t\t\t\t.map((edge) => edge.getParent())\n\t\t\t\t.filter((parent) => parent.propertyType === propertyType)\n\t\t\t\t.forEach(treeShake);\n\t\t}\n\n\t\t/** Iteratively prunes leaf Nodes without contents. */\n\t\tfunction nodeTreeShake(prop: Node | Scene): void {\n\t\t\tprop.listChildren().forEach(nodeTreeShake);\n\n\t\t\tif (prop instanceof Scene) return;\n\n\t\t\tconst isUsed = graph.listParentEdges(prop).some((e) => {\n\t\t\t\tconst ptype = e.getParent().propertyType;\n\t\t\t\treturn ptype !== PropertyType.ROOT && ptype !== PropertyType.SCENE && ptype !== PropertyType.NODE;\n\t\t\t});\n\t\t\tconst isEmpty = graph.listChildren(prop).length === 0;\n\t\t\tif (isEmpty && !isUsed) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\tfunction pruneAttributes(prim: Primitive | PrimitiveTarget, unused: string[]) {\n\t\t\tfor (const semantic of unused) {\n\t\t\t\tprim.setAttribute(semantic, null);\n\t\t\t}\n\t\t}\n\n\t\t/** Records properties disposed by type. */\n\t\tfunction markDisposed(prop: Property): void {\n\t\t\tdisposed[prop.propertyType] = disposed[prop.propertyType] || 0;\n\t\t\tdisposed[prop.propertyType]++;\n\t\t}\n\t});\n};\n\n/**\n * Lists vertex attribute semantics that are unused when rendering a given primitive.\n */\nfunction listUnusedSemantics(prim: Primitive | PrimitiveTarget, required: Set<string>): string[] {\n\tconst unused = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (semantic === 'TANGENT' && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('TEXCOORD_') && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('COLOR_') && semantic !== 'COLOR_0') {\n\t\t\tunused.push(semantic);\n\t\t}\n\t}\n\treturn unused;\n}\n\n/**\n * Lists vertex attribute semantics required by a material. Does not include\n * attributes that would be used unconditionally, like POSITION or NORMAL.\n */\nfunction listRequiredSemantics(\n\tdocument: Document,\n\tmaterial: Material | ExtensionProperty | null,\n\tsemantics = new Set<string>()\n): Set<string> {\n\tif (!material) return semantics;\n\n\tconst graph = document.getGraph();\n\n\tconst edges = graph.listChildEdges(material);\n\tconst textureNames = new Set<string>();\n\n\tfor (const edge of edges) {\n\t\tif (edge.getChild() instanceof Texture) {\n\t\t\ttextureNames.add(edge.getName());\n\t\t}\n\t}\n\n\tfor (const edge of edges) {\n\t\tconst name = edge.getName();\n\t\tconst child = edge.getChild();\n\n\t\tif (child instanceof TextureInfo) {\n\t\t\tif (textureNames.has(name.replace(/Info$/, ''))) {\n\t\t\t\tsemantics.add(`TEXCOORD_${child.getTexCoord()}`);\n\t\t\t}\n\t\t}\n\n\t\tif (child instanceof Texture && name.match(/normalTexture/i)) {\n\t\t\tsemantics.add('TANGENT');\n\t\t}\n\n\t\tif (child instanceof ExtensionProperty) {\n\t\t\tlistRequiredSemantics(document, child, semantics);\n\t\t}\n\n\t\t// TODO(#748): Does KHR_materials_anisotropy imply required vertex attributes?\n\t}\n\n\treturn semantics;\n}\n","import { Document, Node, PropertyType, Transform } from '@gltf-transform/core';\nimport { clearNodeParent } from './clear-node-parent.js';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'flatten';\n\n/** Options for the {@link flatten} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface FlattenOptions {}\n\nexport const FLATTEN_DEFAULTS: Required<FlattenOptions> = {};\n\n/**\n * Flattens the scene graph, leaving {@link Node Nodes} with\n * {@link Mesh Meshes}, {@link Camera Cameras}, and other attachments\n * as direct children of the {@link Scene}. Skeletons and their\n * descendants are left in their original Node structure.\n *\n * {@link Animation} targeting a Node or its parents will\n * prevent that Node from being moved.\n *\n * Example:\n *\n * ```ts\n * import { flatten } from '@gltf-transform/functions';\n *\n * await document.transform(flatten());\n * ```\n */\nexport function flatten(_options: FlattenOptions = FLATTEN_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...FLATTEN_DEFAULTS, ..._options } as Required<FlattenOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// (1) Mark joints.\n\t\tconst joints = new Set<Node>();\n\t\tfor (const skin of root.listSkins()) {\n\t\t\tfor (const joint of skin.listJoints()) {\n\t\t\t\tjoints.add(joint);\n\t\t\t}\n\t\t}\n\n\t\t// (2) Mark animated nodes.\n\t\tconst animated = new Set<Node>();\n\t\tfor (const animation of root.listAnimations()) {\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tconst node = channel.getTargetNode();\n\t\t\t\tif (node) {\n\t\t\t\t\tanimated.add(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Mark descendants of joints and animated nodes.\n\t\tconst hasJointParent = new Set<Node>();\n\t\tconst hasAnimatedParent = new Set<Node>();\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst parent = node.getParentNode();\n\t\t\t\tif (!parent) return;\n\t\t\t\tif (joints.has(parent) || hasJointParent.has(parent)) {\n\t\t\t\t\thasJointParent.add(node);\n\t\t\t\t}\n\t\t\t\tif (animated.has(parent) || hasAnimatedParent.has(parent)) {\n\t\t\t\t\thasAnimatedParent.add(node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// (4) For each affected node, in top-down order, clear parents.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\tscene.traverse((node) => {\n\t\t\t\tif (animated.has(node)) return;\n\t\t\t\tif (hasJointParent.has(node)) return;\n\t\t\t\tif (hasAnimatedParent.has(node)) return;\n\n\t\t\t\tclearNodeParent(node);\n\t\t\t});\n\t\t}\n\n\t\t// TODO(feat): Transform animation channels, accounting for previously inherited transforms.\n\t\tif (animated.size) {\n\t\t\tlogger.debug(`${NAME}: Flattening node hierarchies with TRS animation not yet supported.`);\n\t\t}\n\n\t\t// (5) Clean up leaf nodes.\n\t\tawait document.transform(prune({ propertyTypes: [PropertyType.NODE], keepLeaves: false }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Node, Scene } from '@gltf-transform/core';\nimport { listNodeScenes } from './list-node-scenes.js';\n\n/** @deprecated Use {@link listNodeScenes} instead. */\nexport function getNodeScene(node: Node): Scene | null {\n\treturn listNodeScenes(node)[0] || null;\n}\n","import {\n\tAccessor,\n\tDocument,\n\tExtensionProperty,\n\tGLTF,\n\tImageUtils,\n\tTexture,\n\tgetBounds,\n\tPropertyType,\n} from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils.js';\nimport { KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_UASTC, read as readKTX } from 'ktx-parse';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect(doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes(doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc\n\t\t.getRoot()\n\t\t.listScenes()\n\t\t.map((scene) => {\n\t\t\tconst root = scene.listChildren()[0];\n\t\t\tconst sceneBounds = getBounds(scene);\n\t\t\treturn {\n\t\t\t\tname: scene.getName(),\n\t\t\t\trootName: root ? root.getName() : '',\n\t\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t\t};\n\t\t});\n\treturn { properties: scenes };\n}\n\n/** List meshes. */\nfunction listMeshes(doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc\n\t\t.getRoot()\n\t\t.listMeshes()\n\t\t.map((mesh) => {\n\t\t\tconst instances = mesh.listParents().filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\t\t\tlet glPrimitives = 0;\n\t\t\tlet verts = 0;\n\t\t\tconst semantics = new Set<string>();\n\t\t\tconst meshIndices = new Set<string>();\n\t\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\t\tsemantics.add(semantic + ':' + accessorToTypeLabel(attr));\n\t\t\t\t\tmeshAccessors.add(attr);\n\t\t\t\t}\n\t\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t\t}\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tmeshIndices.add(accessorToTypeLabel(indices));\n\t\t\t\t\tmeshAccessors.add(indices);\n\t\t\t\t}\n\t\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\t\tconst modes = mesh.listPrimitives().map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\t\treturn {\n\t\t\t\tname: mesh.getName(),\n\t\t\t\tmode: Array.from(new Set(modes)),\n\t\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\t\tglPrimitives: glPrimitives,\n\t\t\t\tvertices: verts,\n\t\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\t\tinstances: instances,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: meshes };\n}\n\n/** List materials. */\nfunction listMaterials(doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc\n\t\t.getRoot()\n\t\t.listMaterials()\n\t\t.map((material) => {\n\t\t\tconst instances = material\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\t// Find all texture slots attached to this material or its extensions.\n\t\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listEdges()\n\t\t\t\t.filter((ref) => {\n\t\t\t\t\tconst child = ref.getChild();\n\t\t\t\t\tconst parent = ref.getParent();\n\t\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (child instanceof Texture && parent instanceof ExtensionProperty && extensions.has(parent)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t\t.map((ref) => ref.getName());\n\n\t\t\treturn {\n\t\t\t\tname: material.getName(),\n\t\t\t\tinstances,\n\t\t\t\ttextures: slots,\n\t\t\t\talphaMode: material.getAlphaMode(),\n\t\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t\t};\n\t\t});\n\n\treturn { properties: materials };\n}\n\n/** List textures. */\nfunction listTextures(doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc\n\t\t.getRoot()\n\t\t.listTextures()\n\t\t.map((texture) => {\n\t\t\tconst instances = texture\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listParentEdges(texture)\n\t\t\t\t.filter((edge) => edge.getParent().propertyType !== PropertyType.ROOT)\n\t\t\t\t.map((edge) => edge.getName());\n\n\t\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\t\tlet compression = '';\n\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\tconst container = readKTX(texture.getImage()!);\n\t\t\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\t\t\tif (dfd.colorModel === KHR_DF_MODEL_ETC1S) {\n\t\t\t\t\tcompression = 'ETC1S';\n\t\t\t\t} else if (dfd.colorModel === KHR_DF_MODEL_UASTC) {\n\t\t\t\t\tcompression = 'UASTC';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tname: texture.getName(),\n\t\t\t\turi: texture.getURI(),\n\t\t\t\tslots: Array.from(new Set(slots)),\n\t\t\t\tinstances,\n\t\t\t\tmimeType: texture.getMimeType(),\n\t\t\t\tcompression,\n\t\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\t\tgpuSize: ImageUtils.getVRAMByteLength(texture.getImage()!, texture.getMimeType()),\n\t\t\t};\n\t\t});\n\n\treturn { properties: textures };\n}\n\n/** List animations. */\nfunction listAnimations(doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc\n\t\t.getRoot()\n\t\t.listAnimations()\n\t\t.map((anim) => {\n\t\t\tlet minTime = Infinity;\n\t\t\tlet maxTime = -Infinity;\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tif (!input) return;\n\t\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tlet keyframes = 0;\n\t\t\tconst accessors: Set<Accessor> = new Set();\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (!input) return;\n\t\t\t\tkeyframes += input.getCount();\n\t\t\t\taccessors.add(input);\n\t\t\t\tif (!output) return;\n\t\t\t\taccessors.add(output);\n\t\t\t});\n\t\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tname: anim.getName(),\n\t\t\t\tchannels: anim.listChannels().length,\n\t\t\t\tsamplers: anim.listSamplers().length,\n\t\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\t\tkeyframes: keyframes,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: animations };\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tcompression: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\nconst NumericTypeLabels: Record<string, string> = {\n\tFloat32Array: 'f32',\n\tUint32Array: 'u32',\n\tUint16Array: 'u16',\n\tUint8Array: 'u8',\n\tInt32Array: 'i32',\n\tInt16Array: 'i16',\n\tInt8Array: 'i8',\n};\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction accessorToTypeLabel(accessor: Accessor): string {\n\tconst array = accessor.getArray()!;\n\tconst base = NumericTypeLabels[array.constructor.name] || '?';\n\tconst suffix = accessor.getNormalized() ? '_norm' : '';\n\treturn base + suffix;\n}\n","import { Document, ILogger, MathUtils, Mesh, Node, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, EXTMeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'instance';\n\nexport interface InstanceOptions {\n\t/** Minimum number of meshes considered eligible for instancing. Default: 2. */\n\tmin?: number;\n}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {\n\tmin: 2,\n};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. In\n * engines supporting the extension, reused Meshes will be drawn with GPU instancing, greatly\n * reducing draw calls and improving performance in many cases. If you're not sure that identical\n * Meshes share vertex data and materials (\"linked duplicates\"), run {@link dedup} first to link them.\n *\n * Example:\n *\n * ```javascript\n * import { dedup, instance } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup(),\n * \tinstance({min: 2}),\n * );\n * ```\n */\nexport function instance(_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\tconst options = { ...INSTANCE_DEFAULTS, ..._options } as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst batchExtension = doc.createExtension(EXTMeshGPUInstancing);\n\n\t\tif (root.listAnimations().length) {\n\t\t\tlogger.warn(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t\treturn;\n\t\t}\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < options.min) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode().setMesh(mesh).setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, (t = node.getWorldTranslation()));\n\t\t\t\t\tbatchRotation.setElement(i, (r = node.getWorldRotation()));\n\t\t\t\t\tbatchScale.setElement(i, (s = node.getWorldScale()));\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with ≥${options.min} parent nodes were found.`);\n\t\t}\n\n\t\tif (batchExtension.listProperties().length === 0) {\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: ILogger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (\n\t\t\tnode.listChildren().length ||\n\t\t\tnode.getCamera() ||\n\t\t\tnode.getMesh() ||\n\t\t\tnode.getSkin() ||\n\t\t\tnode.listExtensions().length\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParentNode();\n\t\tif (nodeParent) nodes.push(nodeParent);\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction createBatch(doc: Document, batchExtension: EXTMeshGPUInstancing, mesh: Mesh, count: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension\n\t\t.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Primitive, ComponentTypeToTypedArray } from '@gltf-transform/core';\nimport { createIndices, createPrimGroupKey } from './utils.js';\n\ninterface JoinPrimitiveOptions {\n\tskipValidation?: boolean;\n}\n\nconst JOIN_PRIMITIVE_DEFAULTS: Required<JoinPrimitiveOptions> = {\n\tskipValidation: false,\n};\n\n/**\n * Given a list of compatible Mesh {@link Primitive Primitives}, returns new Primitive\n * containing their vertex data. Compatibility requires that all Primitives share the\n * same {@link Material Materials}, draw mode, and vertex attribute types. Primitives\n * using morph targets cannot currently be joined.\n *\n * Example:\n *\n * ```javascript\n * import { joinPrimitives } from '@gltf-transform/functions';\n *\n * // Succeeds if Primitives are compatible, or throws an error.\n * const result = joinPrimitives(mesh.listPrimitives());\n *\n * for (const prim of mesh.listPrimitives()) {\n * \tprim.dispose();\n * }\n *\n * mesh.addPrimitive(result);\n * ```\n */\nexport function joinPrimitives(prims: Primitive[], options: JoinPrimitiveOptions = {}): Primitive {\n\toptions = { ...JOIN_PRIMITIVE_DEFAULTS, ...options };\n\tconst templatePrim = prims[0]!;\n\tconst document = Document.fromGraph(templatePrim.getGraph())!;\n\n\t// (1) Validation.\n\tif (!options.skipValidation && new Set(prims.map(createPrimGroupKey)).size > 1) {\n\t\tthrow new Error(\n\t\t\t'' +\n\t\t\t\t'Requires ≥2 Primitives, sharing the same Material ' +\n\t\t\t\t'and Mode, with compatible vertex attributes and indices.'\n\t\t);\n\t}\n\n\tconst remapList = [] as Uint32Array[]; // remap[srcIndex] → dstIndex, by prim\n\tconst countList = [] as number[]; // vertex count, by prim\n\tconst indicesList = [] as (Uint32Array | Uint16Array)[]; // indices, by prim\n\n\tlet dstVertexCount = 0;\n\tlet dstIndicesCount = 0;\n\n\t// (2) Build remap lists.\n\tfor (const srcPrim of prims) {\n\t\tconst indices = _getOrCreateIndices(srcPrim);\n\t\tconst remap = [];\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tconst index = indices[i];\n\t\t\tif (remap[index] === undefined) {\n\t\t\t\tremap[index] = dstVertexCount++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tdstIndicesCount++;\n\t\t}\n\t\tremapList.push(new Uint32Array(remap));\n\t\tcountList.push(count);\n\t\tindicesList.push(indices);\n\t}\n\n\t// (3) Allocate joined attributes.\n\tconst dstPrim = document.createPrimitive().setMode(templatePrim.getMode()).setMaterial(templatePrim.getMaterial());\n\tfor (const semantic of templatePrim.listSemantics()) {\n\t\tconst tplAttribute = templatePrim.getAttribute(semantic)!;\n\t\tconst AttributeArray = ComponentTypeToTypedArray[tplAttribute.getComponentType()];\n\t\tconst dstAttribute = document\n\t\t\t.createAccessor()\n\t\t\t.setType(tplAttribute.getType())\n\t\t\t.setBuffer(tplAttribute.getBuffer())\n\t\t\t.setNormalized(tplAttribute.getNormalized())\n\t\t\t.setArray(new AttributeArray(dstVertexCount * tplAttribute.getElementSize()));\n\t\tdstPrim.setAttribute(semantic, dstAttribute);\n\t}\n\n\t// (4) Allocate joined indices.\n\tconst dstIndicesArray = templatePrim.getIndices() ? createIndices(dstVertexCount) : null;\n\tconst dstIndices =\n\t\tdstIndicesArray &&\n\t\tdocument\n\t\t\t.createAccessor()\n\t\t\t.setBuffer(templatePrim.getIndices()!.getBuffer())\n\t\t\t.setArray(createIndices(dstIndicesCount, dstVertexCount));\n\tdstPrim.setIndices(dstIndices);\n\n\t// (5) Remap attributes into joined Primitive.\n\tlet dstNextIndex = 0;\n\tfor (let primIndex = 0; primIndex < remapList.length; primIndex++) {\n\t\tconst srcPrim = prims[primIndex];\n\t\tconst remap = remapList[primIndex];\n\t\tconst indicesArray = indicesList[primIndex];\n\n\t\tconst primStartIndex = dstNextIndex;\n\t\tlet primNextIndex = primStartIndex;\n\n\t\tfor (const semantic of dstPrim.listSemantics()) {\n\t\t\tconst srcAttribute = srcPrim.getAttribute(semantic)!;\n\t\t\tconst dstAttribute = dstPrim.getAttribute(semantic)!;\n\t\t\tconst el = [] as number[];\n\n\t\t\tprimNextIndex = primStartIndex;\n\t\t\tfor (let i = 0; i < indicesArray.length; i++) {\n\t\t\t\tconst index = indicesArray[i];\n\t\t\t\tsrcAttribute.getElement(index, el);\n\t\t\t\tdstAttribute.setElement(remap[index], el);\n\t\t\t\tif (dstIndices) {\n\t\t\t\t\tdstIndices.setScalar(primNextIndex++, remap[index]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdstNextIndex = primNextIndex;\n\t}\n\n\treturn dstPrim;\n}\n\nfunction _getOrCreateIndices(prim: Primitive): Uint16Array | Uint32Array {\n\tconst indices = prim.getIndices();\n\tif (indices) return indices.getArray() as Uint32Array | Uint16Array;\n\tconst position = prim.getAttribute('POSITION')!;\n\treturn createIndices(position.getCount());\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPropertyType,\n\tScene,\n\tTransform,\n} from '@gltf-transform/core';\nimport { invert, multiply } from 'gl-matrix/mat4';\nimport { joinPrimitives } from './join-primitives.js';\nimport { prune } from './prune.js';\nimport { transformPrimitive } from './transform-primitive.js';\nimport { createPrimGroupKey, createTransform, formatLong, isUsed } from './utils.js';\n\nconst NAME = 'join';\n\nconst { ROOT, NODE, MESH, PRIMITIVE, ACCESSOR } = PropertyType;\n\n// prettier-ignore\nconst _matrix = [\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n\t0, 0, 0, 0,\n] as mat4;\n\n/** Options for the {@link join} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface JoinOptions {\n\t/**\n\t * Prevents joining distinct {@link Mesh Meshes} and {@link Node Nodes}.\n\t * Joins only Primitives found within the same parent Mesh. To preserve\n\t * only _named_ Nodes and Meshes, use\n\t * {@link JoinOptions.keepNamed keepNamed} instead. Default: false.\n\t */\n\tkeepMeshes: boolean;\n\t/**\n\t * Prevents joining _named_ {@link Mesh Meshes} and {@link Node Nodes}.\n\t * If {@link JoinOptions.keepMeshes keepMeshes} is enabled, keepNamed will\n\t * have no effect. Default: false.\n\t */\n\tkeepNamed: boolean;\n}\n\nexport const JOIN_DEFAULTS: Required<JoinOptions> = {\n\tkeepMeshes: false,\n\tkeepNamed: false,\n};\n\n/**\n * Joins compatible {@link Primitive Primitives} and reduces draw calls.\n * Primitives are eligible for joining if they are members of the same\n * {@link Mesh} or, optionally, attached to sibling {@link Node Nodes}\n * in the scene hierarchy. For best results, apply {@link dedup} and\n * {@link flatten} first to maximize the number of Primitives that\n * can be joined.\n *\n * NOTE: In a Scene that heavily reuses the same Mesh data, joining may\n * increase vertex count. Consider alternatives, like\n * {@link instance instancing} with {@link EXTMeshGPUInstancing}.\n *\n * Example:\n *\n * ```ts\n * import { PropertyType } from '@gltf-transform/core';\n * import { join, flatten, dedup } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tdedup({ propertyTypes: [PropertyType.MATERIAL] }),\n * \tflatten(),\n * \tjoin({ keepNamed: false }),\n * );\n * ```\n */\nexport function join(_options: JoinOptions = JOIN_DEFAULTS): Transform {\n\tconst options = { ...JOIN_DEFAULTS, ..._options } as Required<JoinOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\t// Join.\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t_joinLevel(document, scene, options);\n\t\t\tscene.traverse((node) => _joinLevel(document, node, options));\n\t\t}\n\n\t\t// Clean up.\n\t\tawait document.transform(\n\t\t\tprune({\n\t\t\t\tpropertyTypes: [NODE, MESH, PRIMITIVE, ACCESSOR],\n\t\t\t\tkeepLeaves: false,\n\t\t\t\tkeepAttributes: true,\n\t\t\t})\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\ninterface IJoinGroup {\n\tkey: string;\n\tprims: Primitive[];\n\tprimMeshes: Mesh[];\n\tprimNodes: Node[];\n\tdstNode: Node;\n\tdstMesh?: Mesh | undefined;\n}\n\nfunction _joinLevel(document: Document, parent: Node | Scene, options: Required<JoinOptions>) {\n\tconst logger = document.getLogger();\n\tconst groups = {} as Record<string, IJoinGroup>;\n\n\t// Scan for compatible Primitives.\n\tconst children = parent.listChildren();\n\tfor (let nodeIndex = 0; nodeIndex < children.length; nodeIndex++) {\n\t\tconst node = children[nodeIndex];\n\n\t\t// Skip animated nodes.\n\t\tconst isAnimated = node.listParents().some((p) => p instanceof AnimationChannel);\n\t\tif (isAnimated) continue;\n\n\t\t// Skip nodes without meshes.\n\t\tconst mesh = node.getMesh();\n\t\tif (!mesh) continue;\n\n\t\t// Skip nodes with instancing; unsupported.\n\t\tif (node.getExtension('EXT_mesh_gpu_instancing')) continue;\n\n\t\t// Skip nodes with skinning; unsupported.\n\t\tif (node.getSkin()) continue;\n\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t// Skip prims with morph targets; unsupported.\n\t\t\tif (prim.listTargets().length > 0) continue;\n\n\t\t\t// Skip prims with volumetric materials; unsupported.\n\t\t\tconst material = prim.getMaterial();\n\t\t\tif (material && material.getExtension('KHR_materials_volume')) continue;\n\n\t\t\tlet key = createPrimGroupKey(prim);\n\n\t\t\tconst isNamed = mesh.getName() || node.getName();\n\t\t\tif (options.keepMeshes || (options.keepNamed && isNamed)) {\n\t\t\t\tkey += `|${nodeIndex}`;\n\t\t\t}\n\n\t\t\tif (!(key in groups)) {\n\t\t\t\tgroups[key] = {\n\t\t\t\t\tprims: [] as Primitive[],\n\t\t\t\t\tprimMeshes: [] as Mesh[],\n\t\t\t\t\tprimNodes: [] as Node[],\n\t\t\t\t\tdstNode: node,\n\t\t\t\t\tdstMesh: undefined,\n\t\t\t\t} as IJoinGroup;\n\t\t\t}\n\n\t\t\tconst group = groups[key];\n\t\t\tgroup.prims.push(prim);\n\t\t\tgroup.primNodes.push(node);\n\t\t}\n\t}\n\n\t// Discard single-Primitive groups.\n\tconst joinGroups = Object.values(groups).filter(({ prims }) => prims.length > 1);\n\n\t// Unlink all affected Meshes at current level, before modifying Primitives.\n\tconst srcNodes = new Set<Node>(joinGroups.flatMap((group) => group.primNodes));\n\tfor (const node of srcNodes) {\n\t\tconst mesh = node.getMesh()!;\n\t\tconst isSharedMesh = mesh.listParents().some((parent) => {\n\t\t\treturn parent.propertyType !== ROOT && node !== parent;\n\t\t});\n\t\tif (isSharedMesh) {\n\t\t\tnode.setMesh(mesh.clone());\n\t\t}\n\t}\n\n\t// Update Meshes in groups.\n\tfor (const group of joinGroups) {\n\t\tconst { dstNode, primNodes } = group;\n\t\tgroup.dstMesh = dstNode.getMesh()!;\n\t\tgroup.primMeshes = primNodes.map((node) => node.getMesh()!);\n\t}\n\n\t// Join Primitives.\n\tfor (const group of joinGroups) {\n\t\tconst { prims, primNodes, primMeshes, dstNode, dstMesh } = group as Required<IJoinGroup>;\n\t\tconst dstMatrix = dstNode.getMatrix();\n\n\t\tfor (let i = 0; i < prims.length; i++) {\n\t\t\tconst primNode = primNodes[i];\n\t\t\tconst primMesh = primMeshes[i];\n\n\t\t\tlet prim = prims[i];\n\t\t\tprimMesh.removePrimitive(prim);\n\n\t\t\t// Primitives may be reused directly, or their attributes may be\n\t\t\t// used in another Primitive with a different Material.\n\t\t\tif (isUsed(prim) || hasSharedAttributes(prim)) {\n\t\t\t\tprim = prims[i] = _deepClonePrimitive(prims[i]);\n\t\t\t}\n\n\t\t\t// Transform Primitive into new local coordinate space.\n\t\t\tif (primNode !== dstNode) {\n\t\t\t\tmultiply(_matrix, invert(_matrix, dstMatrix), primNode.getMatrix());\n\t\t\t\ttransformPrimitive(prim, _matrix);\n\t\t\t}\n\t\t}\n\n\t\tconst dstPrim = joinPrimitives(prims);\n\t\tconst dstVertexCount = dstPrim.listAttributes()[0].getCount();\n\t\tdstMesh.addPrimitive(dstPrim);\n\n\t\tlogger.debug(\n\t\t\t`${NAME}: Joined Primitives (${prims.length}) containing ` +\n\t\t\t\t`${formatLong(dstVertexCount)} vertices under Node \"${dstNode.getName()}\".`\n\t\t);\n\t}\n}\n\nfunction _deepClonePrimitive(src: Primitive): Primitive {\n\tconst dst = src.clone();\n\tfor (const semantic of dst.listSemantics()) {\n\t\tdst.setAttribute(semantic, dst.getAttribute(semantic)!.clone());\n\t}\n\tconst indices = dst.getIndices();\n\tif (indices) dst.setIndices(indices.clone());\n\treturn dst;\n}\n\nfunction hasSharedAttributes(prim: Primitive): boolean {\n\tfor (const attribute of prim.listAttributes()) {\n\t\tfor (const parent of attribute.listParents()) {\n\t\t\tif (parent !== prim && parent.propertyType !== ROOT) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n","import { Document, Texture } from '@gltf-transform/core';\nimport { Material, TextureChannel, PropertyType } from '@gltf-transform/core';\n\n/**\n * Returns a list of {@link TextureChannel TextureChannels} used by the given\n * texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel\n * in use. See {@link getTextureChannelMask} for bitmask alternative.\n *\n * Example:\n *\n * ```js\n * const channels = listTextureChannels(texture);\n * if (channels.includes(TextureChannel.R)) {\n *   console.log('texture red channel used');\n * }\n */\nexport function listTextureChannels(texture: Texture): TextureChannel[] {\n\tconst mask = getTextureChannelMask(texture);\n\tconst channels = [];\n\tif (mask & TextureChannel.R) channels.push(TextureChannel.R);\n\tif (mask & TextureChannel.G) channels.push(TextureChannel.G);\n\tif (mask & TextureChannel.B) channels.push(TextureChannel.B);\n\tif (mask & TextureChannel.A) channels.push(TextureChannel.A);\n\treturn channels;\n}\n\n/**\n * Returns bitmask of all {@link TextureChannel TextureChannels} used by the\n * given texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel.\n * See {@link listTextureChannels} for an array alternative.\n *\n * Example:\n *\n * ```js\n * const mask = getTextureChannelMask(texture);\n * if (mask & TextureChannel.R) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function getTextureChannelMask(texture: Texture): number {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tlet mask = 0x0000;\n\tfor (const edge of document.getGraph().listParentEdges(texture)) {\n\t\tconst parent = edge.getParent();\n\t\tlet { channels } = edge.getAttributes() as { channels: number | undefined };\n\n\t\tif (\n\t\t\tchannels &&\n\t\t\tedge.getName() === 'baseColorTexture' &&\n\t\t\tparent instanceof Material &&\n\t\t\tparent.getAlphaMode() === Material.AlphaMode.OPAQUE\n\t\t) {\n\t\t\tchannels &= ~TextureChannel.A;\n\t\t}\n\n\t\tif (channels) {\n\t\t\tmask |= channels;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\tdocument.getLogger().warn(`Missing attribute \".channels\" on edge, \"${edge.getName()}\".`);\n\t\t}\n\t}\n\treturn mask;\n}\n","import { Texture, TextureInfo } from '@gltf-transform/core';\n\n/**\n * Lists all {@link TextureInfo} definitions associated with a given {@link Texture}.\n *\n * Example:\n *\n * ```js\n * // Find TextureInfo instances associated with the texture.\n * const results = listTextureInfo(texture);\n *\n * // Find which UV sets (TEXCOORD_0, TEXCOORD_1, ...) are required.\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 0, 1]\n * ```\n */\nexport function listTextureInfo(texture: Texture): TextureInfo[] {\n\tconst graph = texture.getGraph();\n\tconst results: TextureInfo[] = [];\n\n\tfor (const textureEdge of graph.listParentEdges(texture)) {\n\t\tconst parent = textureEdge.getParent();\n\t\tconst name = textureEdge.getName() + 'Info';\n\n\t\tfor (const edge of graph.listChildEdges(parent)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (child instanceof TextureInfo && edge.getName() === name) {\n\t\t\t\tresults.push(child);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn results;\n}\n","import { Document, Texture } from '@gltf-transform/core';\n\n/**\n * Returns names of all texture slots using the given texture.\n *\n * Example:\n *\n * ```js\n * const slots = listTextureSlots(texture);\n * // → ['occlusionTexture', 'metallicRoughnesTexture']\n * ```\n */\nexport function listTextureSlots(texture: Texture): string[] {\n\tconst document = Document.fromGraph(texture.getGraph())!;\n\tconst root = document.getRoot();\n\tconst slots = texture\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.filter((edge) => edge.getParent() !== root)\n\t\t.map((edge) => edge.getName());\n\treturn Array.from(new Set(slots));\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform, deepListAttributes, remapAttribute, SetMap } from './utils.js';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder: unknown;\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance';\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n */\nexport function reorder(_options: ReorderOptions): Transform {\n\tconst options = { ...REORDER_DEFAULTS, ..._options } as Required<ReorderOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = createLayoutPlan(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size'\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Constructs a plan for processing vertex streams, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n */\nexport function createLayoutPlan(document: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of deepListAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { indicesToAttributes, indicesToMode, attributesToPrimitives };\n}\n","import { Accessor, GLTF, MathUtils, Primitive, PrimitiveTarget, TypedArray, vec4 } from '@gltf-transform/core';\n\n/**\n * Sorts skinning weights from high to low, for each vertex of the input\n * {@link Primitive} or {@link PrimitiveTarget}, and normalizes the weights.\n * Optionally, uses the given 'limit' to remove least-significant joint\n * influences such that no vertex has more than 'limit' influences.\n *\n * Most realtime engines support a limited number of joint influences per vertex,\n * often 4 or 8. Sorting and removing the additional influences can reduce file\n * size and improve compatibility.\n *\n * Example:\n *\n * ```javascript\n * import { sortPrimitiveWeights } from '@gltf-transform/functions';\n *\n * const limit = 4;\n * for (const mesh of document.getRoot().listMeshes()) {\n * \tfor (const prim of mesh.listPrimitives()) {\n * \t\tsortPrimitiveWeights(prim, limit);\n * \t}\n * }\n * ```\n *\n * @param prim Input, to be modified in place.\n * @param limit Maximum number of joint influences per vertex. Must be a multiple of four.\n */\nexport function sortPrimitiveWeights(prim: Primitive | PrimitiveTarget, limit = Infinity) {\n\tif ((Number.isFinite(limit) && limit % 4) || limit <= 0) {\n\t\tthrow new Error(`Limit must be positive multiple of four.`);\n\t}\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\t// (1) Sort.\n\n\tconst indices = new Uint16Array(setCount * 4);\n\tconst srcWeights = new Float32Array(setCount * 4);\n\tconst dstWeights = new Float32Array(setCount * 4);\n\tconst srcJoints = new Uint32Array(setCount * 4);\n\tconst dstJoints = new Uint32Array(setCount * 4);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'WEIGHTS', srcWeights);\n\t\tgetVertexArray(prim, i, 'JOINTS', srcJoints);\n\n\t\t// Sort indices to create a lookup table, indices[dstIndex] → srcIndex,\n\t\t// indexed into the weights and joints arrays.\n\t\tfor (let j = 0; j < setCount * 4; j++) indices[j] = j;\n\t\tindices.sort((a, b) => (srcWeights[a] > srcWeights[b] ? -1 : 1));\n\n\t\t// Sort weights and joints.\n\t\tfor (let j = 0; j < indices.length; j++) {\n\t\t\tdstWeights[j] = srcWeights[indices[j]];\n\t\t\tdstJoints[j] = srcJoints[indices[j]];\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'WEIGHTS', dstWeights);\n\t\tsetVertexArray(prim, i, 'JOINTS', dstJoints);\n\t}\n\n\t// (2) Limit.\n\tfor (let i = setCount; i * 4 > limit; i--) {\n\t\tconst weights = prim.getAttribute(`WEIGHTS_${i - 1}`)!;\n\t\tconst joints = prim.getAttribute(`JOINTS_${i - 1}`)!;\n\t\tprim.setAttribute(`WEIGHTS_${i - 1}`, null);\n\t\tprim.setAttribute(`JOINTS_${i - 1}`, null);\n\t\tif (weights.listParents().length === 1) weights.dispose();\n\t\tif (joints.listParents().length === 1) joints.dispose();\n\t}\n\n\t// (3) Normalize.\n\tnormalizePrimitiveWeights(prim);\n}\n\n// Utilities.\n\ntype PrimLike = Primitive | PrimitiveTarget;\n\nfunction normalizePrimitiveWeights(prim: PrimLike): void {\n\t// Would prefer to warn if unsafe, but no logger accessible in this scope.\n\tif (!isNormalizeSafe(prim)) return;\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\tconst templateAttribute = prim.getAttribute('WEIGHTS_0')!;\n\tconst templateArray = templateAttribute.getArray()!;\n\tconst componentType = templateAttribute.getComponentType();\n\tconst normalized = templateAttribute.getNormalized();\n\tconst normalizedComponentType = normalized ? componentType : undefined;\n\tconst delta = normalized ? MathUtils.decodeNormalizedInt(1, componentType) : Number.EPSILON;\n\tconst joints = new Uint32Array(setCount * 4).fill(0);\n\tconst weights = templateArray.slice(0, setCount * 4).fill(0);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'JOINTS', joints);\n\t\tgetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\n\t\tlet weightsSum = sum(weights, normalizedComponentType);\n\t\tif (weightsSum === 0) continue;\n\n\t\t// (1) If sum of weights not within δ of 1, renormalize all weights.\n\t\tif (Math.abs(1 - weightsSum) > delta) {\n\t\t\tfor (let j = 0; j < weights.length; j++) {\n\t\t\t\tif (normalized) {\n\t\t\t\t\tconst intValue = MathUtils.encodeNormalizedInt(weights[j] / weightsSum, componentType);\n\t\t\t\t\tweights[j] = MathUtils.decodeNormalizedInt(intValue, componentType);\n\t\t\t\t} else {\n\t\t\t\t\tweights[j] /= weightsSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tweightsSum = sum(weights, normalizedComponentType);\n\n\t\t// (2) Sum of normalized weights may still be off by δ. Compensate\n\t\t// in least-significant weight.\n\t\tif (normalized && weightsSum !== 1) {\n\t\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\t\tif (weights[j] > 0) {\n\t\t\t\t\tweights[j] += MathUtils.encodeNormalizedInt(1 - weightsSum, componentType);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Remove joint indices whose weights have fallen to zero.\n\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\tif (weights[j] === 0) {\n\t\t\t\tjoints[j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'JOINTS', joints);\n\t\tsetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\t}\n}\n\n/** Lists all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction getVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\ttarget: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): TypedArray {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tweights.getElement(vertexIndex, el);\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\ttarget[i * 4 + j] = MathUtils.encodeNormalizedInt(el[j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\ttarget[i * 4 + j] = el[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\n/** Sets all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction setVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\tvalues: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): void {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\tel[j] = MathUtils.decodeNormalizedInt(values[i * 4 + j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\tel[j] = values[i * 4 + j];\n\t\t\t}\n\t\t}\n\t\tweights.setElement(vertexIndex, el);\n\t}\n}\n\n/** Sum an array of numbers. */\nfunction sum(values: TypedArray, normalizedComponentType?: GLTF.AccessorComponentType): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < values.length; i++) {\n\t\tif (normalizedComponentType) {\n\t\t\tsum += MathUtils.decodeNormalizedInt(values[i], normalizedComponentType);\n\t\t} else {\n\t\t\tsum += values[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\n/** Returns true if attribute normalization is supported for this primitive. */\nfunction isNormalizeSafe(prim: PrimLike): boolean {\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.filter((name) => name.startsWith('WEIGHTS_'))\n\t\t.map((name) => prim.getAttribute(name)!);\n\tconst normList = attributes.map((a) => a.getNormalized());\n\tconst typeList = attributes.map((a) => a.getComponentType());\n\treturn new Set(normList).size === 1 && new Set(typeList).size === 1;\n}\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tILogger,\n\tmat4,\n\tMathUtils,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup.js';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { InstancedMesh, KHRMeshQuantization } from '@gltf-transform/extensions';\nimport type { Volume } from '@gltf-transform/extensions';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\nimport { sortPrimitiveWeights } from './sort-primitive-weights.js';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n\t/** Normalize weight attributes. */\n\tnormalizeWeights?: boolean;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<QuantizeOptions> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n\tnormalizeWeights: true,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n */\nconst quantize = (_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform => {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(KHRMeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t\ttransformMeshMaterials(mesh, 1 / nodeTransform.scale);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN, PropertyType.MATERIAL] }),\n\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.MATERIAL, PropertyType.SKIN] })\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>\n): void {\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!options.pattern.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (options.normalizeWeights && prim.getAttribute('WEIGHTS_0')) {\n\t\tsortPrimitiveWeights(prim, Infinity);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (!(parent instanceof Node)) continue;\n\n\t\tconst animChannels = parent.listParents().filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\tconst skin = parent.getSkin();\n\t\tif (skin) {\n\t\t\tparent.setSkin(transformSkin(skin, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst batch = parent.getExtension<InstancedMesh>('EXT_mesh_gpu_instancing');\n\t\tif (batch) {\n\t\t\tparent.setExtension('EXT_mesh_gpu_instancing', transformBatch(batch, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet targetNode: Node;\n\t\tif (isParentNode || isAnimated) {\n\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\tanimChannels\n\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t} else {\n\t\t\ttargetNode = parent;\n\t\t}\n\n\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\ttargetNode.setMatrix(nodeMatrix);\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone(); // quantize() does cleanup.\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/** Applies corrective scale and offset to GPU instancing batches. */\nfunction transformBatch(batch: InstancedMesh, nodeTransform: VectorTransform<vec3>): InstancedMesh {\n\tif (!batch.getAttribute('TRANSLATION') && !batch.getAttribute('ROTATION') && !batch.getAttribute('SCALE')) {\n\t\treturn batch;\n\t}\n\n\tbatch = batch.clone(); // quantize() does cleanup.\n\tconst instanceTranslation = batch.getAttribute('TRANSLATION')?.clone();\n\tconst instanceRotation = batch.getAttribute('ROTATION')?.clone();\n\tconst instanceScale = batch.getAttribute('SCALE')?.clone();\n\tconst tpl = (instanceTranslation || instanceRotation || instanceScale)!;\n\n\tconst T_IDENTITY = [0, 0, 0] as vec3;\n\tconst R_IDENTITY = [0, 0, 0, 1] as vec4;\n\tconst S_IDENTITY = [1, 1, 1] as vec3;\n\n\tconst t = [0, 0, 0] as vec3;\n\tconst r = [0, 0, 0, 1] as vec4;\n\tconst s = [1, 1, 1] as vec3;\n\n\t// prettier-ignore\n\tconst instanceMatrix = [\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1,\n\t] as mat4;\n\n\tconst transformMatrix = fromTransform(nodeTransform);\n\n\tfor (let i = 0, count = tpl.getCount(); i < count; i++) {\n\t\tMathUtils.compose(\n\t\t\tinstanceTranslation ? (instanceTranslation.getElement(i, t) as vec3) : T_IDENTITY,\n\t\t\tinstanceRotation ? (instanceRotation.getElement(i, r) as vec4) : R_IDENTITY,\n\t\t\tinstanceScale ? (instanceScale.getElement(i, s) as vec3) : S_IDENTITY,\n\t\t\tinstanceMatrix\n\t\t);\n\n\t\tmultiplyMat4(instanceMatrix, instanceMatrix, transformMatrix);\n\n\t\tMathUtils.decompose(instanceMatrix, t, r, s);\n\n\t\tif (instanceTranslation) instanceTranslation.setElement(i, t);\n\t\tif (instanceRotation) instanceRotation.setElement(i, r);\n\t\tif (instanceScale) instanceScale.setElement(i, s);\n\t}\n\n\tif (instanceTranslation) batch.setAttribute('TRANSLATION', instanceTranslation);\n\tif (instanceRotation) batch.setAttribute('ROTATION', instanceRotation);\n\tif (instanceScale) batch.setAttribute('SCALE', instanceScale);\n\n\treturn batch;\n}\n\n/** Applies corrective scale to volumetric materials, which give thickness in local units. */\nfunction transformMeshMaterials(mesh: Mesh, scale: number) {\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tlet material = prim.getMaterial();\n\t\tif (!material) continue;\n\n\t\tlet volume = material.getExtension<Volume>('KHR_materials_volume');\n\t\tif (!volume || volume.getThicknessFactor() <= 0) continue;\n\n\t\t// quantize() does cleanup.\n\t\tvolume = volume.clone().setThicknessFactor(volume.getThicknessFactor() * scale);\n\t\tmaterial = material.clone().setExtension('KHR_materials_volume', volume);\n\t\tprim.setMaterial(material);\n\t}\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tlet value = Math.round(Math.abs(el[j]) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\t// TODO(feat): Support sparse accessors, https://github.com/donmccurdy/glTF-Transform/issues/795\n\tattribute.setArray(dstArray).setNormalized(true).setSparse(false);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: ILogger,\n\toptions: Required<QuantizeOptions>\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n\nexport { quantize };\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { EXTMeshoptCompression } from '@gltf-transform/extensions';\nimport type { MeshoptEncoder } from 'meshoptimizer';\nimport { reorder } from './reorder.js';\nimport { quantize } from './quantize.js';\nimport { createTransform } from './utils.js';\n\nexport interface MeshoptOptions {\n\tencoder: unknown;\n\tlevel?: 'medium' | 'high';\n}\n\nexport const MESHOPT_DEFAULTS: Required<Omit<MeshoptOptions, 'encoder'>> = { level: 'high' };\n\nconst NAME = 'meshopt';\n\n/**\n * Applies Meshopt compression using {@link EXTMeshoptCompression EXT_meshopt_compression}.\n * This type of compression can reduce the size of point, line, and triangle geometry,\n * morph targets, and animation data.\n *\n * This function is a thin wrapper around {@link reorder}, {@link quantize}, and\n * {@link EXTMeshoptCompression}, and exposes relatively few configuration options.\n * To access more options (like quantization bits) direct use of the underlying\n * functions is recommended.\n *\n * Example:\n *\n * ```javascript\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n *   reorder({encoder: MeshoptEncoder, level: 'medium'})\n * );\n * ```\n */\nexport const meshopt = (_options: MeshoptOptions): Transform => {\n\tconst options = { ...MESHOPT_DEFAULTS, ..._options } as Required<MeshoptOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tawait document.transform(\n\t\t\treorder({\n\t\t\t\tencoder: encoder,\n\t\t\t\ttarget: 'size',\n\t\t\t}),\n\t\t\tquantize({\n\t\t\t\t// IMPORTANT: Vertex attributes should be quantized in 'high' mode IFF they are\n\t\t\t\t// _not_ filtered in 'packages/extensions/src/ext-meshopt-compression/encoder.ts'.\n\t\t\t\tpattern: options.level === 'medium' ? /.*/ : /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/,\n\t\t\t\tquantizePosition: 14,\n\t\t\t\tquantizeTexcoord: 12,\n\t\t\t\tquantizeColor: 8,\n\t\t\t\tquantizeNormal: 8,\n\t\t\t})\n\t\t);\n\n\t\tdocument\n\t\t\t.createExtension(EXTMeshoptCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.level === 'medium'\n\t\t\t\t\t\t? EXTMeshoptCompression.EncoderMethod.QUANTIZE\n\t\t\t\t\t\t: EXTMeshoptCompression.EncoderMethod.FILTER,\n\t\t\t});\n\t});\n};\n","import type { Document, Texture, Transform } from '@gltf-transform/core';\nimport {\n\tKHRMaterialsIOR,\n\tKHRMaterialsPBRSpecularGlossiness,\n\tKHRMaterialsSpecular,\n\tPBRSpecularGlossiness,\n} from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils.js';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n */\nexport function metalRough(_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...METALROUGH_DEFAULTS, ..._options } as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(KHRMaterialsIOR);\n\t\tconst specExtension = doc.createExtension(KHRMaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(KHRMaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension\n\t\t\t\t.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","\nimport type { Accessor, Document, ILogger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform, formatDeltaOp } from './utils.js';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n */\nexport function unweld(_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNWELD_DEFAULTS, ..._options } as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\tconst srcVertexCount = prim.getAttribute('POSITION')!.getCount();\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dstVertexCount = prim.getAttribute('POSITION')!.getCount();\n\t\t\t\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\tsrcAttribute: Accessor,\n\tindices: Accessor,\n\tlogger: ILogger,\n\tvisited: Map<Accessor, Map<Accessor, Accessor>>\n): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as new (len: number) => TypedArray;\n\tdstAttribute.setArray(new ArrayCtor(indices.getCount() * srcAttribute.getElementSize()));\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { unweld } from './unweld.js';\nimport { createTransform } from './utils.js';\nimport { normalize } from 'gl-matrix/vec3';\n\nconst NAME = 'normals';\n\n/** Options for the {@link normals} function. */\nexport interface NormalsOptions {\n\t/** Whether to overwrite existing `NORMAL` attributes. */\n\toverwrite?: boolean;\n}\n\nconst NORMALS_DEFAULTS: Required<NormalsOptions> = {\n\toverwrite: false,\n};\n\n/**\n * Generates flat vertex normals for mesh primitives.\n *\n * Example:\n *\n * ```ts\n * import { normals } from '@gltf-transform/functions';\n *\n * await document.transform(normals({overwrite: true}));\n * ```\n */\nexport function normals(_options: NormalsOptions = NORMALS_DEFAULTS): Transform {\n\tconst options = { ...NORMALS_DEFAULTS, ..._options } as Required<NormalsOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tlet modified = 0;\n\n\t\tawait document.transform(unweld());\n\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\t\tlet normal = prim.getAttribute('NORMAL');\n\n\t\t\t\tif (options.overwrite && normal) {\n\t\t\t\t\tnormal.dispose();\n\t\t\t\t} else if (normal) {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping primitive: NORMAL found.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnormal = document\n\t\t\t\t\t.createAccessor()\n\t\t\t\t\t.setArray(new Float32Array(position.getCount() * 3))\n\t\t\t\t\t.setType('VEC3');\n\n\t\t\t\tconst a = [0, 0, 0] as vec3;\n\t\t\t\tconst b = [0, 0, 0] as vec3;\n\t\t\t\tconst c = [0, 0, 0] as vec3;\n\n\t\t\t\tfor (let i = 0; i < position.getCount(); i += 3) {\n\t\t\t\t\tposition.getElement(i + 0, a);\n\t\t\t\t\tposition.getElement(i + 1, b);\n\t\t\t\t\tposition.getElement(i + 2, c);\n\n\t\t\t\t\tconst faceNormal = computeNormal(a, b, c);\n\n\t\t\t\t\tnormal.setElement(i + 0, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 1, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 2, faceNormal);\n\t\t\t\t}\n\n\t\t\t\tprim.setAttribute('NORMAL', normal);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/23709352/1314762\nfunction computeNormal(a: vec3, b: vec3, c: vec3): vec3 {\n\tconst A = [b[0] - a[0], b[1] - a[1], b[2] - a[2]];\n\tconst B = [c[0] - a[0], c[1] - a[1], c[2] - a[2]];\n\tconst n = [\n\t\tA[1] * B[2] - A[2] * B[1], //\n\t\tA[2] * B[0] - A[0] * B[2],\n\t\tA[0] * B[1] - A[1] * B[0],\n\t] as vec3;\n\treturn normalize([0, 0, 0], n) as vec3;\n}\n","import { Document, ILogger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> = {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n */\nconst partition = (_options: PartitionOptions = PARTITION_DEFAULTS): Transform => {\n\tconst options = { ...PARTITION_DEFAULTS, ..._options } as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.BUFFER] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction partitionMeshes(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\tprimitive.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\tprimitive.listTargets().forEach((primTarget) => {\n\t\t\t\t\tprimTarget.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI(basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n\nexport { partition };\n","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import {\n\tAccessor,\n\tAnimationSampler,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tTransformContext,\n} from '@gltf-transform/core';\nimport quat, { getAngle, slerp } from 'gl-matrix/quat';\nimport { dedup } from './dedup.js';\nimport { createTransform, isTransformPending } from './utils.js';\n\nconst NAME = 'resample';\n\nexport interface ResampleOptions {\n\ttolerance?: number;\n}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> = { tolerance: 1e-4 };\n\n/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate\n * keyframes are commonly present in animation 'baked' by the authoring software to apply IK\n * constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Example: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n */\nexport const resample = (_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform => {\n\tconst options = { ...RESAMPLE_DEFAULTS, ..._options } as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst srcAccessorCount = document.getRoot().listAccessors().length;\n\t\tconst logger = document.getLogger();\n\n\t\tlet didSkipMorphTargets = false;\n\n\t\tfor (const animation of document.getRoot().listAnimations()) {\n\t\t\t// Skip morph targets, see https://github.com/donmccurdy/glTF-Transform/issues/290.\n\t\t\tconst samplerTargetPaths = new Map<AnimationSampler, GLTF.AnimationChannelTargetPath>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tsamplerTargetPaths.set(channel.getSampler()!, channel.getTargetPath()!);\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tif (samplerTargetPaths.get(sampler) === 'weights') {\n\t\t\t\t\tdidSkipMorphTargets = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (sampler.getInterpolation() === 'STEP' || sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\taccessorsVisited.add(sampler.getInput()!);\n\t\t\t\t\taccessorsVisited.add(sampler.getOutput()!);\n\t\t\t\t\toptimize(sampler, samplerTargetPaths.get(sampler)!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\t// Resampling may result in duplicate input or output sampler\n\t\t// accessors. Find and remove the duplicates after processing.\n\t\tconst dstAccessorCount = document.getRoot().listAccessors().length;\n\t\tif (dstAccessorCount > srcAccessorCount && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tif (didSkipMorphTargets) {\n\t\t\tlogger.warn(`${NAME}: Skipped optimizing morph target keyframes, not yet supported.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction optimize(sampler: AnimationSampler, path: GLTF.AnimationChannelTargetPath, options: ResampleOptions): void {\n\tconst input = sampler.getInput()!.clone().setSparse(false);\n\tconst output = sampler.getOutput()!.clone().setSparse(false);\n\n\tconst tolerance = options.tolerance as number;\n\tconst interpolation = sampler.getInterpolation();\n\n\tconst lastIndex = input.getCount() - 1;\n\tconst tmp: number[] = [];\n\tconst value: number[] = [];\n\tconst valueNext: number[] = [];\n\tconst valuePrev: number[] = [];\n\n\tlet writeIndex = 1;\n\n\tfor (let i = 1; i < lastIndex; ++i) {\n\t\tconst timePrev = input.getScalar(writeIndex - 1);\n\t\tconst time = input.getScalar(i);\n\t\tconst timeNext = input.getScalar(i + 1);\n\t\tconst t = (time - timePrev) / (timeNext - timePrev);\n\n\t\tlet keep = false;\n\n\t\t// Remove unnecessary adjacent keyframes.\n\t\tif (time !== timeNext && (i !== 1 || time !== input.getScalar(0))) {\n\t\t\toutput.getElement(writeIndex - 1, valuePrev);\n\t\t\toutput.getElement(i, value);\n\t\t\toutput.getElement(i + 1, valueNext);\n\n\t\t\tif (interpolation === 'LINEAR' && path === 'rotation') {\n\t\t\t\t// Prune keyframes colinear with prev/next keyframes.\n\t\t\t\tconst sample = slerp(tmp as quat, valuePrev as quat, valueNext as quat, t) as number[];\n\t\t\t\tconst angle = getAngle(valuePrev as quat, value as quat) + getAngle(value as quat, valueNext as quat);\n\t\t\t\tkeep = !MathUtils.eq(value, sample, tolerance) || angle + Number.EPSILON >= Math.PI;\n\t\t\t} else if (interpolation === 'LINEAR') {\n\t\t\t\t// Prune keyframes colinear with prev/next keyframes.\n\t\t\t\tconst sample = vlerp(tmp, valuePrev, valueNext, t);\n\t\t\t\tkeep = !MathUtils.eq(value, sample, tolerance);\n\t\t\t} else if (interpolation === 'STEP') {\n\t\t\t\t// Prune keyframes identical to prev/next keyframes.\n\t\t\t\tkeep = !MathUtils.eq(value, valuePrev) || !MathUtils.eq(value, valueNext);\n\t\t\t}\n\t\t}\n\n\t\t// In-place compaction.\n\t\tif (keep) {\n\t\t\tif (i !== writeIndex) {\n\t\t\t\tinput.setScalar(writeIndex, input.getScalar(i));\n\t\t\t\toutput.setElement(writeIndex, output.getElement(i, tmp));\n\t\t\t}\n\t\t\twriteIndex++;\n\t\t}\n\t}\n\n\t// Flush last keyframe (compaction looks ahead).\n\tif (lastIndex > 0) {\n\t\tinput.setScalar(writeIndex, input.getScalar(lastIndex));\n\t\toutput.setElement(writeIndex, output.getElement(lastIndex, tmp));\n\t\twriteIndex++;\n\t}\n\n\t// If the sampler was optimized, truncate and save the results. If not, clean up.\n\tif (writeIndex !== input.getCount()) {\n\t\tinput.setArray(input.getArray()!.slice(0, writeIndex));\n\t\toutput.setArray(output.getArray()!.slice(0, writeIndex * output.getElementSize()));\n\t\tsampler.setInput(input);\n\t\tsampler.setOutput(output);\n\t} else {\n\t\tinput.dispose();\n\t\toutput.dispose();\n\t}\n}\n\nfunction lerp(v0: number, v1: number, t: number): number {\n\treturn v0 * (1 - t) + v1 * t;\n}\n\nfunction vlerp(out: number[], a: number[], b: number[], t: number): number[] {\n\tfor (let i = 0; i < a.length; i++) out[i] = lerp(a[i], b[i], t);\n\treturn out;\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n */\nexport function sequence (_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = {...SEQUENCE_DEFAULTS, ..._options} as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes()\n\t\t\t.filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => a.getName() > b.getName() ? 1 : -1);\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(inputArray))\n\t\t\t\t.setBuffer(animBuffer);\n\t\t\tconst output = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tTransform,\n\tTypedArray,\n\tvec3,\n} from '@gltf-transform/core';\nimport { cleanPrimitive } from './clean-primitive.js';\nimport { dedup } from './dedup.js';\nimport { prune } from './prune.js';\nimport { createIndices, createTransform, formatDeltaOp } from './utils.js';\n\n// DEVELOPER NOTES: Ideally a weld() implementation should be fast, robust,\n// and tunable. The writeup below tracks my attempts to solve for these\n// constraints.\n//\n// (Approach #1) Follow the mergeVertices() implementation of three.js,\n// hashing vertices with a string concatenation of all vertex attributes.\n// The approach does not allow per-attribute tolerance in local units.\n//\n// (Approach #2) Sort points along the X axis, then make cheaper\n// searches up/down the sorted list for merge candidates. While this allows\n// simpler comparison based on specified tolerance, it's much slower, even\n// for cases where choice of the X vs. Y or Z axes is reasonable.\n//\n// (Approach #3) Attempted a Delaunay triangulation in three dimensions,\n// expecting it would be an n * log(n) algorithm, but the only implementation\n// I found (with delaunay-triangulate) appeared to be much slower than that,\n// and was notably slower than the sort-based approach, just building the\n// Delaunay triangulation alone.\n//\n// (Approach #4) Hybrid of (1) and (2), assigning vertices to a spatial\n// grid, then searching the local neighborhood (27 cells) for weld candidates.\n//\n// RESULTS: For the \"Lovecraftian\" sample model, after joining, a primitive\n// with 873,000 vertices can be welded down to 230,000 vertices. Results:\n// - (1) Not tested, but prior results suggest not robust enough.\n// - (2) 30 seconds\n// - (3) 660 seconds\n// - (4) 5 seconds exhaustive, 1.5s non-exhaustive\n\nconst NAME = 'weld';\n\nconst Tolerance = {\n\tDEFAULT: 0.0001,\n\tTEXCOORD: 0.0001, // [0, 1]\n\tCOLOR: 0.01, // [0, 1]\n\tNORMAL: 0.5, // [-1, 1]\n\tJOINTS: 0.0, // [0, ∞]\n\tWEIGHTS: 0.01, // [0, ∞]\n};\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Tolerance, as a fraction of primitive AABB, used when merging similar vertices. */\n\ttolerance?: number;\n\t/** Whether to overwrite existing indices. */\n\toverwrite?: boolean;\n\t/** Enables a more thorough, but slower, search for vertices to weld. */\n\texhaustive?: boolean;\n}\n\nexport const WELD_DEFAULTS: Required<WeldOptions> = {\n\ttolerance: Tolerance.DEFAULT,\n\toverwrite: true,\n\texhaustive: false, // donmccurdy/glTF-Transform#886\n};\n\n/**\n * Index {@link Primitive Primitives} and (optionally) merge similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For --tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```javascript\n * import { weld } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tweld({ tolerance: 0.001 })\n * );\n * ```\n */\nexport function weld(_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = { ...WELD_DEFAULTS, ..._options } as Required<WeldOptions>;\n\n\tif (options.tolerance > 0.1 || options.tolerance < 0) {\n\t\tthrow new Error(`${NAME}: Requires 0 ≤ tolerance ≤ 0.1`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tweldPrimitive(doc, prim, options);\n\n\t\t\t\tif (prim.getIndices()!.getCount() === 0) prim.dispose();\n\t\t\t}\n\n\t\t\tif (mesh.listPrimitives().length === 0) mesh.dispose();\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.NODE] }));\n\t\tawait doc.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Index a {@link Primitive} and (optionally) weld similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For --tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```javascript\n * import { weldPrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes()\n * \t.find((mesh) => mesh.getName() === 'Gizmo');\n *\n * for (const prim of mesh.listPrimitives()) {\n *   weldPrimitive(document, prim, {tolerance: 0.0001});\n * }\n * ```\n */\nexport function weldPrimitive(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tif (prim.getIndices() && !options.overwrite) return;\n\tif (prim.getMode() === Primitive.Mode.POINTS) return;\n\tif (options.tolerance === 0) {\n\t\t_indexPrimitive(doc, prim);\n\t} else {\n\t\t_weldPrimitive(doc, prim, options);\n\t}\n}\n\n/** @internal Adds indices, if missing. Does not merge vertices. */\nfunction _indexPrimitive(doc: Document, prim: Primitive): void {\n\t// No need to overwrite here, even if options.overwrite=true.\n\tif (prim.getIndices()) return;\n\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indices = doc\n\t\t.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(createIndices(numVertices));\n\tprim.setIndices(indices);\n}\n\n/** @internal Weld and merge, combining vertices that are similar on all vertex attributes. */\nfunction _weldPrimitive(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst logger = doc.getLogger();\n\n\tconst srcPosition = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices() || doc.createAccessor().setArray(createIndices(srcPosition.getCount()));\n\tconst uniqueIndices = new Uint32Array(new Set(srcIndices.getArray()!)).sort();\n\n\t// (1) Compute per-attribute tolerance and spatial grid for vertices.\n\n\tconst baseTolerance = Math.max(options.tolerance, Number.EPSILON);\n\tconst attributeTolerance: Record<string, number> = {};\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tattributeTolerance[semantic] = getAttributeTolerance(semantic, attribute, baseTolerance);\n\t}\n\n\tlogger.debug(`${NAME}: Tolerance thresholds: ${formatKV(attributeTolerance)}`);\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst posA: vec3 = [0, 0, 0];\n\tconst posB: vec3 = [0, 0, 0];\n\n\tconst grid = {} as Record<string, number[]>;\n\tconst cellSize = attributeTolerance.POSITION;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tsrcPosition.getElement(uniqueIndices[i], posA);\n\t\tconst key = getGridKey(posA, cellSize);\n\t\tgrid[key] = grid[key] || [];\n\t\tgrid[key].push(uniqueIndices[i]);\n\t}\n\n\t// (2) Compare and identify vertices to weld.\n\n\tconst weldMap = createIndices(uniqueIndices.length); // oldIndex → oldCommonIndex\n\tconst writeMap = new Array(uniqueIndices.length).fill(-1); // oldIndex → newIndex\n\n\tconst srcVertexCount = srcPosition.getCount();\n\tlet dstVertexCount = 0;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tconst a = uniqueIndices[i];\n\t\tsrcPosition.getElement(a, posA);\n\n\t\tconst cellKeys = options.exhaustive ? getGridNeighborhoodKeys(posA, cellSize) : [getGridKey(posA, cellSize)];\n\n\t\tcells: for (const cellKey of cellKeys) {\n\t\t\tif (!grid[cellKey]) continue cells; // May occur in exhaustive search.\n\n\t\t\tneighbors: for (const j of grid[cellKey]) {\n\t\t\t\tconst b = weldMap[j];\n\n\t\t\t\t// Only weld to lower indices, preventing two-way match.\n\t\t\t\tif (a <= b) continue neighbors;\n\n\t\t\t\tsrcPosition.getElement(b, posB);\n\n\t\t\t\t// Weld if base attributes and morph target attributes match.\n\t\t\t\tconst isBaseMatch = prim.listSemantics().every((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t});\n\t\t\t\tconst isTargetMatch = prim.listTargets().every((target) => {\n\t\t\t\t\treturn target.listSemantics().every((semantic) => {\n\t\t\t\t\t\tconst attribute = target.getAttribute(semantic)!;\n\t\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif (isBaseMatch && isTargetMatch) {\n\t\t\t\t\tweldMap[a] = b;\n\t\t\t\t\tbreak cells;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Output the vertex if we didn't find a match, else record the index of the match. Because\n\t\t// we iterate vertices in ascending order, and only match to lower indices, we're\n\t\t// guaranteed the source vertex for a weld has already been marked for output.\n\t\tif (weldMap[a] === a) {\n\t\t\twriteMap[a] = dstVertexCount++;\n\t\t} else {\n\t\t\twriteMap[a] = writeMap[weldMap[a]];\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t// (3) Update indices.\n\n\tconst dstIndicesCount = srcIndices.getCount(); // # primitives does not change.\n\tconst dstIndicesArray = createIndices(dstIndicesCount, uniqueIndices.length);\n\tfor (let i = 0; i < dstIndicesCount; i++) {\n\t\tdstIndicesArray[i] = writeMap[srcIndices.getScalar(i)];\n\t}\n\tprim.setIndices(srcIndices.clone().setArray(dstIndicesArray));\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\t// (4) Update vertex attributes.\n\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, writeMap, dstVertexCount);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, writeMap, dstVertexCount);\n\t\t}\n\t}\n\n\t// (5) Clean up degenerate triangles.\n\n\tcleanPrimitive(prim);\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\tparent: Primitive | PrimitiveTarget,\n\tsrcAttr: Accessor,\n\treorder: number[],\n\tdstCount: number\n): void {\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstCount * srcAttr.getElementSize());\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\tconst done = new Uint8Array(dstCount);\n\n\tfor (let i = 0, el = [] as number[]; i < reorder.length; i++) {\n\t\tif (!done[reorder[i]]) {\n\t\t\tdstAttr.setElement(reorder[i], srcAttr.getElement(i, el));\n\t\t\tdone[reorder[i]] = 1;\n\t\t}\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n\n\t// Clean up.\n\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n}\n\nconst _a = [] as number[];\nconst _b = [] as number[];\n\n/** Computes a per-attribute tolerance, based on domain and usage of the attribute. */\nfunction getAttributeTolerance(semantic: string, attribute: Accessor, tolerance: number): number {\n\t// Attributes like NORMAL and COLOR_# do not vary in range like POSITION,\n\t// so do not apply the given tolerance factor to these attributes.\n\tif (semantic === 'NORMAL' || semantic === 'TANGENT') return Tolerance.NORMAL;\n\tif (semantic.startsWith('COLOR_')) return Tolerance.COLOR;\n\tif (semantic.startsWith('TEXCOORD_')) return Tolerance.TEXCOORD;\n\tif (semantic.startsWith('JOINTS_')) return Tolerance.JOINTS;\n\tif (semantic.startsWith('WEIGHTS_')) return Tolerance.WEIGHTS;\n\n\t_a.length = _b.length = 0;\n\tattribute.getMinNormalized(_a);\n\tattribute.getMaxNormalized(_b);\n\tconst range = Math.max(..._b) - Math.min(..._a) || 1;\n\treturn tolerance * range;\n}\n\n/** Compares two vertex attributes against a tolerance threshold. */\nfunction compareAttributes(attribute: Accessor, a: number, b: number, tolerance: number, _semantic: string): boolean {\n\tattribute.getElement(a, _a);\n\tattribute.getElement(b, _b);\n\tfor (let i = 0, il = attribute.getElementSize(); i < il; i++) {\n\t\tif (Math.abs(_a[i] - _b[i]) > tolerance) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction formatKV(kv: Record<string, unknown>): string {\n\treturn Object.entries(kv)\n\t\t.map(([k, v]) => `${k}=${v}`)\n\t\t.join(', ');\n}\n\n// Order to search nearer cells first.\nconst CELL_OFFSETS = [0, -1, 1];\n\nfunction getGridNeighborhoodKeys(p: vec3, cellSize: number): string[] {\n\tconst keys = [] as string[];\n\tconst _p = [0, 0, 0] as vec3;\n\tfor (const i of CELL_OFFSETS) {\n\t\tfor (const j of CELL_OFFSETS) {\n\t\t\tfor (const k of CELL_OFFSETS) {\n\t\t\t\t_p[0] = p[0] + i * cellSize;\n\t\t\t\t_p[1] = p[1] + j * cellSize;\n\t\t\t\t_p[2] = p[2] + k * cellSize;\n\t\t\t\tkeys.push(getGridKey(_p, cellSize));\n\t\t\t}\n\t\t}\n\t}\n\treturn keys;\n}\n\nfunction getGridKey(p: vec3, cellSize: number): string {\n\tconst cellX = Math.round(p[0] / cellSize);\n\tconst cellY = Math.round(p[1] / cellSize);\n\tconst cellZ = Math.round(p[2] / cellSize);\n\treturn cellX + ':' + cellY + ':' + cellZ;\n}\n","import type { Primitive } from '@gltf-transform/core';\nimport { createIndices } from './utils.js';\n\n/**\n * Removes degenerate triangles from the {@link Primitive}. Any triangle containing fewer than\n * three different vertex indices is considered degenerate. This method does not merge/weld\n * different vertices containing identical data — use {@link weld} first for that purpose.\n *\n * @internal\n */\nexport function cleanPrimitive(prim: Primitive): void {\n\tconst indices = prim.getIndices();\n\tif (!indices) return;\n\n\tconst tmpIndicesArray = [];\n\tlet maxIndex = -Infinity;\n\n\tfor (let i = 0, il = indices.getCount(); i < il; i += 3) {\n\t\tconst a = indices.getScalar(i);\n\t\tconst b = indices.getScalar(i + 1);\n\t\tconst c = indices.getScalar(i + 2);\n\n\t\tif (a === b || a === c || b === c) continue;\n\n\t\ttmpIndicesArray.push(a, b, c);\n\t\tmaxIndex = Math.max(maxIndex, a, b, c);\n\t}\n\n\tconst dstIndicesArray = createIndices(tmpIndicesArray.length, maxIndex);\n\tdstIndicesArray.set(tmpIndicesArray);\n\tindices.setArray(dstIndicesArray);\n}\n","import { Accessor, Document, Primitive, PropertyType, Transform, TransformContext } from '@gltf-transform/core';\nimport {\n\tcreateTransform,\n\tformatDeltaOp,\n\tdeepListAttributes,\n\tremapAttribute,\n\tdeepSwapAttribute,\n\tisTransformPending,\n} from './utils.js';\nimport { weld } from './weld.js';\nimport type { MeshoptSimplifier } from 'meshoptimizer';\nimport { dedup } from './dedup.js';\n\nconst NAME = 'simplify';\n\n/** Options for the {@link simplify} function. */\nexport interface SimplifyOptions {\n\t/** MeshoptSimplifier instance. */\n\tsimplifier: unknown;\n\t/** Target ratio (0–1) of vertices to keep. Default: 0.0 (0%). */\n\tratio?: number;\n\t/** Limit on error, as a fraction of mesh radius. Default: 0.0001 (0.01%). */\n\terror?: number;\n\t/**\n\t * Whether to lock topological borders of the mesh. May be necessary when\n\t * adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping\n\t * to ensure no seams appear.\n\t */\n\tlockBorder?: boolean;\n}\n\nexport const SIMPLIFY_DEFAULTS: Required<Omit<SimplifyOptions, 'simplifier'>> = {\n\tratio: 0.0,\n\terror: 0.0001,\n\tlockBorder: false,\n};\n\n/**\n * Simplification algorithm, based on meshoptimizer, producing meshes with fewer\n * triangles and vertices. Simplification is lossy, but the algorithm aims to\n * preserve visual quality as much as possible for given parameters.\n *\n * The algorithm aims to reach the target 'ratio', while minimizing error. If\n * error exceeds the specified 'error' threshold, the algorithm will quit\n * before reaching the target ratio. Examples:\n *\n * - ratio=0.0, error=0.0001: Aims for maximum simplification, constrained to 0.01% error.\n * - ratio=0.5, error=0.0001: Aims for 50% simplification, constrained to 0.01% error.\n * - ratio=0.5, error=1: Aims for 50% simplification, unconstrained by error.\n *\n * Topology, particularly split vertices, will also limit the simplifier. For\n * best results, apply a {@link weld} operation before simplification.\n *\n * Example:\n *\n * ```javascript\n * import { simplify, weld } from '@gltf-transform/functions';\n * import { MeshoptSimplifier } from 'meshoptimizer';\n *\n * await document.transform(\n *   weld({ tolerance: 0.0001 }),\n *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75, error: 0.001 })\n * );\n * ```\n *\n * References:\n * - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier\n */\nexport const simplify = (_options: SimplifyOptions): Transform => {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier | undefined;\n\n\tif (!simplifier) {\n\t\tthrow new Error(`${NAME}: simplifier dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tawait simplifier.ready;\n\t\tawait document.transform(weld({ overwrite: false }));\n\n\t\t// Simplify mesh primitives.\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`${NAME}: Skipping primitive of mesh \"${mesh.getName()}\": Requires TRIANGLES draw mode.`\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsimplifyPrimitive(document, prim, options);\n\t\t\t}\n\t\t}\n\n\t\t// Where multiple primitive indices point into the same vertex streams, simplification\n\t\t// may write duplicate streams. Find and remove the duplicates after processing.\n\t\tif (!isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nexport function simplifyPrimitive(document: Document, prim: Primitive, _options: SimplifyOptions): Primitive {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier;\n\n\tconst logger = document.getLogger();\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices()!;\n\tconst srcVertexCount = position.getCount();\n\n\tlet positionArray = position.getArray()!;\n\tlet indicesArray = srcIndices.getArray()!;\n\n\t// (1) Gather attributes and indices in Meshopt-compatible format.\n\n\tif (position.getComponentType() !== Accessor.ComponentType.FLOAT) {\n\t\tif (position.getNormalized()) {\n\t\t\tconst src = positionArray;\n\t\t\tconst dst = new Float32Array(src.length);\n\n\t\t\t// Dequantize.\n\t\t\tfor (let i = 0, il = position.getCount(), el = [] as number[]; i < il; i++) {\n\t\t\t\tel = position.getElement(i, el);\n\t\t\t\tposition.setArray(dst).setElement(i, el).setArray(src);\n\t\t\t}\n\n\t\t\tpositionArray = dst;\n\t\t} else {\n\t\t\tpositionArray = new Float32Array(positionArray);\n\t\t}\n\t}\n\n\tif (srcIndices.getComponentType() !== Accessor.ComponentType.UNSIGNED_INT) {\n\t\tindicesArray = new Uint32Array(indicesArray);\n\t}\n\n\t// (2) Run simplification.\n\n\tconst targetCount = Math.floor((options.ratio * srcVertexCount) / 3) * 3;\n\tconst [dstIndicesArray, error] = simplifier.simplify(\n\t\tindicesArray as Uint32Array,\n\t\tpositionArray as Float32Array,\n\t\t3,\n\t\ttargetCount,\n\t\toptions.error,\n\t\toptions.lockBorder ? ['LockBorder'] : []\n\t);\n\n\tconst [remap, unique] = simplifier.compactMesh(dstIndicesArray);\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(position.getCount(), unique)} vertices, error: ${error.toFixed(4)}.`);\n\n\t// (3) Write vertex attributes.\n\n\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\tconst dstAttribute = srcAttribute.clone();\n\t\tremapAttribute(dstAttribute, remap, unique);\n\t\tdeepSwapAttribute(prim, srcAttribute, dstAttribute);\n\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t}\n\n\t// (4) Write indices.\n\n\tconst dstIndices = srcIndices.clone();\n\tdstIndices.setArray(srcVertexCount <= 65534 ? new Uint16Array(dstIndicesArray) : dstIndicesArray);\n\tprim.setIndices(dstIndices);\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\treturn prim;\n}\n","import { Document, MathUtils, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'sparse';\n\n/** Options for the {@link sparse} function. */\nexport interface SparseOptions {\n\t/**\n\t * Threshold ratio used to determine when an accessor should be sparse.\n\t * Default: 1 / 3.\n\t */\n\tratio: number;\n}\n\nconst SPARSE_DEFAULTS: Required<SparseOptions> = {\n\tratio: 1 / 3,\n};\n\n/**\n * Scans all {@link Accessor Accessors} in the Document, detecting whether each Accessor\n * would benefit from sparse data storage. Currently, sparse data storage is used only\n * when many values (≥ ratio) are zeroes. Particularly for assets using morph target\n * (\"shape key\") animation, sparse data storage may significantly reduce file sizes.\n *\n * Example:\n *\n * ```ts\n * import { sparse } from '@gltf-transform/functions';\n *\n * accessor.getArray(); // → [ 0, 0, 0, 0, 0, 25.0, 0, 0, ... ]\n * accessor.getSparse(); // → false\n *\n * await document.transform(sparse({ratio: 1 / 10}));\n *\n * accessor.getSparse(); // → true\n * ```\n *\n * @experimental\n */\nexport function sparse(_options: SparseOptions = SPARSE_DEFAULTS): Transform {\n\tconst options = { ...SPARSE_DEFAULTS, ..._options } as Required<SparseOptions>;\n\n\tconst ratio = options.ratio;\n\tif (ratio < 0 || ratio > 1) {\n\t\tthrow new Error(`${NAME}: Ratio must be between 0 and 1.`);\n\t}\n\n\treturn createTransform(NAME, (document: Document): void => {\n\t\tconst root = document.getRoot();\n\t\tconst logger = document.getLogger();\n\n\t\tlet modifiedCount = 0;\n\n\t\tfor (const accessor of root.listAccessors()) {\n\t\t\tconst count = accessor.getCount();\n\t\t\tconst base = Array(accessor.getElementSize()).fill(0);\n\t\t\tconst el = Array(accessor.getElementSize()).fill(0);\n\n\t\t\tlet nonZeroCount = 0;\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\taccessor.getElement(i, el);\n\t\t\t\tif (!MathUtils.eq(el, base, 0)) nonZeroCount++;\n\t\t\t\tif (nonZeroCount / count >= ratio) break;\n\t\t\t}\n\n\t\t\tconst sparse = nonZeroCount / count < ratio;\n\t\t\tif (sparse !== accessor.getSparse()) {\n\t\t\t\taccessor.setSparse(sparse);\n\t\t\t\tmodifiedCount++;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Updated ${modifiedCount} accessors.`);\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport type { Document, Transform, vec2 } from '@gltf-transform/core';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'textureResize';\n\n/** Options for the {@link textureResize} function. */\nexport interface TextureResizeOptions {\n\t/**\n\t * Maximum width/height to enforce, preserving aspect ratio. For example,\n\t * a 4096x8192 texture, resized with limit [2048, 2048] will be reduced\n\t * to 1024x2048.\n\t */\n\tsize: vec2;\n\t/** Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother. */\n\tfilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to resize, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/** Pattern to match slots usage for resizing. */\n\tslots?: RegExp | null;\n}\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport const TEXTURE_RESIZE_DEFAULTS: TextureResizeOptions = {\n\tsize: [2048, 2048],\n\tfilter: TextureResizeFilter.LANCZOS3,\n\tpattern: null,\n\tslots: null,\n};\n\n/**\n * Resize PNG or JPEG {@link Texture Textures}, with {@link https://en.wikipedia.org/wiki/Lanczos_algorithm Lanczos filtering}.\n *\n * Implementation provided by {@link https://github.com/donmccurdy/ndarray-lanczos ndarray-lanczos}\n * package, which works in Web and Node.js environments. For a faster and more robust implementation\n * based on Sharp (available only in Node.js), use {@link textureCompress} with the 'resize' option.\n */\nexport function textureResize(_options: TextureResizeOptions = TEXTURE_RESIZE_DEFAULTS): Transform {\n\tconst options = { ...TEXTURE_RESIZE_DEFAULTS, ..._options } as Required<TextureResizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tconst name = texture.getName();\n\t\t\tconst uri = texture.getURI();\n\t\t\tconst match = !options.pattern || options.pattern.test(name) || options.pattern.test(uri);\n\t\t\tif (!match) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (texture.getMimeType() !== 'image/png' && texture.getMimeType() !== 'image/jpeg') {\n\t\t\t\tlogger.warn(`${NAME}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst slots = listTextureSlots(texture);\n\t\t\tif (options.slots && !slots.some((slot) => options.slots?.test(slot))) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [maxWidth, maxHeight] = options.size;\n\t\t\tconst [srcWidth, srcHeight] = texture.getSize()!;\n\n\t\t\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, not within size range.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet dstWidth = srcWidth;\n\t\t\tlet dstHeight = srcHeight;\n\n\t\t\tif (dstWidth > maxWidth) {\n\t\t\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\t\t\tdstWidth = maxWidth;\n\t\t\t}\n\n\t\t\tif (dstHeight > maxHeight) {\n\t\t\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\t\t\tdstHeight = maxHeight;\n\t\t\t}\n\n\t\t\tconst srcImage = texture.getImage()!;\n\t\t\tconst srcPixels = (await getPixels(srcImage, texture.getMimeType())) as ndarray.NdArray<Uint8ClampedArray>;\n\t\t\tconst dstPixels = ndarray(new Uint8Array(dstWidth * dstHeight * 4), [dstWidth, dstHeight, 4]);\n\n\t\t\tlogger.debug(`${NAME}: Resizing \"${uri || name}\", ${srcPixels.shape} → ${dstPixels.shape}...`);\n\t\t\tlogger.debug(`${NAME}: Slots → [${slots.join(', ')}]`);\n\n\t\t\ttry {\n\t\t\t\toptions.filter === TextureResizeFilter.LANCZOS3\n\t\t\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tlogger.warn(`${NAME}: Failed to resize \"${uri || name}\": \"${e.message}\".`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttexture.setImage(await savePixels(dstPixels, texture.getMimeType()));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { BufferUtils, Document, ImageUtils, Texture, TextureChannel, Transform, vec2 } from '@gltf-transform/core';\nimport { EXTTextureAVIF, EXTTextureWebP } from '@gltf-transform/extensions';\nimport { getTextureChannelMask } from './list-texture-channels.js';\nimport { listTextureSlots } from './list-texture-slots.js';\nimport type sharp from 'sharp';\nimport { createTransform, formatBytes } from './utils.js';\nimport { TextureResizeFilter } from './texture-resize.js';\n\nconst NAME = 'textureCompress';\n\ntype Format = (typeof FORMATS)[number];\nconst FORMATS = ['jpeg', 'png', 'webp', 'avif'] as const;\nconst SUPPORTED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp', 'image/avif'];\n\nexport interface TextureCompressOptions {\n\t/** Instance of the Sharp encoder, which must be installed from the\n\t * 'sharp' package and provided by the caller.\n\t */\n\tencoder: unknown;\n\t/**\n\t * Target image format. If specified, included textures in other formats\n\t * will be converted. Default: original format.\n\t */\n\ttargetFormat?: Format;\n\t/**\n\t * Resizes textures to given maximum width/height, preserving aspect ratio.\n\t * For example, a 4096x8192 texture, resized with limit [2048, 2048] will\n\t * be reduced to 1024x2048.\n\t */\n\tresize?: vec2;\n\t/** Interpolation used if resizing. Default: TextureResizeFilter.LANCZOS3. */\n\tresizeFilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to compress, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/** Pattern matching the format(s) to be compressed or converted. */\n\tformats?: RegExp | null;\n\t/** Pattern matching the material texture slot(s) to be compressed or converted. */\n\tslots?: RegExp | null;\n\n\t/** Quality, 1-100. Default: auto. */\n\tquality?: number | null;\n\t/** Level of CPU effort to reduce file size, 0-100. PNG, WebP, and AVIF only. Default: auto. */\n\teffort?: number | null;\n\t/** Use lossless compression mode. WebP and AVIF only. Default: false. */\n\tlossless?: boolean;\n\t/** Use near lossless compression mode. WebP only. Default: false. */\n\tnearLossless?: boolean;\n}\n\nexport type CompressTextureOptions = Omit<TextureCompressOptions, 'pattern' | 'formats' | 'slots'>;\n\nexport const TEXTURE_COMPRESS_DEFAULTS: Required<Omit<TextureCompressOptions, 'resize' | 'targetFormat' | 'encoder'>> =\n\t{\n\t\tresizeFilter: TextureResizeFilter.LANCZOS3,\n\t\tpattern: null,\n\t\tformats: null,\n\t\tslots: null,\n\t\tquality: null,\n\t\teffort: null,\n\t\tlossless: false,\n\t\tnearLossless: false,\n\t};\n\n/**\n * Optimizes images, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * Requires `sharp`, and is available only in Node.js environments.\n *\n * Example:\n *\n * ```javascript\n * import { textureCompress } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * // (A) Optimize without conversion.\n * await document.transform(\n * \ttextureCompress({encoder: sharp})\n * );\n *\n * // (B) Optimize and convert images to WebP.\n * await document.transform(\n * \ttextureCompress({\n * \t\tencoder: sharp,\n * \t\ttargetFormat: 'webp',\n * \t\tslots: /^(?!normalTexture).*$/ // exclude normal maps\n * \t})\n * );\n * ```\n */\nexport const textureCompress = function (_options: TextureCompressOptions): Transform {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<TextureCompressOptions>;\n\tconst encoder = options.encoder as typeof sharp | null;\n\tconst targetFormat = options.targetFormat as Format | undefined;\n\tconst patternRe = options.pattern;\n\tconst formatsRe = options.formats;\n\tconst slotsRe = options.slots;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${targetFormat}: encoder dependency required — install \"sharp\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst textures = document.getRoot().listTextures();\n\n\t\tawait Promise.all(\n\t\t\ttextures.map(async (texture, textureIndex) => {\n\t\t\t\tconst slots = listTextureSlots(texture);\n\t\t\t\tconst channels = getTextureChannelMask(texture);\n\t\t\t\tconst textureLabel =\n\t\t\t\t\ttexture.getURI() ||\n\t\t\t\t\ttexture.getName() ||\n\t\t\t\t\t`${textureIndex + 1}/${document.getRoot().listTextures().length}`;\n\t\t\t\tconst prefix = `${NAME}(${textureLabel})`;\n\n\t\t\t\t// FILTER: Exclude textures that don't match (a) 'slots' or (b) expected formats.\n\n\t\t\t\tif (!SUPPORTED_MIME_TYPES.includes(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (patternRe && !patternRe.test(texture.getName()) && !patternRe.test(texture.getURI())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (formatsRe && !formatsRe.test(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, \"${texture.getMimeType()}\" excluded by \"formats\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (slotsRe && slots.length && !slots.some((slot) => slotsRe.test(slot))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (options.targetFormat === 'jpeg' && channels & TextureChannel.A) {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, [${slots.join(', ')}] requires alpha channel.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst srcFormat = getFormat(texture);\n\t\t\t\tconst dstFormat = targetFormat || srcFormat;\n\t\t\t\tlogger.debug(`${prefix}: Format = ${srcFormat} → ${dstFormat}`);\n\t\t\t\tlogger.debug(`${prefix}: Slots = [${slots.join(', ')}]`);\n\n\t\t\t\tconst srcImage = texture.getImage()!;\n\t\t\t\tconst srcByteLength = srcImage.byteLength;\n\n\t\t\t\tawait compressTexture(texture, options);\n\n\t\t\t\tconst dstImage = texture.getImage()!;\n\t\t\t\tconst dstByteLength = dstImage.byteLength;\n\n\t\t\t\tconst flag = srcImage === dstImage ? ' (SKIPPED' : '';\n\n\t\t\t\tlogger.debug(`${prefix}: Size = ${formatBytes(srcByteLength)} → ${formatBytes(dstByteLength)}${flag}`);\n\t\t\t})\n\t\t);\n\n\t\t// Attach EXT_texture_webp if needed.\n\t\tconst webpExtension = document.createExtension(EXTTextureWebP);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/webp')) {\n\t\t\twebpExtension.setRequired(true);\n\t\t} else {\n\t\t\twebpExtension.dispose();\n\t\t}\n\n\t\t// Attach EXT_texture_avif if needed.\n\t\tconst avifExtension = document.createExtension(EXTTextureAVIF);\n\t\tif (textures.some((texture) => texture.getMimeType() === 'image/avif')) {\n\t\t\tavifExtension.setRequired(true);\n\t\t} else {\n\t\t\tavifExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\n/**\n * Optimizes a single {@link Texture}, optionally resizing or converting to JPEG, PNG, WebP, or AVIF formats.\n *\n * Requires `sharp`, and is available only in Node.js environments.\n *\n * Example:\n *\n * ```javascript\n * import { compressTexture } from '@gltf-transform/functions';\n * import sharp from 'sharp';\n *\n * const texture = document.getRoot().listTextures()\n * \t.find((texture) => texture.getName() === 'MyTexture');\n *\n * await compressTexture(texture, {\n * \tencoder: sharp,\n * \ttargetFormat: 'webp',\n * \tresize: [1024, 1024]\n * });\n * ```\n */\nexport async function compressTexture(texture: Texture, _options: CompressTextureOptions) {\n\tconst options = { ...TEXTURE_COMPRESS_DEFAULTS, ..._options } as Required<CompressTextureOptions>;\n\tconst encoder = options.encoder as typeof sharp | null;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${options.targetFormat}: encoder dependency required — install \"sharp\".`);\n\t}\n\n\tconst srcFormat = getFormat(texture);\n\tconst dstFormat = options.targetFormat || srcFormat;\n\tconst srcMimeType = texture.getMimeType();\n\tconst dstMimeType = `image/${dstFormat}`;\n\n\tlet encoderOptions: sharp.JpegOptions | sharp.PngOptions | sharp.WebpOptions | sharp.AvifOptions = {};\n\n\tswitch (dstFormat) {\n\t\tcase 'jpeg':\n\t\t\tencoderOptions = { quality: options.quality } as sharp.JpegOptions;\n\t\t\tbreak;\n\t\tcase 'png':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 10),\n\t\t\t} as sharp.PngOptions;\n\t\t\tbreak;\n\t\tcase 'webp':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 6),\n\t\t\t\tlossless: options.lossless,\n\t\t\t\tnearLossless: options.nearLossless,\n\t\t\t} as sharp.WebpOptions;\n\t\t\tbreak;\n\t\tcase 'avif':\n\t\t\tencoderOptions = {\n\t\t\t\tquality: options.quality,\n\t\t\t\teffort: remap(options.effort, 100, 9),\n\t\t\t\tlossless: options.lossless,\n\t\t\t} as sharp.AvifOptions;\n\t\t\tbreak;\n\t}\n\n\tconst srcImage = texture.getImage()!;\n\tconst instance = encoder(srcImage).toFormat(dstFormat, encoderOptions);\n\n\t// Resize.\n\tif (options.resize) {\n\t\tinstance.resize(options.resize[0], options.resize[1], {\n\t\t\tfit: 'inside',\n\t\t\tkernel: options.resizeFilter,\n\t\t\twithoutEnlargement: true,\n\t\t});\n\t}\n\n\tconst dstImage = BufferUtils.toView(await instance.toBuffer());\n\n\tconst srcByteLength = srcImage.byteLength;\n\tconst dstByteLength = dstImage.byteLength;\n\n\tif (srcMimeType === dstMimeType && dstByteLength >= srcByteLength) {\n\t\t// Skip if src/dst formats match and dst is larger than the original.\n\t\treturn;\n\t} else if (srcMimeType === dstMimeType) {\n\t\t// Overwrite if src/dst formats match and dst is smaller than the original.\n\t\ttexture.setImage(dstImage);\n\t} else {\n\t\t// Overwrite, then update path and MIME type if src/dst formats differ.\n\t\tconst srcExtension = ImageUtils.mimeTypeToExtension(srcMimeType);\n\t\tconst dstExtension = ImageUtils.mimeTypeToExtension(dstMimeType);\n\t\tconst dstURI = texture.getURI().replace(new RegExp(`\\\\.${srcExtension}$`), `.${dstExtension}`);\n\t\ttexture.setImage(dstImage).setMimeType(dstMimeType).setURI(dstURI);\n\t}\n}\n\nfunction getFormat(texture: Texture): Format {\n\tconst mimeType = texture.getMimeType();\n\tconst format = mimeType.split('/').pop() as Format | undefined;\n\tif (!format || !FORMATS.includes(format)) {\n\t\tthrow new Error(`Unknown MIME type \"${mimeType}\".`);\n\t}\n\treturn format;\n}\n\nfunction remap(value: number | null | undefined, srcMax: number, dstMax: number): number | null {\n\tif (value == null) return null;\n\treturn Math.round((value / srcMax) * dstMax);\n}\n","import { Accessor, Document, ILogger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array;\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean;\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n */\nexport function tangents(_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = { ...TANGENTS_DEFAULTS, ..._options } as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor().setBuffer(tangentBuffer).setArray(tangentArray).setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(prim: Primitive, logger: ILogger, meshName: string, i: number, overwrite: boolean): boolean {\n\tif (\n\t\tprim.getMode() !== Primitive.Mode.TRIANGLES ||\n\t\t!prim.getAttribute('POSITION') ||\n\t\t!prim.getAttribute('NORMAL') ||\n\t\t!prim.getAttribute('TEXCOORD_0')\n\t) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` +\n\t\t\t\t' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` + ' be unwelded.');\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { KHRMaterialsUnlit } from '@gltf-transform/extensions';\n\nexport const unlit = (): Transform => {\n\treturn (doc: Document): void => {\n\t\tconst unlitExtension = doc.createExtension(KHRMaterialsUnlit) as KHRMaterialsUnlit;\n\t\tconst unlit = unlitExtension.createUnlit();\n\t\tdoc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tmaterial.setExtension('KHR_materials_unlit', unlit);\n\t\t\t});\n\t};\n};\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'unpartition';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnpartitionOptions {}\nconst UNPARTITION_DEFAULTS: Required<UnpartitionOptions> = {};\n\n/**\n * Removes partitions from the binary payload of a glTF file, so that the asset\n * contains at most one (1) `.bin` {@link Buffer}. This process reverses the\n * changes from a {@link partition} transform.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n *\n * await document.transform(unpartition());\n *\n * document.getRoot().listBuffers(); // → [Buffer]\n * ```\n */\nconst unpartition = (_options: UnpartitionOptions = UNPARTITION_DEFAULTS): Transform => {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNPARTITION_DEFAULTS, ..._options } as Required<UnpartitionOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tconst buffer = document.getRoot().listBuffers()[0];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listAccessors()\n\t\t\t.forEach((a) => a.setBuffer(buffer));\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.forEach((b, index) => (index > 0 ? b.dispose() : null));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nexport { unpartition };\n","import type { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils.js';\n\nconst NAME = 'vertexColorSpace';\n\n/** Options for the {@link vertexColorSpace} function. */\nexport interface ColorSpaceOptions {\n\t/** Input color space of vertex colors, to be converted to \"srgb-linear\". Required. */\n\tinputColorSpace: 'srgb' | 'srgb-linear' | 'sRGB';\n\t/** @deprecated Renamed to 'colorSpace'. */\n\tinputEncoding?: 'srgb' | 'srgb-linear' | 'sRGB';\n}\n\n/** @deprecated Renamed to {@link vertexColorSpace}. */\nexport const colorspace = vertexColorSpace;\n\n/**\n * Vertex color color space correction. The glTF format requires vertex colors to be stored\n * in Linear Rec. 709 D65 color space, and this function provides a way to correct vertex\n * colors that are (incorrectly) stored in sRGB.\n *\n * Example:\n *\n * ```typescript\n * import { vertexColorSpace } from '@gltf-transform/functions';\n *\n * await document.transform(\n *   vertexColorspace({ inputColorSpace: 'srgb' })\n * );\n * ```\n */\nexport function vertexColorSpace(options: ColorSpaceOptions): Transform {\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst inputColorSpace = (options.inputColorSpace || options.inputEncoding || '').toLowerCase();\n\n\t\tif (inputColorSpace === 'srgb-linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (inputColorSpace !== 'srgb') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input color space \"${inputColorSpace}\" – should be \"srgb\" or ` +\n\t\t\t\t\t'\"srgb-linear\". Skipping conversion.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear(c: number): number {\n\t\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n"],"names":["createTransform","name","fn","Object","defineProperty","value","isTransformPending","context","initial","pending","stack","lastIndexOf","rewriteTexture","source","target","srcImage","getImage","pixels","getPixels","getMimeType","i","shape","j","dstImage","savePixels","setImage","setMimeType","getGLPrimitiveCount","prim","indices","getIndices","position","getAttribute","getMode","Primitive","Mode","POINTS","getCount","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","SetMap","_map","Map","size","has","k","add","v","entry","this","get","Set","set","keys","formatBytes","bytes","decimals","dm","Math","floor","log","parseFloat","pow","toFixed","formatLong","x","toString","replace","formatDeltaOp","a","b","abs","formatDelta","deepListAttributes","accessors","attribute","listAttributes","push","listTargets","Array","from","deepSwapAttribute","src","dst","swap","remapAttribute","remap","dstCount","elementSize","getElementSize","srcCount","srcArray","getArray","dstArray","slice","setArray","createIndices","count","maxIndex","array","Uint16Array","Uint32Array","length","createPrimGroupKey","document","Document","fromGraph","getGraph","material","getMaterial","getRoot","listMaterials","indexOf","listSemantics","sort","map","semantic","getComponentType","join","CENTER_DEFAULTS","pivot","center","_options","options","doc","logger","getLogger","root","isAnimated","listAnimations","listSkins","listScenes","forEach","scene","index","debug","bbox","getBounds","max","min","offset","offsetNode","createNode","setTranslation","listChildren","child","addChild","t","getTranslation","listNodeScenes","node","visited","parent","getParentNode","listParents","filter","Scene","clearNodeParent","scenes","setMatrix","getWorldMatrix","removeChild","ARRAY_TYPE","Float32Array","invert","out","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","multiply","b0","b1","b2","b3","create","glMatrix.ARRAY_TYPE","fromValues","y","z","scale","normalize","len","sqrt","transformMat4","m","w","transformMat3","transformPrimitive","matrix","skipIndices","applyMatrix","normal","applyNormalMatrix","tangent","applyTangentMatrix","el","il","getElement","vector","createVec3","setNormalized","normalMatrix","createMat3","b21","transpose","normalizeVec3","setElement","v3","v4","createVec4","transformMesh","mesh","overwrite","srcPrim","listPrimitives","some","p","propertyType","PropertyType","MESH","dstPrim","clone","srcTarget","dstTarget","parents","flatMap","attributes","srcAttribute","PrimitiveTarget","dstAttribute","hypot","arguments","IDENTITY","clearNodeTransform","getMesh","localMatrix","getMatrix","MathUtils","eq","multiplyMat4","DEDUP_DEFAULTS","propertyTypes","ACCESSOR","TEXTURE","MATERIAL","SKIN","dedup","includes","indicesAccessors","attributeAccessors","inputAccessors","outputAccessors","meshes","listMeshes","primitive","accessor","animation","sampler","listSamplers","input","getInput","output","getOutput","detectDuplicates","duplicateAccessors","aData","BufferUtils","toView","getType","getNormalized","equals","duplicateIndices","duplicateAttributes","duplicateInputs","duplicateOutputs","dispose","dedupAccessors","textures","listTextures","duplicates","bData","aSize","getSize","bSize","entries","property","Root","dedupImages","materials","skip","dedupMaterials","refs","listAccessors","numMeshes","uniqueMeshes","srcKeyItems","createPrimitiveKey","meshKey","targetMesh","ROOT","dedupMeshes","skins","dedupSkins","primKeyItems","DEQUANTIZE_DEFAULTS","pattern","dequantize","dequantizePrimitive","createExtension","KHRMeshQuantization","dequantizeAttribute","test","getComponentSize","DRACO_DEFAULTS","method","encodeSpeed","decodeSpeed","quantizePosition","quantizeNormal","quantizeColor","quantizeTexcoord","quantizeGeneric","quantizationVolume","draco","KHRDracoMeshCompression","setRequired","setEncoderOptions","EncoderMethod","EDGEBREAKER","SEQUENTIAL","quantizationBits","POSITION","NORMAL","COLOR","TEX_COORD","GENERIC","PRUNE_DEFAULTS","NODE","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","keepLeaves","keepAttributes","prune","graph","disposed","markDisposed","nodeTreeShake","prop","isUsed","listParentEdges","e","ptype","getParent","SCENE","listNodes","treeShake","listCameras","indirectTreeShake","required","listRequiredSemantics","unused","listUnusedSemantics","pruneAttributes","anim","channel","listChannels","getTargetNode","samplers","listBuffers","str","info","AnimationChannel","listEdges","edge","setAttribute","startsWith","semantics","edges","listChildEdges","textureNames","getChild","Texture","getName","TextureInfo","getTexCoord","match","ExtensionProperty","FLATTEN_DEFAULTS","flatten","async","joints","skin","joint","listJoints","animated","hasJointParent","hasAnimatedParent","traverse","transform","getNodeScene","inspect","animations","properties","sceneBounds","rootName","bboxMin","toPrecision","bboxMax","instances","glPrimitives","verts","meshIndices","meshAccessors","attr","accessorToTypeLabel","targ","byteLength","modes","MeshPrimitiveModeLabels","mode","primitives","vertices","extensions","listExtensions","slots","ref","alphaMode","getAlphaMode","doubleSided","getDoubleSided","texture","resolution","ImageUtils","compression","dfd","readKTX","dataFormatDescriptor","colorModel","KHR_DF_MODEL_ETC1S","KHR_DF_MODEL_UASTC","uri","getURI","mimeType","gpuSize","getVRAMByteLength","minTime","Infinity","maxTime","getMin","getMax","keyframes","channels","duration","round","NumericTypeLabels","Uint8Array","Int32Array","Int16Array","Int8Array","Number","constructor","INSTANCE_DEFAULTS","instance","batchExtension","EXTMeshGPUInstancing","warn","numBatches","numInstances","meshInstances","modifiedNodes","nodes","getSkin","batch","createBatch","batchTranslation","batchRotation","batchScale","batchNode","setMesh","setExtension","needsTranslation","needsRotation","needsScale","r","s","getWorldTranslation","getWorldRotation","getWorldScale","pruneUnusedNodes","listProperties","unusedNodes","pop","getCamera","nodeParent","buffer","getBuffer","createAccessor","setType","setBuffer","createInstancedMesh","JOIN_PRIMITIVE_DEFAULTS","skipValidation","joinPrimitives","prims","templatePrim","remapList","indicesList","dstVertexCount","dstIndicesCount","_getOrCreateIndices","undefined","createPrimitive","setMode","setMaterial","tplAttribute","AttributeArray","ComponentTypeToTypedArray","dstIndices","setIndices","dstNextIndex","primIndex","indicesArray","primStartIndex","primNextIndex","setScalar","_matrix","JOIN_DEFAULTS","keepMeshes","keepNamed","_joinLevel","groups","children","nodeIndex","getExtension","key","isNamed","primMeshes","primNodes","dstNode","dstMesh","group","joinGroups","values","srcNodes","dstMatrix","primNode","removePrimitive","hasSharedAttributes","_deepClonePrimitive","addPrimitive","listTextureChannels","mask","getTextureChannelMask","TextureChannel","R","G","B","A","getAttributes","Material","AlphaMode","OPAQUE","listTextureInfo","results","textureEdge","listTextureSlots","REORDER_DEFAULTS","reorder","encoder","ready","plan","createLayoutPlan","srcIndices","indicesToAttributes","unique","reorderMesh","indicesToMode","attributesToPrimitives","sortPrimitiveWeights","limit","isFinite","vertexCount","setCount","srcWeights","dstWeights","srcJoints","dstJoints","getVertexArray","setVertexArray","weights","normList","typeList","isNormalizeSafe","templateAttribute","templateArray","componentType","normalized","normalizedComponentType","delta","decodeNormalizedInt","EPSILON","fill","weightsSum","sum","intValue","encodeNormalizedInt","normalizePrimitiveWeights","vertexIndex","prefix","SIGNED_INT","TRANSLATION","ROTATION","SCALE","WEIGHTS","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizeWeight","normalizeWeights","quantize","nodeTransform","getNodeTransform","bboxes","result","expandBounds","getPositionQuantizationVolume","transformMeshParents","transformMeshMaterials","quantizePrimitive","bits","ctor","getQuantizationSettings","fromTransform","quantizeAttribute","volume","transformMatrix","Node","animChannels","getTargetPath","isParentNode","setSkin","transformSkin","transformBatch","targetNode","setTargetNode","nodeMatrix","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","instanceTranslation","_batch$getAttribute","instanceRotation","_batch$getAttribute2","instanceScale","_batch$getAttribute3","tpl","T_IDENTITY","R_IDENTITY","S_IDENTITY","instanceMatrix","compose","decompose","getThicknessFactor","setThicknessFactor","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","lo","hi","di","sign","setSparse","getMinNormalized","getMaxNormalized","positions","relativePositions","flatBounds","relMin","relMax","tmpMin","tmpMax","xx","q","x2","xy","y2","xz","z2","yz","wx","wy","wz","sy","sz","yy","zz","sx","MESHOPT_DEFAULTS","level","meshopt","EXTMeshoptCompression","QUANTIZE","FILTER","METALROUGH_DEFAULTS","metalRough","listExtensionsUsed","ext","extensionName","iorExtension","KHRMaterialsIOR","specExtension","KHRMaterialsSpecular","specGlossExtension","KHRMaterialsPBRSpecularGlossiness","inputTextures","specGloss","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","setBaseColorFactor","getDiffuseFactor","setMetallicFactor","setRoughnessFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","tex","UNWELD_DEFAULTS","unweld","srcVertexCount","unweldAttribute","ArrayCtor","getScalar","NORMALS_DEFAULTS","normals","modified","c","faceNormal","computeNormal","PARTITION_DEFAULTS","partition","existingURIs","meshIndex","isArray","createBuffer","setURI","createBufferURI","primTarget","partitionMeshes","animIndex","partitionAnimations","basename","existing","getAngle","dotproduct","dot","acos","slerp","omega","cosom","sinom","scale0","scale1","ax","ay","az","aw","bx","by","bz","bw","sin","vec3.create","vec3.fromValues","mat3.create","RESAMPLE_DEFAULTS","tolerance","resample","accessorsVisited","srcAccessorCount","didSkipMorphTargets","samplerTargetPaths","getSampler","getInterpolation","optimize","path","interpolation","lastIndex","tmp","valueNext","valuePrev","writeIndex","timePrev","time","timeNext","keep","sample","angle","PI","vlerp","setInput","setOutput","lerp","v0","v1","SEQUENCE_DEFAULTS","fps","sequence","sequenceNodes","createAnimation","animBuffer","inputArray","outputArray","Accessor","Type","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","WELD_DEFAULTS","exhaustive","weld","weldPrimitive","numVertices","SCALAR","_indexPrimitive","srcPosition","uniqueIndices","baseTolerance","attributeTolerance","getAttributeTolerance","kv","posA","posB","grid","cellSize","getGridKey","weldMap","writeMap","cellKeys","getGridNeighborhoodKeys","cells","cellKey","neighbors","isBaseMatch","every","compareAttributes","isTargetMatch","dstIndicesArray","srcAttr","swapAttributes","tmpIndicesArray","cleanPrimitive","_weldPrimitive","dstAttrArray","dstAttr","done","_a","_b","_semantic","CELL_OFFSETS","_p","SIMPLIFY_DEFAULTS","ratio","error","lockBorder","simplify","simplifier","simplifyPrimitive","positionArray","ComponentType","FLOAT","UNSIGNED_INT","targetCount","compactMesh","SPARSE_DEFAULTS","sparse","modifiedCount","base","nonZeroCount","getSparse","NAME","TextureResizeFilter","TEXTURE_RESIZE_DEFAULTS","LANCZOS3","textureResize","slot","_options$slots","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","srcPixels","dstPixels","ndarray","lanczos3","lanczos2","message","FORMATS","SUPPORTED_MIME_TYPES","TEXTURE_COMPRESS_DEFAULTS","resizeFilter","formats","quality","effort","lossless","nearLossless","textureCompress","targetFormat","patternRe","formatsRe","slotsRe","Promise","all","textureIndex","textureLabel","srcFormat","getFormat","srcByteLength","compressTexture","dstByteLength","flag","webpExtension","EXTTextureWebP","avifExtension","EXTTextureAVIF","dstFormat","srcMimeType","dstMimeType","encoderOptions","toFormat","resize","fit","kernel","withoutEnlargement","toBuffer","srcExtension","mimeTypeToExtension","dstExtension","dstURI","RegExp","format","split","srcMax","dstMax","TANGENTS_DEFAULTS","tangents","generateTangents","attributeIDs","tangentCache","meshName","meshPrimitives","filterPrimitive","texcoordSemantic","getNormalTexcoord","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangentBuffer","tangentArray","normalTextureInfo","getNormalTextureInfo","unlit","KHRMaterialsUnlit","createUnlit","UNPARTITION_DEFAULTS","unpartition","colorspace","vertexColorSpace","inputColorSpace","inputEncoding","toLowerCase","converted","sRGBToLinear","updatePrimitive","color"],"mappings":"0lCAmBgBA,EAAgBC,EAAcC,GAE7C,OADAC,OAAOC,eAAeF,EAAI,OAAQ,CAAEG,MAAOJ,IACpCC,WAIQI,EAAmBC,EAAuCC,EAAiBC,GAC1F,QAAKF,GACgBA,EAAQG,MAAMC,YAAYH,GAC1BD,EAAQG,MAAMC,YAAYF,kBAQ1BG,EACrBC,EACAC,EACAZ,GAEA,IAAKW,EAAQ,YAEb,MAAME,EAAWF,EAAOG,WACxB,IAAKD,EAAU,YAEf,MAAME,QAAeC,EAAUH,EAAUF,EAAOM,eAEhD,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOI,MAAM,KAAMD,EACtC,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAOI,MAAM,KAAMC,EACtCpB,EAAGe,EAAQG,EAAGE,GAIhB,MAAMC,QAAiBC,EAAWP,EAAQ,aAC1C,OAAOH,EAAOW,SAASF,GAAUG,YAAY,sBAI9BC,EAAoBC,GACnC,MAAMC,EAAUD,EAAKE,aACfC,EAAWH,EAAKI,aAAa,YAGnC,OAAQJ,EAAKK,WACZ,KAAKC,EAAUC,KAAKC,OACnB,OAAOL,EAASM,WACjB,KAAKH,EAAUC,KAAKG,MACnB,OAAOT,EAAUA,EAAQQ,WAAa,EAAIN,EAASM,WAAa,EACjE,KAAKH,EAAUC,KAAKI,UACnB,OAAOR,EAASM,WACjB,KAAKH,EAAUC,KAAKK,WACnB,OAAOT,EAASM,WAAa,EAC9B,KAAKH,EAAUC,KAAKM,UACnB,OAAOZ,EAAUA,EAAQQ,WAAa,EAAIN,EAASM,WAAa,EACjE,KAAKH,EAAUC,KAAKO,eACpB,KAAKR,EAAUC,KAAKQ,aACnB,OAAOZ,EAASM,WAAa,EAC9B,QACC,UAAUO,MAAM,oBAAsBhB,EAAKK,kBAKjCY,qBACJC,KAAO,IAAIC,IACJC,WACd,YAAYF,KAAKE,KAEXC,IAAIC,GACV,YAAYJ,KAAKG,IAAIC,GAEfC,IAAID,EAAME,GAChB,IAAIC,EAAQC,KAAKR,KAAKS,IAAIL,GAM1B,OALKG,IACJA,EAAQ,IAAIG,IACZF,KAAKR,KAAKW,IAAIP,EAAGG,IAElBA,EAAMF,IAAIC,QAGJG,IAAIL,GACV,YAAYJ,KAAKS,IAAIL,IAAM,IAAIM,IAEzBE,OACN,YAAYZ,KAAKY,iBAKHC,EAAYC,EAAeC,EAAW,GACrD,GAAc,IAAVD,EAAa,MAAO,UAExB,MACME,EAAKD,EAAW,EAAI,EAAIA,EAGxBzC,EAAI2C,KAAKC,MAAMD,KAAKE,IAAIL,GAASG,KAAKE,IAJlC,MAMV,OAAOC,YAAYN,EAAQG,KAAKI,IANtB,IAM6B/C,IAAIgD,QAAQN,IAAO,IAJ5C,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAII1C,YAIvDiD,EAAWC,GAC1B,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,cAWtCC,EAAcC,EAAWC,GACxC,SAAUN,EAAWK,QAAQL,EAAWM,gBARbD,EAAWC,EAAWd,EAAW,GAG5D,OAFea,EAAIC,EAAI,IAAM,MAEXZ,KAAKa,IAAIF,EAAIC,GAAKD,EAAK,KAAKN,QAAQP,GADvC,IAMgCgB,CAAYH,EAAGC,eAQ/CG,EAAmBlD,GAClC,MAAMmD,EAAwB,GAE9B,IAAK,MAAMC,KAAapD,EAAKqD,iBAC5BF,EAAUG,KAAKF,GAEhB,IAAK,MAAMlE,KAAUc,EAAKuD,cACzB,IAAK,MAAMH,KAAalE,EAAOmE,iBAC9BF,EAAUG,KAAKF,GAIjB,OAAOI,MAAMC,KAAK,IAAI7B,IAAIuB,aAIXO,EAAkB1D,EAAiB2D,EAAeC,GACjE5D,EAAK6D,KAAKF,EAAKC,GACf,IAAK,MAAM1E,KAAUc,EAAKuD,cACzBrE,EAAO2E,KAAKF,EAAKC,YAKHE,EAAeV,EAAqBW,EAAoBC,GACvE,MAAMC,EAAcb,EAAUc,iBACxBC,EAAWf,EAAU3C,WACrB2D,EAAWhB,EAAUiB,WACrBC,EAAWF,EAASG,MAAM,EAAGP,EAAWC,GAE9C,IAAK,IAAIzE,EAAI,EAAGA,EAAI2E,EAAU3E,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAIuE,EAAavE,IAChC4E,EAASP,EAAMvE,GAAKyE,EAAcvE,GAAK0E,EAAS5E,EAAIyE,EAAcvE,GAIpE0D,EAAUoB,SAASF,YAIJG,EAAcC,EAAeC,EAAWD,GACvD,MAAME,EAAQD,GAAY,MAAQ,IAAIE,YAAYH,GAAS,IAAII,YAAYJ,GAC3E,IAAK,IAAIlF,EAAI,EAAGA,EAAIoF,EAAMG,OAAQvF,IAAKoF,EAAMpF,GAAKA,EAClD,OAAOoF,WAcQI,EAAmBhF,GAClC,MAAMiF,EAAWC,EAASC,UAAUnF,EAAKoF,YACnCC,EAAWrF,EAAKsF,cAgCtB,SA/BsBL,EAASM,UAAUC,gBAAgBC,QAAQJ,MACpDrF,EAAKK,eACAL,EAAKE,gBAEJF,EACjB0F,gBACAC,OACAC,IAAKC,IACL,MAAMzC,EAAYpD,EAAKI,aAAayF,GAGpC,SAAUA,KAFUzC,EAAUc,oBACRd,EAAU0C,uBAGhCC,KAAK,QAES/F,EACduD,cACAqC,IAAK1G,GACEA,EACLwG,gBACAC,OACAC,IAAKC,IACL,MAAMzC,EAAYpD,EAAKI,aAAayF,GAGpC,SAAUA,KAFUzC,EAAUc,oBACRd,EAAU0C,uBAGhCC,KAAK,MAEPA,KAAK,OCrOR,MAQMC,EAA2C,CAAEC,MAAO,mBAY1CC,GAAOC,EAA0BH,GAChD,MAAMI,OAAeJ,EAAoBG,GAEzC,OAAO/H,EAvBK,SAuBkBiI,IAC7B,MAAMC,EAASD,EAAIE,YACbC,EAAOH,EAAId,UACXkB,EAAaD,EAAKE,iBAAiB3B,OAAS,GAAKyB,EAAKG,YAAY5B,OAAS,EAEjFsB,EAAId,UACFqB,aACAC,QAAQ,CAACC,EAAOC,KAGhB,IAAId,EACJ,GAHAK,EAAOU,uBAAwBD,EAAQ,OAAOP,EAAKI,aAAa7B,WAGnC,iBAAlBqB,EAAQH,MAAoB,CACtC,MAAMgB,EAAOC,EAAUJ,GACvBb,EAAQ,EACNgB,EAAKE,IAAI,GAAKF,EAAKG,IAAI,IAAM,EAAIH,EAAKG,IAAI,IAC1CH,EAAKE,IAAI,GAAKF,EAAKG,IAAI,IAAM,EAAIH,EAAKG,IAAI,IAC1CH,EAAKE,IAAI,GAAKF,EAAKG,IAAI,IAAM,EAAIH,EAAKG,IAAI,IAEtB,UAAlBhB,EAAQH,QAAmBA,EAAM,GAAKgB,EAAKE,IAAI,IAC7B,UAAlBf,EAAQH,QAAmBA,EAAM,GAAKgB,EAAKG,IAAI,SAEnDnB,EAAQG,EAAQH,MAGjBK,EAAOU,wBAAyBf,EAAMF,KAAK,WAE3C,MAAMsB,EAAe,EAAE,EAAIpB,EAAM,IAAK,EAAIA,EAAM,IAAK,EAAIA,EAAM,IAE/D,GAAIQ,EAAY,CACfH,EAAOU,0EACP,MAAMM,EAAajB,EAAIkB,WAAW,SAASC,eAAeH,GAC1DP,EAAMW,eAAeZ,QAASa,GAAUJ,EAAWK,SAASD,IAC5DZ,EAAMa,SAASL,QAEfhB,EAAOU,8DACPF,EAAMW,eAAeZ,QAASa,IAC7B,MAAME,EAAIF,EAAMG,iBAChBH,EAAMF,eAAe,CAACI,EAAE,GAAKP,EAAO,GAAIO,EAAE,GAAKP,EAAO,GAAIO,EAAE,GAAKP,EAAO,SAK5Ef,EAAOU,sCCnDOc,GAAeC,GAC9B,MAAMC,EAAU,IAAIpG,IAEpB,IACIqG,EADAP,EAAQK,EAGZ,KAAQE,EAASP,EAAMQ,iBAAiC,CACvD,GAAIF,EAAQ3G,IAAI4G,GACf,UAAUjH,MAAM,uCAEjBgH,EAAQzG,IAAI0G,GACZP,EAAQO,EAGT,OAAOP,EAAMS,cAAcC,OAAQH,GAAWA,aAAkBI,YCRjDC,GAAgBP,GAC/B,MAAMQ,EAAST,GAAeC,GACxBE,EAASF,EAAKG,gBAEpB,IAAKD,EAAQ,OAAOF,EAKpBA,EAAKS,UAAUT,EAAKU,kBAGpBR,EAAOS,YAAYX,GACnB,IAAK,MAAMjB,KAASyB,EAAQzB,EAAMa,SAASI,GAE3C,OAAOA,EClCD,IACIY,GAAqC,oBAAjBC,aAA+BA,aAAepF,MC4PtE,SAASqF,GAAOC,EAAKhG,GAC1B,IAAIiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,GACRsG,EAAMtG,EAAE,GACRuG,EAAMvG,EAAE,GACRwG,EAAMxG,EAAE,GACRyG,EAAMzG,EAAE,GACR0G,EAAM1G,EAAE,GACR2G,EAAM3G,EAAE,IACR4G,EAAM5G,EAAE,IACR6G,EAAM7G,EAAE,IACR8G,EAAM9G,EAAE,IACR+G,EAAM/G,EAAE,IACRgH,EAAMhH,EAAE,IACRiH,EAAMhB,EAAMK,EAAMJ,EAAMG,EACxBa,EAAMjB,EAAMM,EAAMJ,EAAME,EACxBc,EAAMlB,EAAMO,EAAMJ,EAAMC,EACxBe,EAAMlB,EAAMK,EAAMJ,EAAMG,EACxBe,EAAMnB,EAAMM,EAAMJ,EAAME,EACxBgB,EAAMnB,EAAMK,EAAMJ,EAAMG,EACxBgB,EAAMd,EAAMK,EAAMJ,EAAMG,EACxBW,EAAMf,EAAMM,EAAMJ,EAAME,EACxBY,EAAMhB,EAAMO,EAAMJ,EAAMC,EACxBa,EAAMhB,EAAMK,EAAMJ,EAAMG,EACxBa,EAAMjB,EAAMM,EAAMJ,EAAME,EACxBc,EAAMjB,EAAMK,EAAMJ,EAAMG,EAExBc,EAAMZ,EAAMW,EAAMV,EAAMS,EAAMR,EAAMO,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE5E,OAAKM,GAKL7B,EAAI,IAAMM,EAAMsB,EAAMrB,EAAMoB,EAAMnB,EAAMkB,IADxCG,EAAM,EAAMA,GAEZ7B,EAAI,IAAMG,EAAMwB,EAAMzB,EAAM0B,EAAMxB,EAAMsB,GAAOG,EAC/C7B,EAAI,IAAMc,EAAMQ,EAAMP,EAAMM,EAAML,EAAMI,GAAOS,EAC/C7B,EAAI,IAAMW,EAAMU,EAAMX,EAAMY,EAAMV,EAAMQ,GAAOS,EAC/C7B,EAAI,IAAMO,EAAMkB,EAAMpB,EAAMuB,EAAMpB,EAAMgB,GAAOK,EAC/C7B,EAAI,IAAMC,EAAM2B,EAAMzB,EAAMsB,EAAMrB,EAAMoB,GAAOK,EAC/C7B,EAAI,IAAMe,EAAMI,EAAMN,EAAMS,EAAMN,EAAME,GAAOW,EAC/C7B,EAAI,IAAMS,EAAMa,EAAMX,EAAMQ,EAAMP,EAAMM,GAAOW,EAC/C7B,EAAI,IAAMK,EAAMsB,EAAMrB,EAAMmB,EAAMjB,EAAMe,GAAOM,EAC/C7B,EAAI,IAAME,EAAMuB,EAAMxB,EAAM0B,EAAMvB,EAAMmB,GAAOM,EAC/C7B,EAAI,KAAOa,EAAMQ,EAAMP,EAAMK,EAAMH,EAAMC,GAAOY,EAChD7B,EAAI,KAAOU,EAAMS,EAAMV,EAAMY,EAAMT,EAAMK,GAAOY,EAChD7B,EAAI,KAAOM,EAAMkB,EAAMnB,EAAMqB,EAAMnB,EAAMgB,GAAOM,EAChD7B,EAAI,KAAOC,EAAMyB,EAAMxB,EAAMsB,EAAMrB,EAAMoB,GAAOM,EAChD7B,EAAI,KAAOc,EAAMI,EAAML,EAAMO,EAAML,EAAME,GAAOY,EAChD7B,EAAI,KAAOS,EAAMW,EAAMV,EAAMQ,EAAMP,EAAMM,GAAOY,EACzC7B,GApBE,KAiHJ,SAAS8B,GAAS9B,EAAKhG,EAAGC,GAC/B,IAAIgG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,GACRsG,EAAMtG,EAAE,GACRuG,EAAMvG,EAAE,GACRwG,EAAMxG,EAAE,GACRyG,EAAMzG,EAAE,GACR0G,EAAM1G,EAAE,GACR2G,EAAM3G,EAAE,IACR4G,EAAM5G,EAAE,IACR6G,EAAM7G,EAAE,IACR8G,EAAM9G,EAAE,IACR+G,EAAM/G,EAAE,IACRgH,EAAMhH,EAAE,IAER+H,EAAK9H,EAAE,GACP+H,EAAK/H,EAAE,GACPgI,EAAKhI,EAAE,GACPiI,EAAKjI,EAAE,GA6BX,OA5BA+F,EAAI,GAAK+B,EAAK9B,EAAM+B,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAC/Cb,EAAI,GAAK+B,EAAK7B,EAAM8B,EAAK1B,EAAM2B,EAAKvB,EAAMwB,EAAKpB,EAC/Cd,EAAI,GAAK+B,EAAK5B,EAAM6B,EAAKzB,EAAM0B,EAAKtB,EAAMuB,EAAKnB,EAC/Cf,EAAI,GAAK+B,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAAMsB,EAAKlB,EAK/ChB,EAAI,IAJJ+B,EAAK9H,EAAE,IAIOgG,GAHd+B,EAAK/H,EAAE,IAGkBoG,GAFzB4B,EAAKhI,EAAE,IAE6BwG,GADpCyB,EAAKjI,EAAE,IACwC4G,EAC/Cb,EAAI,GAAK+B,EAAK7B,EAAM8B,EAAK1B,EAAM2B,EAAKvB,EAAMwB,EAAKpB,EAC/Cd,EAAI,GAAK+B,EAAK5B,EAAM6B,EAAKzB,EAAM0B,EAAKtB,EAAMuB,EAAKnB,EAC/Cf,EAAI,GAAK+B,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAAMsB,EAAKlB,EAK/ChB,EAAI,IAJJ+B,EAAK9H,EAAE,IAIOgG,GAHd+B,EAAK/H,EAAE,IAGkBoG,GAFzB4B,EAAKhI,EAAE,KAE6BwG,GADpCyB,EAAKjI,EAAE,KACwC4G,EAC/Cb,EAAI,GAAK+B,EAAK7B,EAAM8B,EAAK1B,EAAM2B,EAAKvB,EAAMwB,EAAKpB,EAC/Cd,EAAI,IAAM+B,EAAK5B,EAAM6B,EAAKzB,EAAM0B,EAAKtB,EAAMuB,EAAKnB,EAChDf,EAAI,IAAM+B,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAAMsB,EAAKlB,EAKhDhB,EAAI,KAJJ+B,EAAK9H,EAAE,KAIQgG,GAHf+B,EAAK/H,EAAE,KAGmBoG,GAF1B4B,EAAKhI,EAAE,KAE8BwG,GADrCyB,EAAKjI,EAAE,KACyC4G,EAChDb,EAAI,IAAM+B,EAAK7B,EAAM8B,EAAK1B,EAAM2B,EAAKvB,EAAMwB,EAAKpB,EAChDd,EAAI,IAAM+B,EAAK5B,EAAM6B,EAAKzB,EAAM0B,EAAKtB,EAAMuB,EAAKnB,EAChDf,EAAI,IAAM+B,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAAMsB,EAAKlB,EACzChB,EC1bF,SAASmC,KACd,IAAInC,EAAM,IAAIoC,GAAoB,GAclC,OAZIA,IAAuBtC,eACzBE,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,ECfF,SAASmC,KACd,IAAInC,EAAM,IAAIoC,GAAoB,GAQlC,OANIA,IAAuBtC,eACzBE,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EAsCF,SAASqC,GAAWzI,EAAG0I,EAAGC,GAC/B,IAAIvC,EAAM,IAAIoC,GAAoB,GAIlC,OAHApC,EAAI,GAAKpG,EACToG,EAAI,GAAKsC,EACTtC,EAAI,GAAKuC,EACFvC,EAiIF,SAAS1B,GAAI0B,EAAKhG,EAAGC,GAI1B,OAHA+F,EAAI,GAAK3G,KAAKiF,IAAItE,EAAE,GAAIC,EAAE,IAC1B+F,EAAI,GAAK3G,KAAKiF,IAAItE,EAAE,GAAIC,EAAE,IAC1B+F,EAAI,GAAK3G,KAAKiF,IAAItE,EAAE,GAAIC,EAAE,IACnB+F,EAWF,SAAS3B,GAAI2B,EAAKhG,EAAGC,GAI1B,OAHA+F,EAAI,GAAK3G,KAAKgF,IAAIrE,EAAE,GAAIC,EAAE,IAC1B+F,EAAI,GAAK3G,KAAKgF,IAAIrE,EAAE,GAAIC,EAAE,IAC1B+F,EAAI,GAAK3G,KAAKgF,IAAIrE,EAAE,GAAIC,EAAE,IACnB+F,EAyBF,SAASwC,GAAMxC,EAAKhG,EAAGC,GAI5B,OAHA+F,EAAI,GAAKhG,EAAE,GAAKC,EAChB+F,EAAI,GAAKhG,EAAE,GAAKC,EAChB+F,EAAI,GAAKhG,EAAE,GAAKC,EACT+F,EA+FF,SAASyC,GAAUzC,EAAKhG,GAC7B,IAAIJ,EAAII,EAAE,GACNsI,EAAItI,EAAE,GACNuI,EAAIvI,EAAE,GACN0I,EAAM9I,EAAIA,EAAI0I,EAAIA,EAAIC,EAAIA,EAU9B,OARIG,EAAM,IAERA,EAAM,EAAIrJ,KAAKsJ,KAAKD,IAGtB1C,EAAI,GAAKhG,EAAE,GAAK0I,EAChB1C,EAAI,GAAKhG,EAAE,GAAK0I,EAChB1C,EAAI,GAAKhG,EAAE,GAAK0I,EACT1C,EAiIF,SAAS4C,GAAc5C,EAAKhG,EAAG6I,GACpC,IAAIjJ,EAAII,EAAE,GACNsI,EAAItI,EAAE,GACNuI,EAAIvI,EAAE,GACN8I,EAAID,EAAE,GAAKjJ,EAAIiJ,EAAE,GAAKP,EAAIO,EAAE,IAAMN,EAAIM,EAAE,IAK5C,OAHA7C,EAAI,IAAM6C,EAAE,GAAKjJ,EAAIiJ,EAAE,GAAKP,EAAIO,EAAE,GAAKN,EAAIM,EAAE,MAD7CC,EAAIA,GAAK,GAET9C,EAAI,IAAM6C,EAAE,GAAKjJ,EAAIiJ,EAAE,GAAKP,EAAIO,EAAE,GAAKN,EAAIM,EAAE,KAAOC,EACpD9C,EAAI,IAAM6C,EAAE,GAAKjJ,EAAIiJ,EAAE,GAAKP,EAAIO,EAAE,IAAMN,EAAIM,EAAE,KAAOC,EAC9C9C,EAWF,SAAS+C,GAAc/C,EAAKhG,EAAG6I,GACpC,IAAIjJ,EAAII,EAAE,GACNsI,EAAItI,EAAE,GACNuI,EAAIvI,EAAE,GAIV,OAHAgG,EAAI,GAAKpG,EAAIiJ,EAAE,GAAKP,EAAIO,EAAE,GAAKN,EAAIM,EAAE,GACrC7C,EAAI,GAAKpG,EAAIiJ,EAAE,GAAKP,EAAIO,EAAE,GAAKN,EAAIM,EAAE,GACrC7C,EAAI,GAAKpG,EAAIiJ,EAAE,GAAKP,EAAIO,EAAE,GAAKN,EAAIM,EAAE,GAC9B7C,EC9eF,SAASmC,KACd,IAAInC,EAAM,IAAIoC,GAAoB,GASlC,OAPIA,IAAuBtC,eACzBE,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,WCKOgD,GAAmB9L,EAAiB+L,EAAcC,EAAc,IAAIpK,WACnF,MAAMzB,EAAWH,EAAKI,aAAa,YAC7BH,YAAWD,EAAKE,uBAAcmE,aAAcI,EAActE,EAAUM,YAGtEN,GACH8L,GAAYF,EAAQ5L,EAAUF,EAAS,IAAI2B,IAAIoK,IAGhD,MAAME,EAASlM,EAAKI,aAAa,UAC7B8L,GACHC,GAAkBJ,EAAQG,EAAQjM,EAAS,IAAI2B,IAAIoK,IAGpD,MAAMI,EAAUpM,EAAKI,aAAa,WAC9BgM,GACHC,GAAmBN,EAAQK,EAASnM,EAAS,IAAI2B,IAAIoK,IAItD,IAAK,MAAM9M,KAAUc,EAAKuD,cAAe,CACxC,MAAMpD,EAAWjB,EAAOkB,aAAa,YACjCD,GACH8L,GAAYF,EAAQ5L,EAAUF,EAAS,IAAI2B,IAAIoK,IAGhD,MAAME,EAAShN,EAAOkB,aAAa,UAC/B8L,GACHC,GAAkBJ,EAAQG,EAAQjM,EAAS,IAAI2B,IAAIoK,IAGpD,MAAMI,EAAUlN,EAAOkB,aAAa,WAChCgM,GACHC,GAAmBN,EAAQK,EAASnM,EAAS,IAAI2B,IAAIoK,IAKvD,IAAK,IAAIxM,EAAI,EAAGA,EAAIS,EAAQ8E,OAAQvF,IAAKwM,EAAYzK,IAAItB,EAAQT,IAGlE,SAASyM,GAAYF,EAAc3I,EAAqBnD,EAAsB+L,GAG7E,MAAM1H,EAAW,IAAIsE,aAAoC,EAAvBxF,EAAU3C,YACtCwD,EAAcb,EAAUc,iBAE9B,IAAK,IAAI1E,EAAI,EAAG8M,EAAe,GAAIC,EAAKnJ,EAAU3C,WAAYjB,EAAI+M,EAAI/M,IACrE8E,EAASzC,IAAIuB,EAAUoJ,WAAWhN,EAAG8M,GAAK9M,EAAIyE,GAG/C,MAAMwI,EAASC,KACf,IAAK,IAAIlN,EAAI,EAAGA,EAAIS,EAAQ8E,OAAQvF,IAAK,CACxC,MAAMuH,EAAQ9G,EAAQT,GAClBwM,EAAY3K,IAAI0F,KAEpB3D,EAAUoJ,WAAWzF,EAAO0F,GAC5Bf,GAAce,EAAQA,EAAQV,GAC9BzH,EAASzC,IAAI4K,EAAgB,EAAR1F,GAErBiF,EAAYzK,IAAIwF,IAGjB3D,EAAUoB,SAASF,GAAUqI,eAAc,GAG5C,SAASR,GAAkBJ,EAAc3I,EAAqBnD,EAAsB+L,GACnF,MAAMY,EAAeC,KHzDf,IAAkB/D,EAAKhG,GAALgG,EG0Df8D,GHzDJ,IADwB9J,EG0DNiJ,GHzDX,GACXjD,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,IAgKN,SAAgBgG,EAAKhG,GAC1B,IAAIiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACRmG,EAAMnG,EAAE,GACRqG,EAAMrG,EAAE,GACRsG,EAAMtG,EAAE,GACRuG,EAAMvG,EAAE,GACRyG,EAAMzG,EAAE,GACR0G,EAAM1G,EAAE,GACR2G,EAAM3G,EAAE,GACRkH,EAAMP,EAAML,EAAMC,EAAMG,EACxBkB,GAAOjB,EAAMN,EAAME,EAAME,EACzBuD,EAAMtD,EAAML,EAAMC,EAAMG,EAExBoB,EAAM5B,EAAMiB,EAAMhB,EAAM0B,EAAMzB,EAAM6D,EAEnCnC,IAKL7B,EAAI,GAAKkB,GADTW,EAAM,EAAMA,GAEZ7B,EAAI,KAAOW,EAAMT,EAAMC,EAAMO,GAAOmB,EACpC7B,EAAI,IAAMO,EAAML,EAAMC,EAAMG,GAAOuB,EACnC7B,EAAI,GAAK4B,EAAMC,EACf7B,EAAI,IAAMW,EAAMV,EAAME,EAAMM,GAAOoB,EACnC7B,EAAI,KAAOO,EAAMN,EAAME,EAAME,GAAOwB,EACpC7B,EAAI,GAAKgE,EAAMnC,EACf7B,EAAI,KAAOU,EAAMT,EAAMC,EAAMO,GAAOoB,EACpC7B,EAAI,IAAMM,EAAML,EAAMC,EAAMG,GAAOwB,GG3IpC9B,CAAO+D,EAAcA,GH4Ef,SAAmB9D,EAAKhG,GAE7B,GAAIgG,IAAQhG,EAAG,CACb,IAAIkG,EAAMlG,EAAE,GACRmG,EAAMnG,EAAE,GACRuG,EAAMvG,EAAE,GACZgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKE,EACTF,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKG,EACTH,EAAI,GAAKO,OAETP,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GACXgG,EAAI,GAAKhG,EAAE,GGhGdiK,CAAUH,EAAcA,GAExB,MAAMH,EAASC,KACf,IAAK,IAAIlN,EAAI,EAAGA,EAAIS,EAAQ8E,OAAQvF,IAAK,CACxC,MAAMuH,EAAQ9G,EAAQT,GAClBwM,EAAY3K,IAAI0F,KAEpB3D,EAAUoJ,WAAWzF,EAAO0F,GAC5BZ,GAAcY,EAAQA,EAAQG,GAC9BI,GAAcP,EAAQA,GACtBrJ,EAAU6J,WAAWlG,EAAO0F,GAE5BT,EAAYzK,IAAIwF,KAIlB,SAASsF,GAAmBN,EAAc3I,EAAqBnD,EAAsB+L,GACpF,MAAMkB,EAAKR,KACLS,EAAKC,KACX,IAAK,IAAI5N,EAAI,EAAGA,EAAIS,EAAQ8E,OAAQvF,IAAK,CACxC,MAAMuH,EAAQ9G,EAAQT,GACtB,GAAIwM,EAAY3K,IAAI0F,GAAQ,SAE5B3D,EAAUoJ,WAAWzF,EAAOoG,GAI5B,MAAOzK,EAAG0I,EAAGC,GAAK8B,EAClBD,EAAG,GAAKnB,EAAO,GAAKrJ,EAAIqJ,EAAO,GAAKX,EAAIW,EAAO,GAAKV,EACpD6B,EAAG,GAAKnB,EAAO,GAAKrJ,EAAIqJ,EAAO,GAAKX,EAAIW,EAAO,GAAKV,EACpD6B,EAAG,GAAKnB,EAAO,GAAKrJ,EAAIqJ,EAAO,GAAKX,EAAIW,EAAO,IAAMV,EACrD2B,GAAcE,EAAIA,GAEjBC,EAAG,GAAKD,EAAG,GAAMC,EAAG,GAAKD,EAAG,GAAMC,EAAG,GAAKD,EAAG,GAE9C9J,EAAU6J,WAAWlG,EAAOoG,GAE5BnB,EAAYzK,IAAIwF,aCtGFsG,GAAcC,EAAYvB,EAAcwB,GAAY,EAAOvB,GAE1E,IAAK,MAAMwB,KAAWF,EAAKG,iBAE1B,GADiBD,EAAQrF,cAAcuF,KAAMC,GAAMA,EAAEC,eAAiBC,EAAaC,MAAQH,IAAML,GACnF,CACb,MAAMS,EAAUP,EAAQQ,QACxBV,EAAKzJ,KAAK2J,EAASO,GAEnB,IAAK,MAAME,KAAaF,EAAQxK,cAAe,CAC9C,MAAM2K,EAAYD,EAAUD,QAC5BD,EAAQlK,KAAKoK,EAAWC,IAM3B,IAAKX,EAAW,CACf,MAAMY,EAAU,IAAIvM,IAAiC,IACjD0L,EAAKG,oBACLH,EAAKG,iBAAiBW,QAASpO,GAASA,EAAKuD,iBAE3C8K,EAAa,IAAIlN,IACvB,IAAK,MAAMnB,KAAQsN,EAAKG,iBACvB,IAAK,MAAMa,KAAgBpL,EAAmBlD,GAC5BsO,EACfnG,cACAuF,KAAM5K,IAAOA,aAAaxC,GAAawC,aAAayL,KAAqBJ,EAAQ9M,IAAIyB,MACtEuL,EAAWhN,IAAIiN,IAC/BD,EAAWxM,IAAIyM,EAAcA,EAAaN,SAI7C,IAAK,MAAM/F,KAAUkG,EACpB,IAAK,MAAOG,EAAcE,KAAiBH,EAC1CpG,EAAOpE,KAAKyK,EAAcE,GAM7BxC,EAAcA,GAAe,IAAIpK,IACjC,IAAK,MAAM5B,KAAQsN,EAAKG,iBACvB3B,GAAmB9L,EAAM+L,EAAQC,GNlC9B7J,KAAKsM,QAAOtM,KAAKsM,MAAQ,WAI5B,IAHA,IAAIrD,EAAI,EACJ5L,EAAIkP,UAAU3J,OAEXvF,KACL4L,GAAKsD,UAAUlP,GAAKkP,UAAUlP,GAGhC,OAAO2C,KAAKsJ,KAAKL,KGosBPH,KC9HAA,KGjnBZ,MAAM0D,GAAiB,CACrB,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,YA2BKC,GAAmB7G,GAClC,MAAMuF,EAAOvF,EAAK8G,UACZC,EAAc/G,EAAKgH,YAErBzB,IAAS0B,EAAUC,GAAGH,EAAaH,KACtCtB,GAAcC,EAAMwB,GAGrB,IAAK,MAAMpH,KAASK,EAAKN,eAAgB,CACxC,MAAMsE,EAASrE,EAAMqH,YACrBG,GAAanD,EAAQA,EAAQ+C,GAC7BpH,EAAMc,UAAUuD,GAGjB,OAAOhE,EAAKS,UAAUmG,IClCvB,MAOMQ,GAAyC,CAC9CC,cAAe,CACdvB,EAAawB,SACbxB,EAAaC,KACbD,EAAayB,QACbzB,EAAa0B,SACb1B,EAAa2B,OAoBFC,GAAQ,SAAUtJ,EAAyBgJ,IACvD,MAAM/I,OAAe+I,GAAmBhJ,GAElCiJ,EAAgB,IAAIxN,IAAIwE,EAAQgJ,eACtC,IAAK,MAAMxB,KAAgBxH,EAAQgJ,cAClC,IAAKD,GAAeC,cAAcM,SAAS9B,GAC1C,UAAU5M,mDAAqD4M,OAIjE,OAAOxP,EA3CK,QA2CkB6G,IAC7B,MAAMqB,EAASrB,EAASsB,YAEpB6I,EAAc/N,IAAIwM,EAAawB,WAUrC,SAAwBpK,GACvB,MAAMqB,EAASrB,EAASsB,YAGlBoJ,EAAkC,IAAI/N,IACtCgO,EAAoC,IAAIhO,IACxCiO,EAAgC,IAAIjO,IACpCkO,EAAiC,IAAIlO,IAErCmO,EAAS9K,EAASM,UAAUyK,aAClCD,EAAOlJ,QAASyG,IACfA,EAAKG,iBAAiB5G,QAASoJ,IAC9BA,EAAU5M,iBAAiBwD,QAASqJ,GAAaN,EAAmBrO,IAAI2O,IACxE,MAAMjQ,EAAUgQ,EAAU/P,aACtBD,GAAS0P,EAAiBpO,IAAItB,OAIpC,IAAK,MAAMkQ,KAAalL,EAASM,UAAUmB,iBAC1C,IAAK,MAAM0J,KAAWD,EAAUE,eAAgB,CAC/C,MAAMC,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YACnBH,GAAOT,EAAetO,IAAI+O,GAC1BE,GAAQV,EAAgBvO,IAAIiP,GAKlC,SAASE,EAAiBvN,GACzB,MAAMwN,EAA8C,IAAIxP,IAExD,IAAK,IAAI3B,EAAI,EAAGA,EAAI2D,EAAU4B,OAAQvF,IAAK,CAC1C,MAAMsD,EAAIK,EAAU3D,GACdoR,EAAQC,EAAYC,OAAOhO,EAAEuB,YAEnC,IAAIsM,EAAmBtP,IAAIyB,GAE3B,IAAK,IAAIpD,EAAIF,EAAI,EAAGE,EAAIyD,EAAU4B,OAAQrF,IAAK,CAC9C,MAAMqD,EAAII,EAAUzD,GAEhBiR,EAAmBtP,IAAI0B,IAEvBD,EAAEiO,YAAchO,EAAEgO,WAClBjO,EAAEgD,qBAAuB/C,EAAE+C,oBAC3BhD,EAAErC,aAAesC,EAAEtC,YACnBqC,EAAEkO,kBAAoBjO,EAAEiO,iBACxBH,EAAYI,OAAOL,EAAOC,EAAYC,OAAO/N,EAAEsB,cAClDsM,EAAmB9O,IAAIkB,EAAGD,IAK7B,OAAO6N,EAGR,MAAMO,EAAmBR,EAAiBlN,MAAMC,KAAKkM,IACrDrJ,EAAOU,sBAAwBkK,EAAiB9P,yBAAyBuO,EAAiBvO,iBAE1F,MAAM+P,EAAsBT,EAAiBlN,MAAMC,KAAKmM,IACxDtJ,EAAOU,sBACYmK,EAAoB/P,yBAAyBwO,EAAmBxO,oBAGnF,MAAMgQ,EAAkBV,EAAiBlN,MAAMC,KAAKoM,IAC9CwB,EAAmBX,EAAiBlN,MAAMC,KAAKqM,IACrDxJ,EAAOU,sBACYoK,EAAgBhQ,KAAOiQ,EAAiBjQ,yBACrDyO,EAAezO,KAAO0O,EAAgB1O,6BAI5C2O,EAAOlJ,QAASyG,IACfA,EAAKG,iBAAiB5G,QAASoJ,IAC9BA,EAAU5M,iBAAiBwD,QAASqJ,IAC/BiB,EAAoB9P,IAAI6O,IAC3BD,EAAUpM,KAAKqM,EAAUiB,EAAoBxP,IAAIuO,MAGnD,MAAMjQ,EAAUgQ,EAAU/P,aACtBD,GAAWiR,EAAiB7P,IAAIpB,IACnCgQ,EAAUpM,KAAK5D,EAASiR,EAAiBvP,IAAI1B,QAIhDuD,MAAMC,KAAKyN,EAAiBpP,QAAQ+E,QAAS5G,GAAYA,EAAQqR,WACjE9N,MAAMC,KAAK0N,EAAoBrP,QAAQ+E,QAASzD,GAAcA,EAAUkO,WAGxE,IAAK,MAAMnB,KAAalL,EAASM,UAAUmB,iBAC1C,IAAK,MAAM0J,KAAWD,EAAUE,eAAgB,CAC/C,MAAMC,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YACnBH,GAASc,EAAgB/P,IAAIiP,IAChCF,EAAQvM,KAAKyM,EAAOc,EAAgBzP,IAAI2O,IAErCE,GAAUa,EAAiBhQ,IAAImP,IAClCJ,EAAQvM,KAAK2M,EAAQa,EAAiB1P,IAAI6O,IAI7ChN,MAAMC,KAAK2N,EAAgBtP,QAAQ+E,QAASyJ,GAAUA,EAAMgB,WAC5D9N,MAAMC,KAAK4N,EAAiBvP,QAAQ+E,QAAS2J,GAAWA,EAAOc,WA/GhBC,CAAetM,GACzDmK,EAAc/N,IAAIwM,EAAayB,UAuJrC,SAAqBrK,GACpB,MAAMqB,EAASrB,EAASsB,YAClBC,EAAOvB,EAASM,UAChBiM,EAAWhL,EAAKiL,eAChBC,EAAoC,IAAIvQ,IAG9C,IAAK,IAAI3B,EAAI,EAAGA,EAAIgS,EAASzM,OAAQvF,IAAK,CACzC,MAAMsD,EAAI0O,EAAShS,GACboR,EAAQ9N,EAAE1D,WAEhB,IAAIsS,EAAWrQ,IAAIyB,GAEnB,IAAK,IAAIpD,EAAIF,EAAI,EAAGE,EAAI8R,EAASzM,OAAQrF,IAAK,CAC7C,MAAMqD,EAAIyO,EAAS9R,GACbiS,EAAQ5O,EAAE3D,WAEhB,GAAIsS,EAAWrQ,IAAI0B,GAAI,SAGvB,GAAID,EAAEvD,gBAAkBwD,EAAExD,cAAe,SAEzC,MAAMqS,EAAQ9O,EAAE+O,UACVC,EAAQ/O,EAAE8O,UACXD,GAAUE,GACXF,EAAM,KAAOE,EAAM,IACnBF,EAAM,KAAOE,EAAM,IAClBlB,GAAUe,GACXd,EAAYI,OAAOL,EAAOe,IAC7BD,EAAW7P,IAAIkB,EAAGD,IAKrBwD,EAAOU,sBAAwB0K,EAAWtQ,yBAAyBoF,EAAKiL,eAAe1M,oBAEvFvB,MAAMC,KAAKiO,EAAWK,WAAWlL,QAAQ,EAAElD,EAAKC,MAC/CD,EAAIwE,cAActB,QAASmL,IACpBA,aAAoBC,GAAOD,EAASnO,KAAKF,EAAKC,KAErDD,EAAI2N,YA/LyCY,CAAYjN,GACrDmK,EAAc/N,IAAIwM,EAAa0B,WAkMrC,SAAwBtK,GACvB,MAAMqB,EAASrB,EAASsB,YAElB4L,EADOlN,EAASM,UACCC,gBACjBkM,EAAa,IAAIvQ,IACjBiR,EAAO,IAAIxQ,IAAI,CAAC,SAGtB,IAAK,IAAIpC,EAAI,EAAGA,EAAI2S,EAAUpN,OAAQvF,IAAK,CAC1C,MAAMsD,EAAIqP,EAAU3S,GACpB,IAAIkS,EAAWrQ,IAAIyB,GAEnB,IAAK,IAAIpD,EAAIF,EAAI,EAAGE,EAAIyS,EAAUpN,OAAQrF,IAAK,CAC9C,MAAMqD,EAAIoP,EAAUzS,GAChBgS,EAAWrQ,IAAI0B,IAEfD,EAAEmO,OAAOlO,EAAGqP,IACfV,EAAW7P,IAAIkB,EAAGD,IAKrBwD,EAAOU,sBAAwB0K,EAAWtQ,yBAAyB+Q,EAAUpN,qBAE7EvB,MAAMC,KAAKiO,EAAWK,WAAWlL,QAAQ,EAAElD,EAAKC,MAC/CD,EAAIwE,cAActB,QAASmL,IACpBA,aAAoBC,GAAOD,EAASnO,KAAKF,EAAKC,KAErDD,EAAI2N,YA9N0Ce,CAAepN,GACzDmK,EAAc/N,IAAIwM,EAAaC,OA+GrC,SAAqB7I,GACpB,MAAMqB,EAASrB,EAASsB,YAClBC,EAAOvB,EAASM,UAGhB+M,EAAO,IAAInR,IACjBqF,EAAK+L,gBAAgB1L,QAAQ,CAACqJ,EAAUnJ,IAAUuL,EAAKzQ,IAAIqO,EAAUnJ,IACrEP,EAAKhB,gBAAgBqB,QAAQ,CAACxB,EAAU0B,IAAUuL,EAAKzQ,IAAIwD,EAAU0B,IAGrE,MAAMyL,EAAYhM,EAAKwJ,aAAajL,OAC9B0N,EAAe,IAAItR,IACzB,IAAK,MAAMwC,KAAO6C,EAAKwJ,aAAc,CAEpC,MAAM0C,EAAc,GACpB,IAAK,MAAM1S,KAAQ2D,EAAI8J,iBACtBiF,EAAYpP,KAAKqP,GAAmB3S,EAAMsS,IAK3C,MAAMM,EAAUF,EAAY3M,KAAK,KACjC,GAAI0M,EAAapR,IAAIuR,GAAU,CAC9B,MAAMC,EAAaJ,EAAa9Q,IAAIiR,GACpCjP,EAAIwE,cAActB,QAASoB,IACtBA,EAAO2F,eAAiBC,EAAaiF,MACxC7K,EAAOpE,KAAKF,EAAKkP,KAGnBlP,EAAI2N,eAEJmB,EAAa5Q,IAAI+Q,EAASjP,GAI5B2C,EAAOU,sBAAwBwL,EAAYC,EAAarR,yBAAyBoR,aAlJtCO,CAAY9N,GAClDmK,EAAc/N,IAAIwM,EAAa2B,OAgOrC,SAAoBvK,GACnB,MAAMqB,EAASrB,EAASsB,YAElByM,EADO/N,EAASM,UACHoB,YACb+K,EAAa,IAAIvQ,IACjBiR,EAAO,IAAIxQ,IAAI,CAAC,SAEtB,IAAK,IAAIpC,EAAI,EAAGA,EAAIwT,EAAMjO,OAAQvF,IAAK,CACtC,MAAMsD,EAAIkQ,EAAMxT,GAEhB,IAAIkS,EAAWrQ,IAAIyB,GAEnB,IAAK,IAAIpD,EAAIF,EAAI,EAAGE,EAAIsT,EAAMjO,OAAQrF,IAAK,CAC1C,MAAMqD,EAAIiQ,EAAMtT,GACZgS,EAAWrQ,IAAI0B,IAEfD,EAAEmO,OAAOlO,EAAGqP,IACfV,EAAW7P,IAAIkB,EAAGD,IAKrBwD,EAAOU,sBAAwB0K,EAAWtQ,yBAAyB4R,EAAMjO,iBAEzEvB,MAAMC,KAAKiO,EAAWK,WAAWlL,QAAQ,EAAElD,EAAKC,MAC/CD,EAAIwE,cAActB,QAASmL,IACpBA,aAAoBC,GAAOD,EAASnO,KAAKF,EAAKC,KAErDD,EAAI2N,YA5PsC2B,CAAWhO,GAErDqB,EAAOU,6BA+PT,SAAS2L,GAAmB3S,EAAmCsS,GAC9D,MAAMY,EAAe,GACrB,IAAK,MAAMrN,KAAY7F,EAAK0F,gBAAiB,CAC5C,MAAMtC,EAAYpD,EAAKI,aAAayF,GACpCqN,EAAa5P,KAAKuC,EAAW,IAAMyM,EAAK3Q,IAAIyB,IAE7C,GAAIpD,aAAgBM,EAAW,CAC9B,MAAML,EAAUD,EAAKE,aACjBD,GACHiT,EAAa5P,KAAK,WAAagP,EAAK3Q,IAAI1B,IAEzC,MAAMoF,EAAWrF,EAAKsF,cAClBD,GACH6N,EAAa5P,KAAK,YAAcgP,EAAK3Q,IAAI0D,IAE1C6N,EAAa5P,KAAK,QAAUtD,EAAKK,WACjC,IAAK,MAAMnB,KAAUc,EAAKuD,cACzB2P,EAAa5P,KAAK,UAAYqP,GAAmBzT,EAAQoT,IAG3D,OAAOY,EAAanN,KAAK,KCnV1B,MAWMoN,GAAyC,CAC9CC,QAAS,8BAQMC,GAAWlN,EAA8BgN,IACxD,MAAM/M,OAAe+M,GAAwBhN,GAE7C,OAAO/H,EAvBK,aAuBkBiI,IAC7B,MAAMC,EAASD,EAAIE,YACnB,IAAK,MAAM+G,KAAQjH,EAAId,UAAUyK,aAChC,IAAK,MAAMhQ,KAAQsN,EAAKG,iBACvB6F,GAAoBtT,EAAMoG,GAG5BC,EAAIkN,gBAAgBC,GAAqBlC,UACzChL,EAAOU,iCAIT,SAASsM,GAAoBtT,EAAiBoG,GAC7C,IAAK,MAAMP,KAAY7F,EAAK0F,gBAC3B+N,GAAoB5N,EAAU7F,EAAKI,aAAayF,GAAYO,GAE7D,IAAK,MAAMlH,KAAUc,EAAKuD,cACzB,IAAK,MAAMsC,KAAY3G,EAAOwG,gBAC7B+N,GAAoB5N,EAAU3G,EAAOkB,aAAayF,GAAYO,GAKjE,SAASqN,GAAoB5N,EAAkBzC,EAAqBgD,GACnE,IAAKhD,EAAUiB,WAAY,OAC3B,IAAK+B,EAAQgN,QAAQM,KAAK7N,GAAW,OACrC,GAAIzC,EAAUuQ,oBAAsB,EAAG,OAEvC,MAAMvP,EAAWhB,EAAUiB,WACrBC,EAAW,IAAIsE,aAAaxE,EAASW,QAE3C,IAAK,IAAIvF,EAAI,EAAG+M,EAAKnJ,EAAU3C,WAAY6L,EAAK,GAAgB9M,EAAI+M,EAAI/M,IACvE8M,EAAKlJ,EAAUoJ,WAAWhN,EAAG8M,GAC7BlJ,EAAUoB,SAASF,GAAU2I,WAAWzN,EAAG8M,GAAI9H,SAASJ,GAGzDhB,EAAUoB,SAASF,GAAUqI,eAAc,GC3D5C,MAcaiH,GAA+B,CAC3CC,OAAQ,cACRC,YAAa,EACbC,YAAa,EACbC,iBAAkB,GAClBC,eAAgB,GAChBC,cAAe,EACfC,iBAAkB,GAClBC,gBAAiB,GACjBC,mBAAoB,QASRC,GAAQ,CAACnO,EAAyByN,MAC9C,MAAMxN,OAAewN,GAAmBzN,GACxC,OAAO/H,EAlCK,QAkCkBiI,IAC7BA,EAAIkN,gBAAgBgB,GAClBC,aAAY,GACZC,kBAAkB,CAClBZ,OACoB,gBAAnBzN,EAAQyN,OACLU,EAAwBG,cAAcC,YACtCJ,EAAwBG,cAAcE,WAC1Cd,YAAa1N,EAAQ0N,YACrBC,YAAa3N,EAAQ2N,YACrBc,iBAAkB,CACjBC,SAAU1O,EAAQ4N,iBAClBe,OAAQ3O,EAAQ6N,eAChBe,MAAO5O,EAAQ8N,cACfe,UAAW7O,EAAQ+N,iBACnBe,QAAS9O,EAAQgO,iBAElBC,mBAAoBjO,EAAQiO,wBC1B1Bc,GAAyC,CAC9C/F,cAAe,CACdvB,EAAauH,KACbvH,EAAa2B,KACb3B,EAAaC,KACbD,EAAawH,OACbxH,EAAayH,UACbzH,EAAa0H,iBACb1H,EAAa2H,UACb3H,EAAa0B,SACb1B,EAAayB,QACbzB,EAAawB,SACbxB,EAAa4H,QAEdC,YAAY,EACZC,gBAAgB,GAoBJC,GAAQ,SAAUzP,EAAyBgP,IAEvD,MAAM/O,OAAe+O,GAAmBhP,GAClCiJ,EAAgB,IAAIxN,IAAIwE,EAAQgJ,eAEtC,OAAOhR,EAlDK,QAkDkBiI,IAC7B,MAAMC,EAASD,EAAIE,YACbC,EAAOH,EAAId,UACXsQ,EAAQxP,EAAIjB,WAEZ0Q,EAAmC,GAMzC,GAAI1G,EAAc/N,IAAIwM,EAAaC,MAClC,IAAK,MAAMR,KAAQ9G,EAAKwJ,aACnB1C,EAAKG,iBAAiB1I,OAAS,IACnCuI,EAAKgE,UACLyE,EAAazI,IAkBf,GAdI8B,EAAc/N,IAAIwM,EAAauH,QAAUhP,EAAQsP,YAAYlP,EAAKI,aAAaC,QA+FnF,SAASmP,EAAcC,GAGtB,GAFAA,EAAKxO,eAAeZ,QAAQmP,GAExBC,aAAgB5N,EAAO,OAE3B,MAAM6N,EAASL,EAAMM,gBAAgBF,GAAMvI,KAAM0I,IAChD,MAAMC,EAAQD,EAAEE,YAAY1I,aAC5B,OAAOyI,IAAUxI,EAAaiF,MAAQuD,IAAUxI,EAAa0I,OAASF,IAAUxI,EAAauH,OAE1C,IAApCS,EAAMpO,aAAawO,GAAMlR,QACzBmR,IACfD,EAAK3E,UACLyE,EAAaE,MA1GX7G,EAAc/N,IAAIwM,EAAauH,OAAO5O,EAAKgQ,YAAY3P,QAAQ4P,GAC/DrH,EAAc/N,IAAIwM,EAAa2B,OAAOhJ,EAAKG,YAAYE,QAAQ4P,GAC/DrH,EAAc/N,IAAIwM,EAAaC,OAAOtH,EAAKwJ,aAAanJ,QAAQ4P,GAChErH,EAAc/N,IAAIwM,EAAawH,SAAS7O,EAAKkQ,cAAc7P,QAAQ4P,GAEnErH,EAAc/N,IAAIwM,EAAayH,YAClCqB,EAAkBd,EAAOhI,EAAayH,WAEnClG,EAAc/N,IAAIwM,EAAa0H,mBAClCoB,EAAkBd,EAAOhI,EAAa0H,mBAIlCnP,EAAQuP,gBAAkBvG,EAAc/N,IAAIwM,EAAawB,UAC7D,IAAK,MAAM/B,KAAQ9G,EAAKwJ,aACvB,IAAK,MAAMhQ,KAAQsN,EAAKG,iBAAkB,CACzC,MAAMmJ,EAAWC,GAAsBxQ,EAAKrG,EAAKsF,eAC3CwR,EAASC,GAAoB/W,EAAM4W,GACzCI,EAAgBhX,EAAM8W,GACtB9W,EAAKuD,cAAcsD,QAAS3H,GAAW8X,EAAgB9X,EAAQ4X,IASlE,GAAI1H,EAAc/N,IAAIwM,EAAa2H,WAClC,IAAK,MAAMyB,KAAQzQ,EAAKE,iBAAkB,CACzC,IAAK,MAAMwQ,KAAWD,EAAKE,eACrBD,EAAQE,kBACZF,EAAQ5F,UACRyE,EAAamB,IAGf,GAAKD,EAAKE,eAAepS,OAKxBkS,EAAK5G,eAAexJ,QAAQ4P,OALI,CAChC,MAAMY,EAAWJ,EAAK5G,eACtBoG,EAAUQ,GACVI,EAASxQ,QAAQ4P,IAiBpB,GAVIrH,EAAc/N,IAAIwM,EAAa0B,WAAW/I,EAAKhB,gBAAgBqB,QAAQ4P,GACvErH,EAAc/N,IAAIwM,EAAayB,UAAU9I,EAAKiL,eAAe5K,QAAQ4P,GACrErH,EAAc/N,IAAIwM,EAAawB,WAAW7I,EAAK+L,gBAAgB1L,QAAQ4P,GACvErH,EAAc/N,IAAIwM,EAAa4H,SAASjP,EAAK8Q,cAAczQ,QAAQ4P,GAOnElY,OAAOuD,KAAKgU,GAAU/Q,OAAQ,CACjC,MAAMwS,EAAMhZ,OAAOuD,KAAKgU,GACtBlQ,IAAKgC,MAASA,MAAMkO,EAASlO,OAC7B7B,KAAK,MACPO,EAAOkR,gCAAkCD,UAEzCjR,EAAOkR,2CAQR,SAASf,EAAUR,GAGFA,EAAK9N,cAAcC,OAAQuF,KAAQA,aAAasE,GAAQtE,aAAa8J,IACxE1S,SACZkR,EAAK3E,UACLyE,EAAaE,IASf,SAASU,EAAkBd,EAAwBjI,GAClDiI,EACE6B,YACA9R,IAAK+R,GAASA,EAAKrB,aACnBlO,OAAQH,GAAWA,EAAO2F,eAAiBA,GAC3C/G,QAAQ4P,GAoBX,SAASO,EAAgBhX,EAAmC8W,GAC3D,IAAK,MAAMjR,KAAYiR,EACtB9W,EAAK4X,aAAa/R,EAAU,MAK9B,SAASkQ,EAAaE,GACrBH,EAASG,EAAKrI,cAAgBkI,EAASG,EAAKrI,eAAiB,EAC7DkI,EAASG,EAAKrI,gBAtDftH,EAAOU,6BA8DT,SAAS+P,GAAoB/W,EAAmC4W,GAC/D,MAAME,EAAS,GACf,IAAK,MAAMjR,KAAY7F,EAAK0F,gBACV,YAAbG,GAA2B+Q,EAASvV,IAAIwE,IAEjCA,EAASgS,WAAW,eAAiBjB,EAASvV,IAAIwE,IAElDA,EAASgS,WAAW,WAA0B,YAAbhS,IAD3CiR,EAAOxT,KAAKuC,GAFZiR,EAAOxT,KAAKuC,GAOd,OAAOiR,EAOR,SAASD,GACR5R,EACAI,EACAyS,EAAY,IAAIlW,KAEhB,IAAKyD,EAAU,OAAOyS,EAEtB,MAEMC,EAFQ9S,EAASG,WAEH4S,eAAe3S,GAC7B4S,EAAe,IAAIrW,IAEzB,IAAK,MAAM+V,KAAQI,EACdJ,EAAKO,qBAAsBC,GAC9BF,EAAa1W,IAAIoW,EAAKS,WAIxB,IAAK,MAAMT,KAAQI,EAAO,CACzB,MAAM1Z,EAAOsZ,EAAKS,UACZ1Q,EAAQiQ,EAAKO,WAEfxQ,aAAiB2Q,GAChBJ,EAAa5W,IAAIhD,EAAKuE,QAAQ,QAAS,MAC1CkV,EAAUvW,gBAAgBmG,EAAM4Q,iBAI9B5Q,aAAiByQ,GAAW9Z,EAAKka,MAAM,mBAC1CT,EAAUvW,IAAI,WAGXmG,aAAiB8Q,GACpB3B,GAAsB5R,EAAUyC,EAAOoQ,GAMzC,OAAOA,EC5QR,MAMaW,GAA6C,YAmB1CC,GAAQvS,EAA2BsS,IAIlD,YAFqBA,GAAqBtS,GAEnC/H,EA7BK,UA6BiBua,MAAAA,IAC5B,MAAMnS,EAAOvB,EAASM,UAChBe,EAASrB,EAASsB,YAGlBqS,EAAS,IAAIhX,IACnB,IAAK,MAAMiX,KAAQrS,EAAKG,YACvB,IAAK,MAAMmS,KAASD,EAAKE,aACxBH,EAAOrX,IAAIuX,GAKb,MAAME,EAAW,IAAIpX,IACrB,IAAK,MAAMuO,KAAa3J,EAAKE,iBAC5B,IAAK,MAAMwQ,KAAW/G,EAAUgH,eAAgB,CAC/C,MAAMpP,EAAOmP,EAAQE,gBACjBrP,GACHiR,EAASzX,IAAIwG,GAMhB,MAAMkR,EAAiB,IAAIrX,IACrBsX,EAAoB,IAAItX,IAC9B,IAAK,MAAMkF,KAASN,EAAKI,aACxBE,EAAMqS,SAAUpR,IACf,MAAME,EAASF,EAAKG,gBACfD,KACD2Q,EAAOvX,IAAI4G,IAAWgR,EAAe5X,IAAI4G,KAC5CgR,EAAe1X,IAAIwG,IAEhBiR,EAAS3X,IAAI4G,IAAWiR,EAAkB7X,IAAI4G,KACjDiR,EAAkB3X,IAAIwG,MAMzB,IAAK,MAAMjB,KAASN,EAAKI,aACxBE,EAAMqS,SAAUpR,IACXiR,EAAS3X,IAAI0G,IACbkR,EAAe5X,IAAI0G,IACnBmR,EAAkB7X,IAAI0G,IAE1BO,GAAgBP,KAKdiR,EAAS5X,MACZkF,EAAOU,0FAIF/B,EAASmU,UAAUxD,GAAM,CAAExG,cAAe,CAACvB,EAAauH,MAAOM,YAAY,KAEjFpP,EAAOU,uCCxFOqS,GAAatR,GAC5B,OAAOD,GAAeC,GAAM,IAAM,cCSnBuR,GAAQjT,GACvB,MAAO,CACNkC,OAAQ3B,GAAWP,GACnB0J,OAAQC,GAAW3J,GACnB8L,UAAW3M,GAAca,GACzBmL,SAAUC,GAAapL,GACvBkT,WAAY7S,GAAeL,IAK7B,SAASO,GAAWP,GAcnB,MAAO,CAAEmT,WAbMnT,EACbd,UACAqB,aACAhB,IAAKkB,IACL,MAAMN,EAAOM,EAAMW,eAAe,GAC5BgS,EAAcvS,EAAUJ,GAC9B,MAAO,CACNzI,KAAMyI,EAAMsR,UACZsB,SAAUlT,EAAOA,EAAK4R,UAAY,GAClCuB,QAASC,GAAYH,EAAYrS,KACjCyS,QAASD,GAAYH,EAAYtS,SAOrC,SAAS6I,GAAW3J,GAgDnB,MAAO,CAAEmT,WA/C2BnT,EAClCd,UACAyK,aACApK,IAAK0H,IACL,MAAMwM,EAAYxM,EAAKnF,cAAcC,OAAQH,GAAWA,EAAO2F,eAAiBC,EAAaiF,MAAM/N,OACnG,IAAIgV,EAAe,EACfC,EAAQ,EACZ,MAAMlC,EAAY,IAAIlW,IAChBqY,EAAc,IAAIrY,IAClBsY,EAA+B,IAAItY,IAEzC0L,EAAKG,iBAAiB5G,QAAS7G,IAC9B,IAAK,MAAM6F,KAAY7F,EAAK0F,gBAAiB,CAC5C,MAAMyU,EAAOna,EAAKI,aAAayF,GAC/BiS,EAAUvW,IAAIsE,EAAW,IAAMuU,GAAoBD,IACnDD,EAAc3Y,IAAI4Y,GAEnB,IAAK,MAAME,KAAQra,EAAKuD,cACvB8W,EAAKhX,iBAAiBwD,QAASsT,GAASD,EAAc3Y,IAAI4Y,IAE3D,MAAMla,EAAUD,EAAKE,aACjBD,IACHga,EAAY1Y,IAAI6Y,GAAoBna,IACpCia,EAAc3Y,IAAItB,IAEnB+Z,GAASha,EAAKqD,iBAAiB,GAAG5C,WAClCsZ,GAAgBha,EAAoBC,KAGrC,IAAIoB,EAAO,EACXoC,MAAMC,KAAKyW,GAAerT,QAAS/D,GAAO1B,GAAQ0B,EAAEuB,WAAYiW,YAEhE,MAAMC,EAAQjN,EAAKG,iBAAiB7H,IAAK5F,GAASwa,GAAwBxa,EAAKK,YAE/E,MAAO,CACNhC,KAAMiP,EAAK8K,UACXqC,KAAMjX,MAAMC,KAAK,IAAI7B,IAAI2Y,IACzBG,WAAYpN,EAAKG,iBAAiB1I,OAClCgV,aAAcA,EACdY,SAAUX,EACV/Z,QAASuD,MAAMC,KAAKwW,GAAatU,OACjC0I,WAAY7K,MAAMC,KAAKqU,GAAWnS,OAClCmU,UAAWA,EACX1Y,KAAMA,MAQV,SAASoE,GAAca,GAoCtB,MAAO,CAAEmT,WAnCkCnT,EACzCd,UACAC,gBACAI,IAAKP,IACL,MAAMyU,EAAYzU,EAChB8C,cACAC,OAAQH,GAAWA,EAAO2F,eAAiBC,EAAaiF,MAAM/N,OAG1D6V,EAAa,IAAIhZ,IAAuByD,EAASwV,kBACjDC,EAAQzU,EACZjB,WACAsS,YACAtP,OAAQ2S,IACR,MAAMrT,EAAQqT,EAAI7C,WACZjQ,EAAS8S,EAAIzE,YACnB,OAAI5O,aAAiByQ,GAAWlQ,IAAW5C,MAGvCqC,aAAiByQ,GAAWlQ,aAAkBuQ,GAAqBoC,EAAWvZ,IAAI4G,MAKtFrC,IAAKmV,GAAQA,EAAI3C,WAEnB,MAAO,CACN/Z,KAAMgH,EAAS+S,UACf0B,UAAAA,EACAtI,SAAUsJ,EACVE,UAAW3V,EAAS4V,eACpBC,YAAa7V,EAAS8V,qBAQ1B,SAAS1J,GAAapL,GAyCrB,MAAO,CAAEmT,WAxCgCnT,EACvCd,UACAkM,eACA7L,IAAKwV,IACL,MAAMtB,EAAYsB,EAChBjT,cACAC,OAAQH,GAAWA,EAAO2F,eAAiBC,EAAaiF,MAAM/N,OAE1D+V,EAAQzU,EACZjB,WACA+Q,gBAAgBiF,GAChBhT,OAAQuP,GAASA,EAAKrB,YAAY1I,eAAiBC,EAAaiF,MAChElN,IAAK+R,GAASA,EAAKS,WAEfiD,EAAaC,EAAWzJ,QAAQuJ,EAAQhc,WAAagc,EAAQ7b,eAEnE,IAAIgc,EAAc,GAClB,GAA8B,eAA1BH,EAAQ7b,cAAgC,CAC3C,MACMic,EADYC,EAAQL,EAAQhc,YACZsc,qBAAqB,GACvCF,EAAIG,aAAeC,EACtBL,EAAc,QACJC,EAAIG,aAAeE,IAC7BN,EAAc,SAIhB,MAAO,CACNld,KAAM+c,EAAQhD,UACd0D,IAAKV,EAAQW,SACbjB,MAAOtX,MAAMC,KAAK,IAAI7B,IAAIkZ,IAC1BhB,UAAAA,EACAkC,SAAUZ,EAAQ7b,cAClBgc,YAAAA,EACAF,WAAYA,EAAaA,EAAWtV,KAAK,KAAO,GAChD3E,KAAMga,EAAQhc,WAAYkb,WAC1B2B,QAASX,EAAWY,kBAAkBd,EAAQhc,WAAagc,EAAQ7b,mBAQvE,SAASmH,GAAeL,GAwCvB,MAAO,CAAEmT,WAvCoCnT,EAC3Cd,UACAmB,iBACAd,IAAKqR,IACL,IAAIkF,EAAUC,SACVC,GAAWD,SACfnF,EAAK5G,eAAexJ,QAASuJ,IAC5B,MAAME,EAAQF,EAAQG,WACjBD,IACL6L,EAAUha,KAAKiF,IAAI+U,EAAS7L,EAAMgM,OAAO,IAAI,IAC7CD,EAAUla,KAAKgF,IAAIkV,EAAS/L,EAAMiM,OAAO,IAAI,OAG9C,IAAInb,EAAO,EACPob,EAAY,EAChB,MAAMrZ,EAA2B,IAAIvB,IAcrC,OAbAqV,EAAK5G,eAAexJ,QAASuJ,IAC5B,MAAME,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YAClBH,IACLkM,GAAalM,EAAM7P,WACnB0C,EAAU5B,IAAI+O,GACTE,GACLrN,EAAU5B,IAAIiP,MAEfhN,MAAMC,KAAKN,GAAW0D,QAASqJ,IAC9B9O,GAAQ8O,EAAS7L,WAAYiW,aAGvB,CACNjc,KAAM4Y,EAAKmB,UACXqE,SAAUxF,EAAKE,eAAepS,OAC9BsS,SAAUJ,EAAK5G,eAAetL,OAC9B2X,SAAUva,KAAKwa,MAA4B,KAArBN,EAAUF,IAAmB,IACnDK,UAAWA,EACXpb,KAAMA,MAqEV,MAAMoZ,GAA0B,CAC/B,SACA,QACA,YACA,aACA,YACA,iBACA,gBAGKoC,GAA4C,CACjDhU,aAAc,MACd9D,YAAa,MACbD,YAAa,MACbgY,WAAY,KACZC,WAAY,MACZC,WAAY,MACZC,UAAW,MAIZ,SAASpD,GAAYpY,GACpB,IAAK,IAAIhC,EAAI,EAAGA,EAAIgC,EAAEuD,OAAQvF,IACxBgC,EAAEhC,GAAcgD,UAAShB,EAAEhC,GAAKyd,OAAOzb,EAAEhC,GAAGgD,QAAQ,KAE1D,OAAOhB,EAGR,SAAS4Y,GAAoBlK,GAC5B,MAAMtL,EAAQsL,EAAS7L,WAGvB,OAFauY,GAAkBhY,EAAMsY,YAAY7e,OAAS,MAC3C6R,EAASc,gBAAkB,QAAU,ICxTrD,MAOMmM,GAA+C,CACpD/V,IAAK,YAoBUgW,GAASjX,EAA4BgX,IACpD,MAAM/W,OAAe+W,GAAsBhX,GAE3C,OAAO/H,EA/BK,WA+BkBiI,IAC7B,MAAMC,EAASD,EAAIE,YACbC,EAAOH,EAAId,UACX8X,EAAiBhX,EAAIkN,gBAAgB+J,GAE3C,GAAI9W,EAAKE,iBAAiB3B,OAGzB,OAFAuB,EAAOiX,kFACPjX,EAAOU,6BAIR,IAAIwW,EAAa,EACbC,EAAe,EAEnB,IAAK,MAAM3W,KAASN,EAAKI,aAAc,CAEtC,MAAM8W,EAAgB,IAAIvc,IAC1B2F,EAAMqS,SAAUpR,IACf,MAAMuF,EAAOvF,EAAK8G,UACbvB,GACLoQ,EAAc7b,IAAIyL,GAAOoQ,EAAc/b,IAAI2L,IAAS,IAAI1L,KAAaL,IAAIwG,MAI1E,MAAM4V,EAAgB,GACtB,IAAK,MAAMrQ,KAAQ9J,MAAMC,KAAKia,EAAc5b,QAAS,CACpD,MAAM8b,EAAQpa,MAAMC,KAAKia,EAAc/b,IAAI2L,IAC3C,GAAIsQ,EAAM7Y,OAASqB,EAAQgB,IAAK,SAChC,GAAIwW,EAAMlQ,KAAM3F,GAASA,EAAK8V,WAAY,SAE1C,MAAMC,EAAQC,GAAY1X,EAAKgX,EAAgB/P,EAAMsQ,EAAM7Y,QACrDiZ,EAAmBF,EAAM1d,aAAa,eACtC6d,EAAgBH,EAAM1d,aAAa,YACnC8d,EAAaJ,EAAM1d,aAAa,SAEhC+d,EAAY9X,EAAIkB,aAAa6W,QAAQ9Q,GAAM+Q,aAAa,0BAA2BP,GACzFhX,EAAMa,SAASwW,GAEf,IAAIG,GAAmB,EACnBC,GAAgB,EAChBC,GAAa,EAGjB,IAAK,IAAIhf,EAAI,EAAGA,EAAIoe,EAAM7Y,OAAQvF,IAAK,CACtC,IAAIoI,EAAS6W,EAASC,EACtB,MAAM3W,EAAO6V,EAAMpe,GAEnBwe,EAAiB/Q,WAAWzN,EAAIoI,EAAIG,EAAK4W,uBACzCV,EAAchR,WAAWzN,EAAIif,EAAI1W,EAAK6W,oBACtCV,EAAWjR,WAAWzN,EAAIkf,EAAI3W,EAAK8W,iBAE9B7P,EAAUC,GAAGrH,EAAG,CAAC,EAAG,EAAG,MAAK0W,GAAmB,GAC/CtP,EAAUC,GAAGwP,EAAG,CAAC,EAAG,EAAG,EAAG,MAAKF,GAAgB,GAC/CvP,EAAUC,GAAGyP,EAAG,CAAC,EAAG,EAAG,MAAKF,GAAa,GAG9CzW,EAAKqW,QAAQ,MACbT,EAAcra,KAAKyE,GAGfuW,GAAkBN,EAAiB1M,UACnCiN,GAAeN,EAAc3M,UAC7BkN,GAAYN,EAAW5M,UAE5BwN,GAAiBnB,EAAerX,GAEhCkX,IACAC,GAAgBG,EAAM7Y,QAKvBuB,EAAOkR,KADJgG,EAAa,uBACgBA,mBAA4BC,kDAEpBrX,EAAQgB,gCAGF,IAA3CiW,EAAe0B,iBAAiBha,QACnCsY,EAAe/L,UAGhBhL,EAAOU,+BAIT,SAAS8X,GAAiBlB,EAAetX,GACxC,IAAIyB,EACAiX,EAAc,EAClB,KAAQjX,EAAO6V,EAAMqB,OAAQ,CAC5B,GACClX,EAAKN,eAAe1C,QACpBgD,EAAKmX,aACLnX,EAAK8G,WACL9G,EAAK8V,WACL9V,EAAK8S,iBAAiB9V,OAEtB,SAED,MAAMoa,EAAapX,EAAKG,gBACpBiX,GAAYvB,EAAMta,KAAK6b,GAC3BpX,EAAKuJ,UACL0N,IAGD1Y,EAAOU,2BAA0BgY,mBAGlC,SAASjB,GAAY1X,EAAegX,EAAsC/P,EAAY5I,GACrF,MAAM0a,EAAS9R,EAAKG,iBAAiB,GAAGrN,aAAa,YAAaif,YAE5DrB,EAAmB3X,EACvBiZ,iBACAC,QAAQ,QACR/a,SAAS,IAAIoE,aAAa,EAAIlE,IAC9B8a,UAAUJ,GACNnB,EAAgB5X,EACpBiZ,iBACAC,QAAQ,QACR/a,SAAS,IAAIoE,aAAa,EAAIlE,IAC9B8a,UAAUJ,GACNlB,EAAa7X,EACjBiZ,iBACAC,QAAQ,QACR/a,SAAS,IAAIoE,aAAa,EAAIlE,IAC9B8a,UAAUJ,GAEZ,OAAO/B,EACLoC,sBACA7H,aAAa,cAAeoG,GAC5BpG,aAAa,WAAYqG,GACzBrG,aAAa,QAASsG,GC9JzB,MAAMwB,GAA0D,CAC/DC,gBAAgB,YAwBDC,GAAeC,EAAoBzZ,EAAgC,IAClFA,OAAesZ,GAA4BtZ,GAC3C,MAAM0Z,EAAeD,EAAM,GACrB5a,EAAWC,EAASC,UAAU2a,EAAa1a,YAGjD,IAAKgB,EAAQuZ,gBAAkB,IAAI/d,IAAIie,EAAMja,IAAIZ,IAAqB5D,KAAO,EAC5E,UAAUJ,MACT,8GAMF,MAAM+e,EAAY,GAEZC,EAAc,GAEpB,IAAIC,EAAiB,EACjBC,EAAkB,EAGtB,IAAK,MAAM1S,KAAWqS,EAAO,CAC5B,MAAM5f,EAAUkgB,GAAoB3S,GAC9BzJ,EAAQ,GAEd,IAAK,IAAIvE,EAAI,EAAGA,EAAIS,EAAQ8E,OAAQvF,IAAK,CACxC,MAAMuH,EAAQ9G,EAAQT,QACD4gB,IAAjBrc,EAAMgD,KACThD,EAAMgD,GAASkZ,KAGhBC,IAEDH,EAAUzc,KAAK,IAAIwB,YAAYf,IAE/Bic,EAAY1c,KAAKrD,GAIlB,MAAM8N,EAAU9I,EAASob,kBAAkBC,QAAQR,EAAazf,WAAWkgB,YAAYT,EAAaxa,eACpG,IAAK,MAAMO,KAAYia,EAAapa,gBAAiB,CACpD,MAAM8a,EAAeV,EAAa1f,aAAayF,GACzC4a,EAAiBC,EAA0BF,EAAa1a,oBACxD0I,EAAevJ,EACnBqa,iBACAC,QAAQiB,EAAazP,WACrByO,UAAUgB,EAAanB,aACvB1S,cAAc6T,EAAaxP,iBAC3BxM,SAAS,IAAIic,EAAeR,EAAiBO,EAAatc,mBAC5D6J,EAAQ6J,aAAa/R,EAAU2I,GAIhC,MACMmS,GADkBb,EAAa5f,aAAeuE,EAAcwb,GAAkB,OAGnFhb,EACEqa,iBACAE,UAAUM,EAAa5f,aAAcmf,aACrC7a,SAASC,EAAcyb,EAAiBD,IAC3ClS,EAAQ6S,WAAWD,GAGnB,IAAIE,EAAe,EACnB,IAAK,IAAIC,EAAY,EAAGA,EAAYf,EAAUhb,OAAQ+b,IAAa,CAClE,MAAMtT,EAAUqS,EAAMiB,GAChB/c,EAAQgc,EAAUe,GAClBC,EAAef,EAAYc,GAE3BE,EAAiBH,EACvB,IAAII,EAAgBD,EAEpB,IAAK,MAAMnb,KAAYkI,EAAQrI,gBAAiB,CAC/C,MAAM4I,EAAed,EAAQpN,aAAayF,GACpC2I,EAAeT,EAAQ3N,aAAayF,GACpCyG,EAAK,GAEX2U,EAAgBD,EAChB,IAAK,IAAIxhB,EAAI,EAAGA,EAAIuhB,EAAahc,OAAQvF,IAAK,CAC7C,MAAMuH,EAAQga,EAAavhB,GAC3B8O,EAAa9B,WAAWzF,EAAOuF,GAC/BkC,EAAavB,WAAWlJ,EAAMgD,GAAQuF,GAClCqU,GACHA,EAAWO,UAAUD,IAAiBld,EAAMgD,KAK/C8Z,EAAeI,EAGhB,OAAOlT,EAGR,SAASoS,GAAoBngB,GAC5B,MAAMC,EAAUD,EAAKE,aACrB,OAAID,EAAgBA,EAAQoE,WAErBI,EADUzE,EAAKI,aAAa,YACLK,YClH/B,MAEMqS,KAAEA,GAAFsC,KAAQA,GAARtH,KAAcA,GAAdwH,UAAoBA,GAApBjG,SAA+BA,IAAaxB,EAG5CsT,GAAU,CACf,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,GAqBGC,GAAuC,CACnDC,YAAY,EACZC,WAAW,YA4BIvb,GAAKI,EAAwBib,IAC5C,MAAMhb,OAAegb,GAAkBjb,GAEvC,OAAO/H,EA/DK,OA+DiBua,MAAAA,IAC5B,MAAMnS,EAAOvB,EAASM,UAChBe,EAASrB,EAASsB,YAGxB,IAAK,MAAMO,KAASN,EAAKI,aACxB2a,GAAWtc,EAAU6B,EAAOV,GAC5BU,EAAMqS,SAAUpR,GAASwZ,GAAWtc,EAAU8C,EAAM3B,UAI/CnB,EAASmU,UACdxD,GAAM,CACLxG,cAAe,CAACgG,GAAMtH,GAAMwH,GAAWjG,IACvCqG,YAAY,EACZC,gBAAgB,KAIlBrP,EAAOU,2BAaT,SAASua,GAAWtc,EAAoBgD,EAAsB7B,GAC7D,MAAME,EAASrB,EAASsB,YAClBib,EAAS,GAGTC,EAAWxZ,EAAOR,eACxB,IAAK,IAAIia,EAAY,EAAGA,EAAYD,EAAS1c,OAAQ2c,IAAa,CACjE,MAAM3Z,EAAO0Z,EAASC,GAItB,GADmB3Z,EAAKI,cAAcuF,KAAMC,GAAMA,aAAa8J,GAC/C,SAGhB,MAAMnK,EAAOvF,EAAK8G,UAClB,GAAKvB,IAGDvF,EAAK4Z,aAAa,6BAGlB5Z,EAAK8V,UAET,IAAK,MAAM7d,KAAQsN,EAAKG,iBAAkB,CAEzC,GAAIzN,EAAKuD,cAAcwB,OAAS,EAAG,SAGnC,MAAMM,EAAWrF,EAAKsF,cACtB,GAAID,GAAYA,EAASsc,aAAa,wBAAyB,SAE/D,IAAIC,EAAM5c,EAAmBhF,GAE7B,MAAM6hB,EAAUvU,EAAK8K,WAAarQ,EAAKqQ,WACnChS,EAAQib,YAAejb,EAAQkb,WAAaO,KAC/CD,OAAWF,KAGNE,KAAOJ,IACZA,EAAOI,GAAO,CACb/B,MAAO,GACPiC,WAAY,GACZC,UAAW,GACXC,QAASja,EACTka,aAAS7B,IAIX,MAAM8B,EAAQV,EAAOI,GACrBM,EAAMrC,MAAMvc,KAAKtD,GACjBkiB,EAAMH,UAAUze,KAAKyE,IAKvB,MAAMoa,EAAa5jB,OAAO6jB,OAAOZ,GAAQpZ,OAAO,EAAGyX,MAAAA,KAAYA,EAAM9a,OAAS,GAGxEsd,EAAW,IAAIzgB,IAAUugB,EAAW/T,QAAS8T,GAAUA,EAAMH,YACnE,IAAK,MAAMha,KAAQsa,EAAU,CAC5B,MAAM/U,EAAOvF,EAAK8G,UACGvB,EAAKnF,cAAcuF,KAAMzF,GACtCA,EAAO2F,eAAiBkF,IAAQ/K,IAASE,IAGhDF,EAAKqW,QAAQ9Q,EAAKU,SAKpB,IAAK,MAAMkU,KAASC,EAAY,CAC/B,MAAMH,QAAEA,EAAFD,UAAWA,GAAcG,EAC/BA,EAAMD,QAAUD,EAAQnT,UACxBqT,EAAMJ,WAAaC,EAAUnc,IAAKmC,GAASA,EAAK8G,WAIjD,IAAK,MAAMqT,KAASC,EAAY,CAC/B,MAAMtC,MAAEA,EAAFkC,UAASA,EAATD,WAAoBA,EAApBE,QAAgCA,EAAhCC,QAAyCA,GAAYC,EACrDI,EAAYN,EAAQjT,YAE1B,IAAK,IAAIvP,EAAI,EAAGA,EAAIqgB,EAAM9a,OAAQvF,IAAK,CACtC,MAAM+iB,EAAWR,EAAUviB,GAG3B,IAAIQ,EAAO6f,EAAMrgB,GAFAsiB,EAAWtiB,GAGnBgjB,gBAAgBxiB,IAIdA,ErBVDmI,cAAcuF,KAAMzF,GAAWA,EAAO2F,eAAiBC,EAAaiF,OqBU1D2P,GAAoBziB,MACvCA,EAAO6f,EAAMrgB,GAAKkjB,GAAoB7C,EAAMrgB,KAIzC+iB,IAAaP,IAChBpX,GAASuW,GAAStY,GAAOsY,GAASmB,GAAYC,EAASxT,aACvDjD,GAAmB9L,EAAMmhB,KAI3B,MAAMpT,EAAU6R,GAAeC,GACzBI,EAAiBlS,EAAQ1K,iBAAiB,GAAG5C,WACnDwhB,EAAQU,aAAa5U,GAErBzH,EAAOU,kCACyB6Y,EAAM9a,sBACjCtC,EAAWwd,2BAAwC+B,EAAQ5J,gBAKlE,SAASsK,GAAoB/e,GAC5B,MAAMC,EAAMD,EAAIqK,QAChB,IAAK,MAAMnI,KAAYjC,EAAI8B,gBAC1B9B,EAAIgU,aAAa/R,EAAUjC,EAAIxD,aAAayF,GAAWmI,SAExD,MAAM/N,EAAU2D,EAAI1D,aAEpB,OADID,GAAS2D,EAAIgd,WAAW3gB,EAAQ+N,SAC7BpK,EAGR,SAAS6e,GAAoBziB,GAC5B,IAAK,MAAMoD,KAAapD,EAAKqD,iBAC5B,IAAK,MAAM4E,KAAU7E,EAAU+E,cAC9B,GAAIF,IAAWjI,GAAQiI,EAAO2F,eAAiBkF,GAC9C,SAIH,kBCjOe8P,GAAoBxH,GACnC,MAAMyH,EAAOC,GAAsB1H,GAC7BqB,EAAW,GAKjB,OAJIoG,EAAOE,EAAeC,GAAGvG,EAASnZ,KAAKyf,EAAeC,GACtDH,EAAOE,EAAeE,GAAGxG,EAASnZ,KAAKyf,EAAeE,GACtDJ,EAAOE,EAAeG,GAAGzG,EAASnZ,KAAKyf,EAAeG,GACtDL,EAAOE,EAAeI,GAAG1G,EAASnZ,KAAKyf,EAAeI,GACnD1G,WAkBQqG,GAAsB1H,GACrC,MAAMnW,EAAWC,EAASC,UAAUiW,EAAQhW,YAC5C,IAAIyd,EAAO,EACX,IAAK,MAAMlL,KAAQ1S,EAASG,WAAW+Q,gBAAgBiF,GAAU,CAChE,MAAMnT,EAAS0P,EAAKrB,YACpB,IAAImG,SAAEA,GAAa9E,EAAKyL,gBAGvB3G,GACmB,qBAAnB9E,EAAKS,WACLnQ,aAAkBob,GAClBpb,EAAOgT,iBAAmBoI,EAASC,UAAUC,SAE7C9G,IAAasG,EAAeI,GAGzB1G,EACHoG,GAAQpG,EAILxU,EAAO2F,eAAiBC,EAAaiF,MACxC7N,EAASsB,YAAYgX,gDAAgD5F,EAAKS,eAG5E,OAAOyK,WCnDQW,GAAgBpI,GAC/B,MAAMvF,EAAQuF,EAAQhW,WAChBqe,EAAyB,GAE/B,IAAK,MAAMC,KAAe7N,EAAMM,gBAAgBiF,GAAU,CACzD,MAAMnT,EAASyb,EAAYpN,YACrBjY,EAAOqlB,EAAYtL,UAAY,OAErC,IAAK,MAAMT,KAAQ9B,EAAMmC,eAAe/P,GAAS,CAChD,MAAMP,EAAQiQ,EAAKO,WACfxQ,aAAiB2Q,GAAeV,EAAKS,YAAc/Z,GACtDolB,EAAQngB,KAAKoE,IAKhB,OAAO+b,WCpBQE,GAAiBvI,GAChC,MACM5U,EADWtB,EAASC,UAAUiW,EAAQhW,YACtBG,UAChBuV,EAAQM,EACZhW,WACA+Q,gBAAgBiF,GAChBhT,OAAQuP,GAASA,EAAKrB,cAAgB9P,GACtCZ,IAAK+R,GAASA,EAAKS,WACrB,OAAO5U,MAAMC,KAAK,IAAI7B,IAAIkZ,ICf3B,MAaM8I,GAA8D,CACnE1kB,OAAQ,iBAqBO2kB,GAAQ1d,GACvB,MAAMC,OAAewd,GAAqBzd,GACpC2d,EAAU1d,EAAQ0d,QAExB,IAAKA,EACJ,UAAU9iB,yEAGX,OAAO5C,EA3CK,UA2CiBua,MAAAA,IAC5B,MAAMrS,EAASD,EAAIE,kBAEbud,EAAQC,MAEd,MAAMC,EAAOC,GAAiB5d,GAE9B,IAAK,MAAM6d,KAAcF,EAAKG,oBAAoBriB,OAAQ,CACzD,MAAM6e,EAAauD,EAAWlW,QAC9B,IAAI+S,EAAeJ,EAAWtc,WAAYE,QACpCwc,aAAwBjc,cAC7Bic,EAAe,IAAIjc,YAAYic,IAIhC,MAAOhd,EAAOqgB,GAAUN,EAAQO,YAC/BtD,EACAiD,EAAKM,cAAc3iB,IAAIuiB,KAAgB5jB,EAAUC,KAAKM,UACnC,SAAnBuF,EAAQlH,QAGTyhB,EAAWnc,SAAS4f,GAAU,MAAQ,IAAIvf,YAAYkc,GAAgBA,GAGtE,IAAK,MAAMzS,KAAgB0V,EAAKG,oBAAoBxiB,IAAIuiB,GAAa,CACpE,MAAM1V,EAAeF,EAAaN,QAClClK,EAAe0K,EAAczK,EAAOqgB,GACpC,IAAK,MAAMpkB,KAAQgkB,EAAKO,uBAAuB5iB,IAAI2M,GAIlD,GAHItO,EAAKE,eAAiBgkB,GACzBlkB,EAAK6D,KAAKqgB,EAAYvD,GAEnB3gB,EAAKE,eAAiBygB,EAAY,CACrC3gB,EAAK6D,KAAKyK,EAAcE,GACxB,IAAK,MAAMtP,KAAUc,EAAKuD,cACzBrE,EAAO2E,KAAKyK,EAAcE,WAQzBnI,EAAI+S,UAAUxD,GAAM,CAAExG,cAAe,CAACvB,EAAawB,aAEpD2U,EAAKG,oBAAoB/iB,KAG7BkF,EAAOU,4BAFPV,EAAOiX,oFAmBM0G,GAAiBhf,GAChC,MAAMkf,EAAsB,IAAIljB,EAC1BqjB,EAAgB,IAAInjB,IACpBojB,EAAyB,IAAItjB,EAEnC,IAAK,MAAMqM,KAAQrI,EAASM,UAAUyK,aACrC,IAAK,MAAMhQ,KAAQsN,EAAKG,iBAAkB,CACzC,MAAMxN,EAAUD,EAAKE,aACrB,GAAKD,EAAL,CAEAqkB,EAAcziB,IAAI5B,EAASD,EAAKK,WAEhC,IAAK,MAAM+C,KAAaF,EAAmBlD,GAC1CmkB,EAAoB5iB,IAAItB,EAASmD,GACjCmhB,EAAuBhjB,IAAI6B,EAAWpD,IAKzC,MAAO,CAAEmkB,oBAAAA,EAAqBG,cAAAA,EAAeC,uBAAAA,YCvG9BC,GAAqBxkB,EAAmCykB,EAAQrI,UAC/E,GAAKa,OAAOyH,SAASD,IAAUA,EAAQ,GAAMA,GAAS,EACrD,UAAUzjB,kDAGX,MAAM2jB,EAAc3kB,EAAKI,aAAa,YAAaK,WAC7CmkB,EAAW5kB,EAAK0F,gBAAgB0C,OAAQ/J,GAASA,EAAKwZ,WAAW,aAAa9S,OAI9E9E,EAAU,IAAI4E,YAAuB,EAAX+f,GAC1BC,EAAa,IAAIjc,aAAwB,EAAXgc,GAC9BE,EAAa,IAAIlc,aAAwB,EAAXgc,GAC9BG,EAAY,IAAIjgB,YAAuB,EAAX8f,GAC5BI,EAAY,IAAIlgB,YAAuB,EAAX8f,GAElC,IAAK,IAAIplB,EAAI,EAAGA,EAAImlB,EAAanlB,IAAK,CACrCylB,GAAejlB,EAAMR,EAAG,UAAWqlB,GACnCI,GAAejlB,EAAMR,EAAG,SAAUulB,GAIlC,IAAK,IAAIrlB,EAAI,EAAGA,EAAe,EAAXklB,EAAcllB,IAAKO,EAAQP,GAAKA,EACpDO,EAAQ0F,KAAK,CAAC7C,EAAGC,IAAO8hB,EAAW/hB,GAAK+hB,EAAW9hB,IAAM,EAAI,GAG7D,IAAK,IAAIrD,EAAI,EAAGA,EAAIO,EAAQ8E,OAAQrF,IACnColB,EAAWplB,GAAKmlB,EAAW5kB,EAAQP,IACnCslB,EAAUtlB,GAAKqlB,EAAU9kB,EAAQP,IAGlCwlB,GAAellB,EAAMR,EAAG,UAAWslB,GACnCI,GAAellB,EAAMR,EAAG,SAAUwlB,GAInC,IAAK,IAAIxlB,EAAIolB,EAAc,EAAJplB,EAAQilB,EAAOjlB,IAAK,CAC1C,MAAM2lB,EAAUnlB,EAAKI,yBAAwBZ,EAAI,IAC3CoZ,EAAS5Y,EAAKI,wBAAuBZ,EAAI,IAC/CQ,EAAK4X,yBAAwBpY,EAAI,GAAK,MACtCQ,EAAK4X,wBAAuBpY,EAAI,GAAK,MACA,IAAjC2lB,EAAQhd,cAAcpD,QAAcogB,EAAQ7T,UACZ,IAAhCsH,EAAOzQ,cAAcpD,QAAc6T,EAAOtH,WAWhD,SAAmCtR,GAElC,IAqHD,SAAyBA,GACxB,MAAMqO,EAAarO,EACjB0F,gBACA0C,OAAQ/J,GAASA,EAAKwZ,WAAW,aACjCjS,IAAKvH,GAAS2B,EAAKI,aAAa/B,IAC5B+mB,EAAW/W,EAAWzI,IAAK9C,GAAMA,EAAEkO,iBACnCqU,EAAWhX,EAAWzI,IAAK9C,GAAMA,EAAEgD,oBACzC,OAAkC,QAAvBlE,IAAIwjB,GAAUhkB,MAAyC,IAA3B,IAAIQ,IAAIyjB,GAAUjkB,KA5HpDkkB,CAAgBtlB,GAAO,OAE5B,MAAM2kB,EAAc3kB,EAAKI,aAAa,YAAaK,WAC7CmkB,EAAW5kB,EAAK0F,gBAAgB0C,OAAQ/J,GAASA,EAAKwZ,WAAW,aAAa9S,OAE9EwgB,EAAoBvlB,EAAKI,aAAa,aACtColB,EAAgBD,EAAkBlhB,WAClCohB,EAAgBF,EAAkBzf,mBAClC4f,EAAaH,EAAkBvU,gBAC/B2U,EAA0BD,EAAaD,OAAgBrF,EACvDwF,EAAQF,EAAa1W,EAAU6W,oBAAoB,EAAGJ,GAAiBxI,OAAO6I,QAC9ElN,EAAS,IAAI9T,YAAuB,EAAX8f,GAAcmB,KAAK,GAC5CZ,EAAUK,EAAcjhB,MAAM,EAAc,EAAXqgB,GAAcmB,KAAK,GAE1D,IAAK,IAAIvmB,EAAI,EAAGA,EAAImlB,EAAanlB,IAAK,CACrCylB,GAAejlB,EAAMR,EAAG,SAAUoZ,GAClCqM,GAAejlB,EAAMR,EAAG,UAAW2lB,EAASQ,GAE5C,IAAIK,EAAaC,GAAId,EAASQ,GAC9B,GAAmB,IAAfK,EAAJ,CAGA,GAAI7jB,KAAKa,IAAI,EAAIgjB,GAAcJ,EAC9B,IAAK,IAAIlmB,EAAI,EAAGA,EAAIylB,EAAQpgB,OAAQrF,IACnC,GAAIgmB,EAAY,CACf,MAAMQ,EAAWlX,EAAUmX,oBAAoBhB,EAAQzlB,GAAKsmB,EAAYP,GACxEN,EAAQzlB,GAAKsP,EAAU6W,oBAAoBK,EAAUT,QAErDN,EAAQzlB,IAAMsmB,EASjB,GAJAA,EAAaC,GAAId,EAASQ,GAItBD,GAA6B,IAAfM,EACjB,IAAK,IAAItmB,EAAIylB,EAAQpgB,OAAS,EAAGrF,GAAK,EAAGA,IACxC,GAAIylB,EAAQzlB,GAAK,EAAG,CACnBylB,EAAQzlB,IAAMsP,EAAUmX,oBAAoB,EAAIH,EAAYP,GAC5D,MAMH,IAAK,IAAI/lB,EAAIylB,EAAQpgB,OAAS,EAAGrF,GAAK,EAAGA,IACrB,IAAfylB,EAAQzlB,KACXkZ,EAAOlZ,GAAK,GAIdwlB,GAAellB,EAAMR,EAAG,SAAUoZ,GAClCsM,GAAellB,EAAMR,EAAG,UAAW2lB,EAASQ,KA/D7CS,CAA0BpmB,GAoE3B,SAASilB,GACRjlB,EACAqmB,EACAC,EACApnB,EACAymB,GAEA,IAAIR,EACJ,MAAM7Y,EAAK,CAAC,EAAG,EAAG,EAAG,GACrB,IAAK,IAAI9M,EAAI,EAAI2lB,EAAUnlB,EAAKI,gBAAgBkmB,KAAU9mB,KAAOA,IAAK,CACrE2lB,EAAQ3Y,WAAW6Z,EAAa/Z,GAChC,IAAK,IAAI5M,EAAI,EAAGA,EAAI,EAAGA,IAErBR,EAAW,EAAJM,EAAQE,GADZimB,EACiB3W,EAAUmX,oBAAoB7Z,EAAG5M,GAAIimB,GAErCrZ,EAAG5M,GAI1B,OAAOR,EAIR,SAASgmB,GACRllB,EACAqmB,EACAC,EACAlE,EACAuD,GAEA,IAAIR,EACJ,MAAM7Y,EAAK,CAAC,EAAG,EAAG,EAAG,GACrB,IAAK,IAAI9M,EAAI,EAAI2lB,EAAUnlB,EAAKI,gBAAgBkmB,KAAU9mB,KAAOA,IAAK,CACrE,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAErB4M,EAAG5M,GADAimB,EACK3W,EAAU6W,oBAAoBzD,EAAW,EAAJ5iB,EAAQE,GAAIimB,GAEjDvD,EAAW,EAAJ5iB,EAAQE,GAGzBylB,EAAQlY,WAAWoZ,EAAa/Z,IAKlC,SAAS2Z,GAAI7D,EAAoBuD,GAChC,IAAIM,EAAM,EACV,IAAK,IAAIzmB,EAAI,EAAGA,EAAI4iB,EAAOrd,OAAQvF,IAEjCymB,GADGN,EACI3W,EAAU6W,oBAAoBzD,EAAO5iB,GAAImmB,GAEzCvD,EAAO5iB,GAGhB,OAAOymB,ECxKR,MAOMM,GAAa,CAACvJ,UAAWD,WAAYD,aAErC0J,YAAEA,GAAFC,SAAeA,GAAfC,MAAyBA,GAAzBC,QAAgCA,IAAYlP,EAAiBmP,WAC7DC,GAAe,CAACL,GAAaC,GAAUC,IAwBhCI,GAA+C,CAC3D1T,QAAS,KACTiB,mBAAoB,OACpBL,iBAAkB,GAClBC,eAAgB,GAChBE,iBAAkB,GAClBD,cAAe,EACf6S,eAAgB,EAChB3S,gBAAiB,GACjB4S,kBAAkB,GAebC,GAAW,CAAC9gB,EAA4B2gB,MAC7C,MAAM1gB,OAAe0gB,GAAsB3gB,GAE3C,OAAO/H,EA7DK,WA6DiBua,MAAAA,IAC5B,MAAMrS,EAASD,EAAIE,YACbC,EAAOH,EAAId,UAKjB,IAAI2hB,EAHJ7gB,EAAIkN,gBAAgBC,GAAqBgB,aAAY,GAIlB,UAA/BpO,EAAQiO,qBACX6S,EAAgBC,GAyXnB,SAAsBC,GACrB,MAAMC,EAASD,EAAO,GACtB,IAAK,MAAMngB,KAAQmgB,EAClBhgB,GAAIigB,EAAOjgB,IAAKigB,EAAOjgB,IAAKH,EAAKG,KACjCD,GAAIkgB,EAAOlgB,IAAKkgB,EAAOlgB,IAAKF,EAAKE,KAElC,OAAOkgB,EA/X4BC,CAAa9gB,EAAKwJ,aAAapK,IAAI2hB,OAIrE,IAAK,MAAMja,KAAQjH,EAAId,UAAUyK,aAAc,CACX,SAA/B5J,EAAQiO,qBACX6S,EAAgBC,GAAiBI,GAA8Bja,KAG5D4Z,GAAiB9gB,EAAQgN,QAAQM,KAAK,cACzC8T,GAAqBnhB,EAAKiH,EAAM4Z,GAChCO,GAAuBna,EAAM,EAAI4Z,EAAc5b,QAGhD,IAAK,MAAMtL,KAAQsN,EAAKG,iBAAkB,CACzCia,GAAkBrhB,EAAKrG,EAAMknB,EAAgB9gB,GAC7C,IAAK,MAAMlH,KAAUc,EAAKuD,cACzBmkB,GAAkBrhB,EAAKnH,EAAQgoB,EAAgB9gB,UAK5CC,EAAI+S,UACTxD,GAAM,CAAExG,cAAe,CAACvB,EAAawB,SAAUxB,EAAa2B,KAAM3B,EAAa0B,YAC/EE,GAAM,CAAEL,cAAe,CAACvB,EAAawB,SAAUxB,EAAa0B,SAAU1B,EAAa2B,SAGpFlJ,EAAOU,gCAIT,SAAS0gB,GACRrhB,EACArG,EACAknB,EACA9gB,GAEA,MAAME,EAASD,EAAIE,YAEnB,IAAK,MAAMV,KAAY7F,EAAK0F,gBAAiB,CAC5C,IAAKU,EAAQgN,QAAQM,KAAK7N,GAAW,SAErC,MAAMyI,EAAetO,EAAKI,aAAayF,IACjC8hB,KAAEA,EAAFC,KAAQA,GAASC,GAAwBhiB,EAAUyI,EAAchI,EAAQF,GAE/E,IAAKwhB,EAAM,SACX,GAAID,EAAO,GAAKA,EAAO,GAAI,UAAU3mB,yCACrC,GAAIsN,EAAaqF,oBAAsBgU,EAAO,EAAG,SAEjD,MAAMnZ,EAAeF,EAAaN,QAGlC,GAAiB,aAAbnI,EAAyB,CAC5B,MAAMyF,EAAQ4b,EAAc5b,MACtB8N,EAAkB,GAExBpZ,aAAgBM,EACbuI,GAAOuQ,EAAW0O,GAAcZ,MtBkoBVpe,EsBjoBVsQ,GtBkoBZ,IAD2B5X,EsBjoBJ,CAAC,EAAI8J,EAAO,EAAIA,EAAO,EAAIA,ItBkoB3C,GACXxC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKtH,EAAE,GACXsH,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAMtH,EAAE,GACZsH,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,GsBhpBT,IAAK,IAAItJ,EAAI,EAAG8M,EAAW,CAAC,EAAG,EAAG,GAAIC,EAAKiC,EAAa/N,WAAYjB,EAAI+M,EAAI/M,IAC3EgP,EAAahC,WAAWhN,EAAG8M,GAC3BkC,EAAavB,WAAWzN,EAAGkM,GAAcY,EAAIA,EAAI8M,IAKnD2O,GAAkBvZ,EAAcoZ,EAAMD,GACtC3nB,EAAK6D,KAAKyK,EAAcE,GtBwnBnB,IAAqB1F,EAAKtH,EsBhnBhC,GAJI4E,EAAQ4gB,kBAAoBhnB,EAAKI,aAAa,cACjDokB,GAAqBxkB,EAAMoc,UAI3Bpc,aAAgBM,GAChBN,EAAKE,cACLF,EAAKqD,iBAAiB0B,QACtB/E,EAAKqD,iBAAiB,GAAI5C,WAAa,MACtC,CACD,MAAMR,EAAUD,EAAKE,aACrBD,EAAQuE,SAAS,IAAIK,YAAY5E,EAAQoE,cAK3C,SAAS8iB,GAAiBa,GACzB,MAAM5gB,IAAEA,EAAFD,IAAOA,GAAQ6gB,EAIf1c,EAAQnJ,KAAKgF,KACjBA,EAAI,GAAKC,EAAI,IAAM,GACnBD,EAAI,GAAKC,EAAI,IAAM,GACnBD,EAAI,GAAKC,EAAI,IAAM,GAUrB,MAAO,CAAEC,OANY,CACpBD,EAAI,IAAMD,EAAI,GAAKC,EAAI,IAAM,EAC7BA,EAAI,IAAMD,EAAI,GAAKC,EAAI,IAAM,EAC7BA,EAAI,IAAMD,EAAI,GAAKC,EAAI,IAAM,GAGbkE,MAAAA,GAIlB,SAASkc,GAAqBnhB,EAAeiH,EAAY4Z,GACxD,MAAMe,EAAkBH,GAAcZ,GACtC,IAAK,MAAMjf,KAAUqF,EAAKnF,cAAe,CACxC,KAAMF,aAAkBigB,GAAO,SAE/B,MAAMC,EAAelgB,EAAOE,cAAcC,OAAQuF,GAAMA,aAAa8J,GAC/DhR,EAAa0hB,EAAaza,KAAMwJ,GAAY2P,GAAanX,SAASwH,EAAQkR,kBAC1EC,EAAepgB,EAAOR,eAAe1C,OAAS,EAE9C8T,EAAO5Q,EAAO4V,UACpB,GAAIhF,EAAM,CACT5Q,EAAOqgB,QAAQC,GAAc1P,EAAMqO,IACnC,SAGD,MAAMpJ,EAAQ7V,EAAO0Z,aAA4B,2BACjD,GAAI7D,EAAO,CACV7V,EAAOoW,aAAa,0BAA2BmK,GAAe1K,EAAOoJ,IACrE,SAGD,IAAIuB,EACAJ,GAAgB5hB,GACnBgiB,EAAapiB,EAAIkB,WAAW,IAAI6W,QAAQ9Q,GACxCrF,EAAON,SAAS8gB,GAAYrK,QAAQ,MACpC+J,EACE/f,OAAQ8O,GAAYA,EAAQkR,kBAAoBzB,IAChD9f,QAASqQ,GAAYA,EAAQwR,cAAcD,KAE7CA,EAAaxgB,EAGd,MAAM0gB,EAAaF,EAAW1Z,YAC9BG,GAAayZ,EAAYA,EAAYV,GACrCQ,EAAWjgB,UAAUmgB,IAKvB,SAASJ,GAAc1P,EAAYqO,GAClCrO,EAAOA,EAAK7K,QACZ,MAAMia,EAAkBH,GAAcZ,GAChC0B,EAAsB/P,EAAKgQ,yBAA0B7a,QACrD8a,EAAM,GACZ,IAAK,IAAItpB,EAAI,EAAGkF,EAAQkkB,EAAoBnoB,WAAYjB,EAAIkF,EAAOlF,IAClEopB,EAAoBpc,WAAWhN,EAAGspB,GAClC5Z,GAAa4Z,EAAKA,EAAKb,GACvBW,EAAoB3b,WAAWzN,EAAGspB,GAEnC,OAAOjQ,EAAKkQ,uBAAuBH,GAIpC,SAASJ,GAAe1K,EAAsBoJ,aAC7C,IAAKpJ,EAAM1d,aAAa,iBAAmB0d,EAAM1d,aAAa,cAAgB0d,EAAM1d,aAAa,SAChG,OAAO0d,EAIR,MAAMkL,YADNlL,EAAQA,EAAM9P,SACoB5N,aAAa,uBAAnB6oB,EAAmCjb,QACzDkb,WAAmBpL,EAAM1d,aAAa,oBAAnB+oB,EAAgCnb,QACnDob,WAAgBtL,EAAM1d,aAAa,iBAAnBipB,EAA6Brb,QAC7Csb,EAAON,GAAuBE,GAAoBE,EAElDG,EAAa,CAAC,EAAG,EAAG,GACpBC,EAAa,CAAC,EAAG,EAAG,EAAG,GACvBC,EAAa,CAAC,EAAG,EAAG,GAEpB7hB,EAAI,CAAC,EAAG,EAAG,GACX6W,EAAI,CAAC,EAAG,EAAG,EAAG,GACdC,EAAI,CAAC,EAAG,EAAG,GAGXgL,EAAiB,CACtB,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,GAGJzB,EAAkBH,GAAcZ,GAEtC,IAAK,IAAI1nB,EAAI,EAAGkF,EAAQ4kB,EAAI7oB,WAAYjB,EAAIkF,EAAOlF,IAClDwP,EAAU2a,QACTX,EAAuBA,EAAoBxc,WAAWhN,EAAGoI,GAAc2hB,EACvEL,EAAoBA,EAAiB1c,WAAWhN,EAAGif,GAAc+K,EACjEJ,EAAiBA,EAAc5c,WAAWhN,EAAGkf,GAAc+K,EAC3DC,GAGDxa,GAAawa,EAAgBA,EAAgBzB,GAE7CjZ,EAAU4a,UAAUF,EAAgB9hB,EAAG6W,EAAGC,GAEtCsK,GAAqBA,EAAoB/b,WAAWzN,EAAGoI,GACvDshB,GAAkBA,EAAiBjc,WAAWzN,EAAGif,GACjD2K,GAAeA,EAAcnc,WAAWzN,EAAGkf,GAOhD,OAJIsK,GAAqBlL,EAAMlG,aAAa,cAAeoR,GACvDE,GAAkBpL,EAAMlG,aAAa,WAAYsR,GACjDE,GAAetL,EAAMlG,aAAa,QAASwR,GAExCtL,EAIR,SAAS2J,GAAuBna,EAAYhC,GAC3C,IAAK,MAAMtL,KAAQsN,EAAKG,iBAAkB,CACzC,IAAIpI,EAAWrF,EAAKsF,cACpB,IAAKD,EAAU,SAEf,IAAI2iB,EAAS3iB,EAASsc,aAAqB,yBACtCqG,GAAUA,EAAO6B,sBAAwB,IAG9C7B,EAASA,EAAOha,QAAQ8b,mBAAmB9B,EAAO6B,qBAAuBve,GACzEjG,EAAWA,EAAS2I,QAAQqQ,aAAa,uBAAwB2J,GACjEhoB,EAAKugB,YAAYlb,KAYnB,SAAS0iB,GAAkB3kB,EAAqBwkB,EAA6BD,GAC5E,MAAMrjB,EAAW,IAAIsjB,EAAKxkB,EAAUiB,WAAYU,QAE1CglB,EAAWxD,GAAW7W,SAASkY,GAAQ,EAAI,EAC3CoC,EAAYrC,EAAOoC,EACnBE,EAAuC,EAAzBrC,EAAKsC,kBAAwBH,EAE3Cze,EAAQnJ,KAAKI,IAAI,EAAGynB,GAAa,EACjCG,EAAKF,EAAcD,EACnBI,EAAK,EAAIJ,EAAYC,EAE3B,IAAK,IAAIzqB,EAAI,EAAG6qB,EAAK,EAAG/d,EAAe,GAAI9M,EAAI4D,EAAU3C,WAAYjB,IAAK,CACzE4D,EAAUoJ,WAAWhN,EAAG8M,GACxB,IAAK,IAAI5M,EAAI,EAAGA,EAAI4M,EAAGvH,OAAQrF,IAAK,CAEnC,IAAIjB,EAAQ0D,KAAKwa,MAAMxa,KAAKa,IAAIsJ,EAAG5M,IAAM4L,GAGzC7M,EAASA,GAAS0rB,EAAO1rB,GAAS2rB,EAGlC9lB,EAAS+lB,KAAQ5rB,EAAQ0D,KAAKmoB,KAAKhe,EAAG5M,KAKxC0D,EAAUoB,SAASF,GAAUqI,eAAc,GAAM4d,WAAU,GAG5D,SAAS1C,GACRhiB,EACAzC,EACAkD,EACAF,GAEA,MAAMgB,EAAMhE,EAAUonB,iBAAiB,IACjCrjB,EAAM/D,EAAUqnB,iBAAiB,IAEvC,IAAI9C,EACAC,EAEJ,GAAiB,aAAb/hB,EACH8hB,EAAOvhB,EAAQ4N,iBACf4T,EAAOD,GAAQ,EAAI3K,UAAYD,mBACR,WAAblX,GAAsC,YAAbA,EACnC8hB,EAAOvhB,EAAQ6N,eACf2T,EAAOD,GAAQ,EAAI3K,UAAYD,mBACrBlX,EAASgS,WAAW,UAC9B8P,EAAOvhB,EAAQ8N,cACf0T,EAAOD,GAAQ,EAAI9K,WAAahY,oBACtBgB,EAASgS,WAAW,aAAc,CAC5C,GAAIzQ,EAAIsG,KAAMlM,GAAMA,EAAI,IAAM2F,EAAIuG,KAAMlM,GAAMA,EAAI,GAEjD,OADA8E,EAAOiX,2BAA0B1X,0BAC1B,CAAE8hB,MAAO,GAEjBA,EAAOvhB,EAAQ+N,iBACfyT,EAAOD,GAAQ,EAAI9K,WAAahY,oBACtBgB,EAASgS,WAAW,WAM9B,OALA8P,EAAOxlB,KAAKgF,OAAO/D,EAAUmZ,OAAO,MAAQ,IAAM,EAAI,GACtDqL,EAAOD,GAAQ,EAAI9K,WAAahY,YAC5BzB,EAAUuQ,mBAAqBgU,EAAO,GACzCvkB,EAAUoB,SAAS,IAAIojB,EAAKxkB,EAAUiB,aAEhC,CAAEsjB,MAAO,MACN9hB,EAASgS,WAAW,YAAa,CAC3C,GAAIzQ,EAAIsG,KAAMlM,GAAMA,EAAI,IAAM2F,EAAIuG,KAAMlM,GAAMA,EAAI,GAEjD,OADA8E,EAAOiX,2BAA0B1X,0BAC1B,CAAE8hB,MAAO,GAEjBA,EAAOvhB,EAAQ2gB,eACfa,EAAOD,GAAQ,EAAI9K,WAAahY,qBACtBgB,EAASgS,WAAW,KAU9B,UAAU7W,yCAAwC6E,OATlD,GAAIuB,EAAIsG,KAAMlM,GAAMA,GAAK,IAAM2F,EAAIuG,KAAMlM,GAAMA,EAAI,GAElD,OADA8E,EAAOiX,2BAA0B1X,2BAC1B,CAAE8hB,MAAO,GAEjBA,EAAOvhB,EAAQgO,gBACfwT,EACIA,EADGxgB,EAAIsG,KAAMlM,GAAMA,EAAI,GAChBmmB,GAAQ,EAAI3K,UAAYD,WACxB4K,GAAQ,EAAI9K,WAAahY,aAKrC,MAAO,CAAE8iB,KAAAA,EAAMC,KAAAA,GAGhB,SAASL,GAA8Bja,GACtC,MAAMod,EAAwB,GACxBC,EAAgC,GACtC,IAAK,MAAM3qB,KAAQsN,EAAKG,iBAAkB,CACzC,MAAMrK,EAAYpD,EAAKI,aAAa,YAChCgD,GAAWsnB,EAAUpnB,KAAKF,GAC9B,IAAK,MAAMlE,KAAUc,EAAKuD,cAAe,CACxC,MAAMH,EAAYlE,EAAOkB,aAAa,YAClCgD,GAAWunB,EAAkBrnB,KAAKF,IAIxC,GAAyB,IAArBsnB,EAAU3lB,OACb,UAAU/D,iDAGX,MAAMiG,EAAO2jB,GAAiBF,EAAW,GAMzC,GAAIC,EAAkB5lB,OAAS,EAAG,CACjC,MAAQqC,IAAKyjB,EAAQ1jB,IAAK2jB,GAAWF,GAAiBD,EAAmB,GACzEvjB,GAAIH,EAAKG,IAAKH,EAAKG,IAAKA,GAAIyjB,EAAQvf,GAAMuf,EAAQA,EAAQ,GAAI,CAAC,EAAG,EAAG,KACrE1jB,GAAIF,EAAKE,IAAKF,EAAKE,IAAKA,GAAI2jB,EAAQxf,GAAMwf,EAAQA,EAAQ,GAAI,CAAC,EAAG,EAAG,KAGtE,OAAO7jB,EAIR,SAAS2jB,GAA4BznB,EAAuBc,GAC3D,MAAMmD,EAAgB,IAAI5D,MAAMS,GAAa8hB,KAAK3J,UAC5CjV,EAAgB,IAAI3D,MAAMS,GAAa8hB,MAAM3J,UAE7C2O,EAAmB,GACnBC,EAAmB,GAEzB,IAAK,MAAM9a,KAAY/M,EAAW,CACjC+M,EAASsa,iBAAiBO,GAC1B7a,EAASua,iBAAiBO,GAC1B,IAAK,IAAIxrB,EAAI,EAAGA,EAAIyE,EAAazE,IAChC4H,EAAI5H,GAAK2C,KAAKiF,IAAIA,EAAI5H,GAAIurB,EAAOvrB,IACjC2H,EAAI3H,GAAK2C,KAAKgF,IAAIA,EAAI3H,GAAIwrB,EAAOxrB,IAInC,MAAO,CAAE4H,IAAAA,EAAKD,IAAAA,GAiBf,SAAS2gB,GAAc1O,GACtB,OtBuqBoD5X,EsBvqBqB4X,EAAU/R,OtBgrB9E4jB,GAPAvoB,GAF4CwoB,EsBvqBU,CAAC,EAAG,EAAG,EAAG,ItByqB1D,KAINC,EAAKzoB,EAAIA,GAIT0oB,EAAK1oB,GAHL2oB,GAJAjgB,EAAI8f,EAAE,IAIG9f,GAITkgB,EAAK5oB,GAHL6oB,GAJAlgB,EAAI6f,EAAE,IAIG7f,GAKTmgB,EAAKpgB,EAAImgB,EAETE,GAVA7f,EAAIsf,EAAE,IAUGC,EACTO,EAAK9f,EAAIyf,EACTM,EAAK/f,EAAI2f,EAETK,GAnBkDlN,EsBvqBoC,CAC1FtF,EAAU9N,MACV8N,EAAU9N,MACV8N,EAAU9N,QtBurBC,GACPugB,EAAKnN,EAAE,IApBgC5V,EsBvqBR,ItB4rB/B,IAAM,IATNgjB,EAAK1gB,EAAIigB,IAETU,EAAK1gB,EAAIkgB,MAITS,EAAKtN,EAAE,IAIX5V,EAAI,IAAMsiB,EAAKO,GAAMK,EACrBljB,EAAI,IAAMwiB,EAAKI,GAAMM,EACrBljB,EAAI,GAAK,EACTA,EAAI,IAAMsiB,EAAKO,GAAMC,EACrB9iB,EAAI,IAAM,GAAKmiB,EAAKc,IAAOH,EAC3B9iB,EAAI,IAAM0iB,EAAKC,GAAMG,EACrB9iB,EAAI,GAAK,EACTA,EAAI,IAAMwiB,EAAKI,GAAMG,EACrB/iB,EAAI,IAAM0iB,EAAKC,GAAMI,EACrB/iB,EAAI,KAAO,GAAKmiB,EAAKa,IAAOD,EAC5B/iB,EAAI,IAAM,EACVA,EAAI,IAAMtH,EAAE,GACZsH,EAAI,IAAMtH,EAAE,GACZsH,EAAI,IAAMtH,EAAE,GACZsH,EAAI,IAAM,EACHA,EArCF,IAAsCA,EAAKoiB,EAAG1pB,EAAGkd,EAElDhc,EACA0I,EACAC,EACAO,EACAuf,EACAE,EACAE,EACAN,EACAG,EACAE,EACAQ,EACAN,EACAO,EACAN,EACAC,EACAC,EACAK,EACAJ,EACAC,EuBzpCOI,MAAAA,GAA8D,CAAEC,MAAO,QA2BvEC,GAAWhmB,IACvB,MAAMC,OAAe6lB,GAAqB9lB,GACpC2d,EAAU1d,EAAQ0d,QAExB,IAAKA,EACJ,UAAU9iB,yEAGX,OAAO5C,EAjCK,UAiCiBua,MAAAA,UACtB1T,EAASmU,UACdyK,GAAQ,CACPC,QAASA,EACT5kB,OAAQ,SAET+nB,GAAS,CAGR7T,QAA2B,WAAlBhN,EAAQ8lB,MAAqB,KAAO,8CAC7ClY,iBAAkB,GAClBG,iBAAkB,GAClBD,cAAe,EACfD,eAAgB,KAIlBhP,EACEsO,gBAAgB6Y,GAChB5X,aAAY,GACZC,kBAAkB,CAClBZ,OACmB,WAAlBzN,EAAQ8lB,MACLE,EAAsB1X,cAAc2X,SACpCD,EAAsB1X,cAAc4X,YCzDtCC,GAAmD,YAUzCC,GAAWrmB,EAA8BomB,IAIxD,YAFqBA,GAAwBpmB,GAEtC/H,EAnBK,aAmBiBua,MAAAA,IAC5B,MAAMrS,EAASD,EAAIE,YAMnB,IAJuBF,EACrBd,UACAknB,qBACA7mB,IAAK8mB,GAAQA,EAAIC,eACCjd,SAAS,uCAE5B,YADApJ,EAAOiX,+EAIR,MAAMqP,EAAevmB,EAAIkN,gBAAgBsZ,GACnCC,EAAgBzmB,EAAIkN,gBAAgBwZ,GACpCC,EAAqB3mB,EAAIkN,gBAAgB0Z,GAEzCC,EAAgB,IAAItrB,IAE1B,IAAK,MAAMyD,KAAYgB,EAAId,UAAUC,gBAAiB,CACrD,MAAM2nB,EAAY9nB,EAASsc,aAAoC,uCAC/D,IAAKwL,EAAW,SAGhB,MAAMC,EAAWN,EACfO,iBACAC,kBAAkB,GAClBC,uBAAuBJ,EAAUK,qBAGnCN,EAAc3rB,IAAI4rB,EAAUM,gCAC5BP,EAAc3rB,IAAI8D,EAASqoB,uBAC3BR,EAAc3rB,IAAI8D,EAASsoB,+BAO3BtoB,EACEuoB,mBAAmBT,EAAUU,oBAC7BC,kBAAkB,GAClBC,mBAAmB,GACnB1P,aAAa,oBAAqBuO,EAAaoB,YAAYC,OAAO,MAClE5P,aAAa,yBAA0B+O,GAGzC,MAAMc,EAAiBf,EAAUgB,oBAC7BD,IACH7oB,EAAS+oB,oBAAoBF,GAC7B7oB,EAASgpB,0BAA2BC,KAAKnB,EAAUoB,0BAIpD,MAAMC,EAAYrB,EAAUM,+BAC5B,GAAIe,EAAW,CAEd,MAAMC,EAAgBtB,EAAUuB,mCAC1BC,EAAkBtoB,EAAIuoB,sBACtB5vB,EAAewvB,EAAWG,EAAiB,CAACtvB,EAAQG,EAAGE,KAC5DL,EAAOwC,IAAIrC,EAAGE,EAAG,EAAG,OAErB0tB,EAASyB,mBAAmBF,GAC5BvB,EAAS0B,wBAAwBH,GACjCvB,EAAS2B,yBAA0BT,KAAKG,GACxCrB,EAAS4B,8BAA+BV,KAAKG,GAG7C,MAAMQ,EAAmB9B,EAAU+B,sBAC7BC,EAAoB9oB,EAAIuoB,sBACxB5vB,EAAewvB,EAAWW,EAAmB,CAAC9vB,EAAQG,EAAGE,KAE9D,MAAM0vB,EAAY,IAAMjtB,KAAKwa,MAAMtd,EAAOsC,IAAInC,EAAGE,EAAG,GAAKuvB,GACzD5vB,EAAOwC,IAAIrC,EAAGE,EAAG,EAAG,GACpBL,EAAOwC,IAAIrC,EAAGE,EAAG,EAAG0vB,GACpB/vB,EAAOwC,IAAIrC,EAAGE,EAAG,EAAG,GACpBL,EAAOwC,IAAIrC,EAAGE,EAAG,EAAG,OAErB2F,EAASgqB,4BAA4BF,GACrC9pB,EAASiqB,kCAAmChB,KAAKG,QAEjDrB,EAASG,uBAAuBJ,EAAUK,qBAC1CnoB,EAAS0oB,mBAAmB,EAAIZ,EAAU+B,uBAI3C7pB,EAASgZ,aAAa,sCAAuC,MAI9D2O,EAAmB1b,UAGnB,IAAK,MAAMie,KAAOrC,EACbqC,GAAoC,IAA7BA,EAAIpnB,cAAcpD,QAAcwqB,EAAIje,UAGhDhL,EAAOU,iCCxHT,MAMMwoB,GAAiC,YASvBC,GAAOtpB,EAA0BqpB,IAIhD,YAFqBA,GAAoBrpB,GAElC/H,EAnBK,SAmBkBiI,IAC7B,MAAMC,EAASD,EAAIE,YACbyB,EAAU,IAAI7G,IAEpB,IAAK,MAAMmM,KAAQjH,EAAId,UAAUyK,aAChC,IAAK,MAAMhQ,KAAQsN,EAAKG,iBAAkB,CACzC,MAAMxN,EAAUD,EAAKE,aACrB,IAAKD,EAAS,SAEd,MAAMyvB,EAAiB1vB,EAAKI,aAAa,YAAaK,WAGtD,IAAK,MAAM6N,KAAgBtO,EAAKqD,iBAC/BrD,EAAK6D,KAAKyK,EAAcqhB,GAAgBrhB,EAAcrO,EAASqG,EAAQ0B,IAG7B,IAAtCsG,EAAanG,cAAcpD,QAAcuJ,EAAagD,UAI3D,IAAK,MAAMpS,KAAUc,EAAKuD,cACzB,IAAK,MAAM+K,KAAgBpP,EAAOmE,iBACjCnE,EAAO2E,KAAKyK,EAAcqhB,GAAgBrhB,EAAcrO,EAASqG,EAAQ0B,IAG/B,IAAtCsG,EAAanG,cAAcpD,QAAcuJ,EAAagD,UAI5D,MAAM2O,EAAiBjgB,EAAKI,aAAa,YAAaK,WACtD6F,EAAOU,iBAAkBnE,EAAc6sB,EAAgBzP,gBAGvDjgB,EAAK4gB,WAAW,MACqB,IAAjC3gB,EAAQkI,cAAcpD,QAAc9E,EAAQqR,UAIlDhL,EAAOU,6BAIT,SAAS2oB,GACRrhB,EACArO,EACAqG,EACA0B,GAEA,GAAIA,EAAQ3G,IAAIiN,IAAiBtG,EAAQrG,IAAI2M,GAAejN,IAAIpB,GAE/D,OADAqG,EAAOU,kDAAmDsH,EAAa8J,eAChEpQ,EAAQrG,IAAI2M,GAAe3M,IAAI1B,GAGvC,MAAMuO,EAAeF,EAAaN,QAC5B4hB,EAAYthB,EAAajK,WAAY6Y,YAC3C1O,EAAahK,SAAS,IAAIorB,EAAU3vB,EAAQQ,WAAa6N,EAAapK,mBAEtE,MAAMoI,EAAe,GACrB,IAAK,IAAI9M,EAAI,EAAGA,EAAIS,EAAQQ,WAAYjB,IACvCgP,EAAavB,WAAWzN,EAAG8O,EAAa9B,WAAWvM,EAAQ4vB,UAAUrwB,GAAI8M,IAM1E,OAHKtE,EAAQ3G,IAAIiN,IAAetG,EAAQnG,IAAIyM,EAAc,IAAInN,KAC9D6G,EAAQrG,IAAI2M,GAAezM,IAAI5B,EAASuO,GAEjCA,ECnFR,MAQMshB,GAA6C,CAClDviB,WAAW,YAcIwiB,GAAQ5pB,EAA2B2pB,IAClD,MAAM1pB,OAAe0pB,GAAqB3pB,GAE1C,OAAO/H,EA1BK,UA0BiBua,MAAAA,IAC5B,MAAMrS,EAASrB,EAASsB,YACxB,IAAIypB,EAAW,QAET/qB,EAASmU,UAAUqW,MAEzB,IAAK,MAAMniB,KAAQrI,EAASM,UAAUyK,aACrC,IAAK,MAAMhQ,KAAQsN,EAAKG,iBAAkB,CACzC,MAAMtN,EAAWH,EAAKI,aAAa,YACnC,IAAI8L,EAASlM,EAAKI,aAAa,UAE/B,GAAIgG,EAAQmH,WAAarB,EACxBA,EAAOoF,kBACGpF,EAAQ,CAClB5F,EAAOU,oDACP,SAGDkF,EAASjH,EACPqa,iBACA9a,SAAS,IAAIoE,aAAmC,EAAtBzI,EAASM,aACnC8e,QAAQ,QAEV,MAAMzc,EAAI,CAAC,EAAG,EAAG,GACXC,EAAI,CAAC,EAAG,EAAG,GACXktB,EAAI,CAAC,EAAG,EAAG,GAEjB,IAAK,IAAIzwB,EAAI,EAAGA,EAAIW,EAASM,WAAYjB,GAAK,EAAG,CAChDW,EAASqM,WAAWhN,EAAI,EAAGsD,GAC3B3C,EAASqM,WAAWhN,EAAI,EAAGuD,GAC3B5C,EAASqM,WAAWhN,EAAI,EAAGywB,GAE3B,MAAMC,EAAaC,GAAcrtB,EAAGC,EAAGktB,GAEvC/jB,EAAOe,WAAWzN,EAAI,EAAG0wB,GACzBhkB,EAAOe,WAAWzN,EAAI,EAAG0wB,GACzBhkB,EAAOe,WAAWzN,EAAI,EAAG0wB,GAG1BlwB,EAAK4X,aAAa,SAAU1L,GAC5B8jB,IAIGA,EAGJ1pB,EAAOU,4BAFPV,EAAOiX,qEAQV,SAAS4S,GAAcrtB,EAASC,EAASktB,GACxC,MAAM9M,EAAI,CAACpgB,EAAE,GAAKD,EAAE,GAAIC,EAAE,GAAKD,EAAE,GAAIC,EAAE,GAAKD,EAAE,IACxCogB,EAAI,CAAC+M,EAAE,GAAKntB,EAAE,GAAImtB,EAAE,GAAKntB,EAAE,GAAImtB,EAAE,GAAKntB,EAAE,IAM9C,OAAOyI,GAAU,CAAC,EAAG,EAAG,GALd,CACT4X,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GACvBC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GACvBC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,KCtFzB,MAOMkN,GAAiD,CACtD7W,YAAY,EACZxJ,QAAQ,GAkBHsgB,GAAY,CAAClqB,EAA6BiqB,MAC/C,MAAMhqB,OAAegqB,GAAuBjqB,GAE5C,OAAO/H,EA9BK,YA8BiBua,MAAAA,IAC5B,MAAMrS,EAASD,EAAIE,aAEI,IAAnBH,EAAQ2J,QAad,SAAyB1J,EAAeC,EAAiBF,GACxD,MAAMkqB,EAAe,IAAI1uB,IACxByE,EACEd,UACA+R,cACA1R,IAAK7C,GAAMA,EAAEgZ,WAGhB1V,EAAId,UACFyK,aACAnJ,QAAQ,CAACyG,EAAMijB,KACf,GAAI/sB,MAAMgtB,QAAQpqB,EAAQ2J,UAAY3J,EAAQ2J,OAAOL,SAASpC,EAAK8K,WAElE,YADA9R,EAAOU,mCAAiCupB,gBAAwBjjB,EAAK8K,eAItE9R,EAAOU,8CAA4CsG,EAAK8K,eAExD,MAAMgH,EAAS/Y,EACboqB,aAAanjB,EAAK8K,WAClBsY,OAAOC,GAAgBrjB,EAAK8K,WAAa,OAAQkY,IAEnDhjB,EAAKG,iBAAiB5G,QAASoJ,IAC9B,MAAMhQ,EAAUgQ,EAAU/P,aACtBD,GAASA,EAAQuf,UAAUJ,GAC/BnP,EAAU5M,iBAAiBwD,QAASzD,GAAcA,EAAUoc,UAAUJ,IACtEnP,EAAU1M,cAAcsD,QAAS+pB,IAChCA,EAAWvtB,iBAAiBwD,QAASzD,GAAcA,EAAUoc,UAAUJ,UAxC5CyR,CAAgBxqB,EAAKC,EAAQF,IAChC,IAAvBA,EAAQmT,YA6Cd,SAA6BlT,EAAeC,EAAiBF,GAC5D,MAAMkqB,EAAe,IAAI1uB,IACxByE,EACEd,UACA+R,cACA1R,IAAK7C,GAAMA,EAAEgZ,WAGhB1V,EAAId,UACFmB,iBACAG,QAAQ,CAACoQ,EAAM6Z,KACf,GAAIttB,MAAMgtB,QAAQpqB,EAAQmT,cAAgBnT,EAAQmT,WAAW7J,SAASuH,EAAKmB,WAE1E,YADA9R,EAAOU,wCAAsC8pB,gBAAwB7Z,EAAKmB,eAI3E9R,EAAOU,mDAAiDiQ,EAAKmB,eAE7D,MAAMgH,EAAS/Y,EACboqB,aAAaxZ,EAAKmB,WAClBsY,OAAOC,GAAgB1Z,EAAKmB,WAAa,YAAakY,IAExDrZ,EAAK5G,eAAexJ,QAASuJ,IAC5B,MAAME,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YACnBH,GAAOA,EAAMkP,UAAUJ,GACvB5O,GAAQA,EAAOgP,UAAUJ,OAvEG2R,CAAoB1qB,EAAKC,EAAQF,GAE9DA,EAAQ2J,QAAW3J,EAAQmT,YAC/BjT,EAAOiX,4EAGFlX,EAAI+S,UAAUxD,GAAM,CAAExG,cAAe,CAACvB,EAAa4H,WAEzDnP,EAAOU,iCAoET,SAAS2pB,GAAgBK,EAAkBC,GAC1C,IAAInV,KAASkV,QACTxxB,EAAI,EACR,KAAOyxB,EAAS5vB,IAAIya,IAAMA,KAASkV,KAAYxxB,UAC/C,OAAOsc,ECvGD,SAAS7Q,KACd,IAAInC,EAAM,IAAIoC,GAAoB,GASlC,OAPIA,IAAuBtC,eACzBE,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACFA,EA0EF,SAASooB,GAASpuB,EAAGC,GAC1B,IAAIouB,EAAaC,GAAItuB,EAAGC,GACxB,OAAOZ,KAAKkvB,KAAK,EAAIF,EAAaA,EAAa,GAuL1C,SAASG,GAAMxoB,EAAKhG,EAAGC,EAAG6E,GAG/B,IAQI2pB,EAAOC,EAAOC,EAAOC,EAAQC,EAR7BC,EAAK9uB,EAAE,GACP+uB,EAAK/uB,EAAE,GACPgvB,EAAKhvB,EAAE,GACPivB,EAAKjvB,EAAE,GACPkvB,EAAKjvB,EAAE,GACPkvB,EAAKlvB,EAAE,GACPmvB,EAAKnvB,EAAE,GACPovB,EAAKpvB,EAAE,GAgCX,OA7BAyuB,EAAQI,EAAKI,EAAKH,EAAKI,EAAKH,EAAKI,EAAKH,EAAKI,GAE/B,IACVX,GAASA,EACTQ,GAAMA,EACNC,GAAMA,EACNC,GAAMA,EACNC,GAAMA,GAIJ,EAAMX,E7B/SS,M6BiTjBD,EAAQpvB,KAAKkvB,KAAKG,GAClBC,EAAQtvB,KAAKiwB,IAAIb,GACjBG,EAASvvB,KAAKiwB,KAAK,EAAMxqB,GAAK2pB,GAASE,EACvCE,EAASxvB,KAAKiwB,IAAIxqB,EAAI2pB,GAASE,IAI/BC,EAAS,EAAM9pB,EACf+pB,EAAS/pB,GAIXkB,EAAI,GAAK4oB,EAASE,EAAKD,EAASK,EAChClpB,EAAI,GAAK4oB,EAASG,EAAKF,EAASM,EAChCnpB,EAAI,GAAK4oB,EAASI,EAAKH,EAASO,EAChCppB,EAAI,GAAK4oB,EAASK,EAAKJ,EAASQ,EACzBrpB,EAiOF,IAAIsoB,GzBtKJ,SAAatuB,EAAGC,GACrB,OAAOD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,IyBwP5CsvB,KACEC,GAAgB,EAAG,EAAG,GACtBA,GAAgB,EAAG,EAAG,GAuC1BrnB,KACAA,KAoBDsnB,KCzqBb,MAMMC,GAA+C,CAAEC,UAAW,MASrDC,GAAW,CAACvsB,EAA4BqsB,MACpD,MAAMpsB,OAAeosB,GAAsBrsB,GAE3C,OAAO/H,EAlBK,WAkBiBua,MAAO1T,EAAoBtG,KACvD,MAAMg0B,EAAmB,IAAI/wB,IACvBgxB,EAAmB3tB,EAASM,UAAUgN,gBAAgBxN,OACtDuB,EAASrB,EAASsB,YAExB,IAAIssB,GAAsB,EAE1B,IAAK,MAAM1iB,KAAalL,EAASM,UAAUmB,iBAAkB,CAE5D,MAAMosB,EAAqB,IAAI3xB,IAC/B,IAAK,MAAM+V,KAAW/G,EAAUgH,eAC/B2b,EAAmBjxB,IAAIqV,EAAQ6b,aAAe7b,EAAQkR,iBAGvD,IAAK,MAAMhY,KAAWD,EAAUE,eACS,YAApCyiB,EAAmBnxB,IAAIyO,GAIQ,SAA/BA,EAAQ4iB,oBAAgE,WAA/B5iB,EAAQ4iB,qBACpDL,EAAiBpxB,IAAI6O,EAAQG,YAC7BoiB,EAAiBpxB,IAAI6O,EAAQK,aAC7BwiB,GAAS7iB,EAAS0iB,EAAmBnxB,IAAIyO,GAAWhK,IANpDysB,GAAsB,EAWzB,IAAK,MAAM3iB,KAAY1M,MAAMC,KAAKkvB,EAAiBvQ,UACrClS,EAAS/H,cAAcuF,KAAMC,KAAQA,aAAasE,KACpD/B,EAASoB,UAKIrM,EAASM,UAAUgN,gBAAgBxN,OACrC6tB,IAAqBl0B,EAAmBC,EArDpD,WAqDmE,gBACvEsG,EAASmU,UAAU3J,GAAM,CAAEL,cAAe,CAACvB,EAAawB,aAG3DwjB,GACHvsB,EAAOiX,gFAGRjX,EAAOU,gCAIT,SAASisB,GAAS7iB,EAA2B8iB,EAAuC9sB,GACnF,MAAMkK,EAAQF,EAAQG,WAAYvC,QAAQuc,WAAU,GAC9C/Z,EAASJ,EAAQK,YAAazC,QAAQuc,WAAU,GAEhDkI,EAAYrsB,EAAQqsB,UACpBU,EAAgB/iB,EAAQ4iB,mBAExBI,EAAY9iB,EAAM7P,WAAa,EAC/B4yB,EAAgB,GAChB50B,EAAkB,GAClB60B,EAAsB,GACtBC,EAAsB,GAE5B,IAAIC,EAAa,EAEjB,IAAK,IAAIh0B,EAAI,EAAGA,EAAI4zB,IAAa5zB,EAAG,CACnC,MAAMi0B,EAAWnjB,EAAMuf,UAAU2D,EAAa,GACxCE,EAAOpjB,EAAMuf,UAAUrwB,GACvBm0B,EAAWrjB,EAAMuf,UAAUrwB,EAAI,GAC/BoI,GAAK8rB,EAAOD,IAAaE,EAAWF,GAE1C,IAAIG,GAAO,EAGX,GAAIF,IAASC,IAAmB,IAANn0B,GAAWk0B,IAASpjB,EAAMuf,UAAU,IAK7D,GAJArf,EAAOhE,WAAWgnB,EAAa,EAAGD,GAClC/iB,EAAOhE,WAAWhN,EAAGf,GACrB+R,EAAOhE,WAAWhN,EAAI,EAAG8zB,GAEH,WAAlBH,GAAuC,aAATD,EAAqB,CAEtD,MAAMW,EAASvC,GAAM+B,EAAaE,EAAmBD,EAAmB1rB,GAClEksB,EAAQ5C,GAASqC,EAAmB90B,GAAiByyB,GAASzyB,EAAe60B,GACnFM,GAAQ5kB,EAAUC,GAAGxQ,EAAOo1B,EAAQpB,IAAcqB,EAAQ7W,OAAO6I,SAAW3jB,KAAK4xB,WACrD,WAAlBZ,EAA4B,CAEtC,MAAMU,EAASG,GAAMX,EAAKE,EAAWD,EAAW1rB,GAChDgsB,GAAQ5kB,EAAUC,GAAGxQ,EAAOo1B,EAAQpB,OACR,SAAlBU,IAEVS,GAAQ5kB,EAAUC,GAAGxQ,EAAO80B,KAAevkB,EAAUC,GAAGxQ,EAAO60B,IAK7DM,IACCp0B,IAAMg0B,IACTljB,EAAM4Q,UAAUsS,EAAYljB,EAAMuf,UAAUrwB,IAC5CgR,EAAOvD,WAAWumB,EAAYhjB,EAAOhE,WAAWhN,EAAG6zB,KAEpDG,KAKEJ,EAAY,IACf9iB,EAAM4Q,UAAUsS,EAAYljB,EAAMuf,UAAUuD,IAC5C5iB,EAAOvD,WAAWumB,EAAYhjB,EAAOhE,WAAW4mB,EAAWC,IAC3DG,KAIGA,IAAeljB,EAAM7P,YACxB6P,EAAM9L,SAAS8L,EAAMjM,WAAYE,MAAM,EAAGivB,IAC1ChjB,EAAOhM,SAASgM,EAAOnM,WAAYE,MAAM,EAAGivB,EAAahjB,EAAOtM,mBAChEkM,EAAQ6jB,SAAS3jB,GACjBF,EAAQ8jB,UAAU1jB,KAElBF,EAAMgB,UACNd,EAAOc,WAIT,SAAS6iB,GAAKC,EAAYC,EAAYzsB,GACrC,OAAOwsB,GAAM,EAAIxsB,GAAKysB,EAAKzsB,EAG5B,SAASosB,GAAMlrB,EAAehG,EAAaC,EAAa6E,GACvD,IAAK,IAAIpI,EAAI,EAAGA,EAAIsD,EAAEiC,OAAQvF,IAAKsJ,EAAItJ,GAAK20B,GAAKrxB,EAAEtD,GAAIuD,EAAEvD,GAAIoI,GAC7D,OAAOkB,EC5JR,MAaMwrB,GAA+C,CACpDj2B,KAAM,GACNk2B,IAAK,GACLnhB,QAAS,KACTzN,MAAM,YAMS6uB,GAAUruB,EAA4BmuB,IACrD,MAAMluB,OAAckuB,GAAsBnuB,GAE1C,OAAO/H,EA1BK,WA0BkBiI,IAE7B,MAAMC,EAASD,EAAIE,YACbC,EAAOH,EAAId,UACXgvB,EAAMnuB,EAAQmuB,IAGdE,EAAgBjuB,EAAKgQ,YACzBpO,OAAQL,GAASA,EAAKqQ,UAAUG,MAAMnS,EAAQgN,UAG5ChN,EAAQT,MACX8uB,EAAc9uB,KAAK,CAAC7C,EAAGC,IAAMD,EAAEsV,UAAYrV,EAAEqV,UAAY,GAAK,GAI/D,MAAMnB,EAAO5Q,EAAIquB,gBAAgBtuB,EAAQ/H,MACnCs2B,EAAanuB,EAAK8Q,cAAc,GACtCmd,EAAc5tB,QAAQ,CAACkB,EAAMvI,KAE5B,IAAIo1B,EACAC,EACM,IAANr1B,GACHo1B,EAAa,CAACp1B,EAAI+0B,GAAM/0B,EAAI,GAAK+0B,GACjCM,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IACpBr1B,IAAMi1B,EAAc1vB,OAAS,GACvC6vB,EAAa,EAAEp1B,EAAI,GAAK+0B,EAAK/0B,EAAI+0B,GACjCM,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAE9BD,EAAa,EAAEp1B,EAAI,GAAK+0B,EAAK/0B,EAAI+0B,GAAM/0B,EAAI,GAAK+0B,GAChDM,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIxC,MAAMvkB,EAAQjK,EAAIiZ,iBAChB9a,SAAS,IAAIoE,aAAagsB,IAC1BpV,UAAUmV,GACNnkB,EAASnK,EAAIiZ,iBACjB9a,SAAS,IAAIoE,aAAaisB,IAC1BrV,UAAUmV,GACVpV,QAAQuV,EAASC,KAAKC,MAClB5kB,EAAU/J,EAAI4uB,yBAClBC,iBAAiBC,EAAiBC,cAAcC,MAChDpB,SAAS3jB,GACT4jB,UAAU1jB,GACN0G,EAAU7Q,EAAIivB,yBAClB5M,cAAc3gB,GACdwtB,cAAc9d,EAAiBmP,WAAWF,OAC1C8O,WAAWplB,GACb6G,EAAKwe,WAAWrlB,GAASslB,WAAWxe,KAGrC5Q,EAAOU,+BCrCT,MAqBa2uB,GAAuC,CACnDlD,UAnBS,KAoBTllB,WAAW,EACXqoB,YAAY,YAyBGC,GAAK1vB,EAAwBwvB,IAC5C,MAAMvvB,OAAeuvB,GAAkBxvB,GAEvC,GAAIC,EAAQqsB,UAAY,IAAOrsB,EAAQqsB,UAAY,EAClD,UAAUzxB,4CAGX,OAAO5C,EAxDK,OAwDiBua,MAAAA,IAC5B,MAAMrS,EAASD,EAAIE,YAEnB,IAAK,MAAM+G,KAAQjH,EAAId,UAAUyK,aAAc,CAC9C,IAAK,MAAMhQ,KAAQsN,EAAKG,iBACvBqoB,GAAczvB,EAAKrG,EAAMoG,GAEa,IAAlCpG,EAAKE,aAAcO,YAAkBT,EAAKsR,UAGV,IAAjChE,EAAKG,iBAAiB1I,QAAcuI,EAAKgE,gBAGxCjL,EAAI+S,UAAUxD,GAAM,CAAExG,cAAe,CAACvB,EAAawB,SAAUxB,EAAauH,eAC1E/O,EAAI+S,UAAU3J,GAAM,CAAEL,cAAe,CAACvB,EAAawB,aAEzD/I,EAAOU,oCA6BO8uB,GAAczvB,EAAerG,EAAiBoG,GACzDpG,EAAKE,eAAiBkG,EAAQmH,WAC9BvN,EAAKK,YAAcC,EAAUC,KAAKC,SACZ,IAAtB4F,EAAQqsB,UAQb,SAAyBpsB,EAAerG,GAEvC,GAAIA,EAAKE,aAAc,OAEvB,MAAMia,EAAOna,EAAKqD,iBAAiB,GAC7B0yB,EAAc5b,EAAK1Z,WACnB2e,EAASjF,EAAKkF,YACdpf,EAAUoG,EACdiZ,iBACAE,UAAUJ,GACVG,QAAQuV,EAASC,KAAKiB,QACtBxxB,SAASC,EAAcsxB,IACzB/1B,EAAK4gB,WAAW3gB,GAnBfg2B,CAAgB5vB,EAAKrG,GAuBvB,SAAwBqG,EAAerG,EAAiBoG,GACvD,MAAME,EAASD,EAAIE,YAEb2vB,EAAcl2B,EAAKI,aAAa,YAChC8jB,EAAalkB,EAAKE,cAAgBmG,EAAIiZ,iBAAiB9a,SAASC,EAAcyxB,EAAYz1B,aAC1F01B,EAAgB,IAAIrxB,YAAY,IAAIlD,IAAIsiB,EAAW7f,aAAcsB,OAIjEywB,EAAgBj0B,KAAKgF,IAAIf,EAAQqsB,UAAWxV,OAAO6I,SACnDuQ,EAA6C,GACnD,IAAK,MAAMxwB,KAAY7F,EAAK0F,gBAAiB,CAC5C,MAAMtC,EAAYpD,EAAKI,aAAayF,GACpCwwB,EAAmBxwB,GAAYywB,GAAsBzwB,EAAUzC,EAAWgzB,GAsK5E,IAAkBG,EAnKjBjwB,EAAOU,qCAmKUuvB,EAnKuCF,EAoKjD93B,OAAOwT,QAAQwkB,GACpB3wB,IAAI,EAAEtE,EAAGE,QAAUF,KAAKE,KACxBuE,KAAK,SAlKP,MAAMywB,EAAa,CAAC,EAAG,EAAG,GACpBC,EAAa,CAAC,EAAG,EAAG,GAEpBC,EAAO,GACPC,EAAWN,EAAmBvhB,SAEpC,IAAK,IAAItV,EAAI,EAAGA,EAAI22B,EAAcpxB,OAAQvF,IAAK,CAC9C02B,EAAY1pB,WAAW2pB,EAAc32B,GAAIg3B,GACzC,MAAM5U,EAAMgV,GAAWJ,EAAMG,GAC7BD,EAAK9U,GAAO8U,EAAK9U,IAAQ,GACzB8U,EAAK9U,GAAKte,KAAK6yB,EAAc32B,IAK9B,MAAMq3B,EAAUpyB,EAAc0xB,EAAcpxB,QACtC+xB,EAAW,IAAItzB,MAAM2yB,EAAcpxB,QAAQghB,MAAM,GAEjD2J,EAAiBwG,EAAYz1B,WACnC,IAAIwf,EAAiB,EAErB,IAAK,IAAIzgB,EAAI,EAAGA,EAAI22B,EAAcpxB,OAAQvF,IAAK,CAC9C,MAAMsD,EAAIqzB,EAAc32B,GACxB02B,EAAY1pB,WAAW1J,EAAG0zB,GAE1B,MAAMO,EAAW3wB,EAAQwvB,WAAaoB,GAAwBR,EAAMG,GAAY,CAACC,GAAWJ,EAAMG,IAElGM,EAAO,IAAK,MAAMC,KAAWH,EAC5B,GAAKL,EAAKQ,GAEVC,EAAW,IAAK,MAAMz3B,KAAKg3B,EAAKQ,GAAU,CACzC,MAAMn0B,EAAI8zB,EAAQn3B,GAGlB,GAAIoD,GAAKC,EAAG,SAASo0B,EAErBjB,EAAY1pB,WAAWzJ,EAAG0zB,GAG1B,MAAMW,EAAcp3B,EAAK0F,gBAAgB2xB,MAAOxxB,GAGxCyxB,GAFWt3B,EAAKI,aAAayF,GAEA/C,EAAGC,EADrBszB,EAAmBxwB,KAGhC0xB,EAAgBv3B,EAAKuD,cAAc8zB,MAAOn4B,GACxCA,EAAOwG,gBAAgB2xB,MAAOxxB,GAG7ByxB,GAFWp4B,EAAOkB,aAAayF,GAEF/C,EAAGC,EADrBszB,EAAmBxwB,MAKvC,GAAIuxB,GAAeG,EAAe,CACjCV,EAAQ/zB,GAAKC,EACb,MAAMk0B,GASRH,EAASh0B,GADN+zB,EAAQ/zB,KAAOA,EACJmd,IAEA6W,EAASD,EAAQ/zB,IAIjCwD,EAAOU,eAAkBnE,EAAc6sB,EAAgBzP,gBAIvD,MAAMC,EAAkBgE,EAAWzjB,WAC7B+2B,EAAkB/yB,EAAcyb,EAAiBiW,EAAcpxB,QACrE,IAAK,IAAIvF,EAAI,EAAGA,EAAI0gB,EAAiB1gB,IACpCg4B,EAAgBh4B,GAAKs3B,EAAS5S,EAAW2L,UAAUrwB,IAEpDQ,EAAK4gB,WAAWsD,EAAWlW,QAAQxJ,SAASgzB,IACJ,IAApCtT,EAAW/b,cAAcpD,QAAcmf,EAAW5S,UAItD,IAAK,MAAMmmB,KAAWz3B,EAAKqD,iBAC1Bq0B,GAAe13B,EAAMy3B,EAASX,EAAU7W,GAEzC,IAAK,MAAM/gB,KAAUc,EAAKuD,cACzB,IAAK,MAAMk0B,KAAWv4B,EAAOmE,iBAC5Bq0B,GAAex4B,EAAQu4B,EAASX,EAAU7W,aC9QdjgB,GAC9B,MAAMC,EAAUD,EAAKE,aACrB,IAAKD,EAAS,OAEd,MAAM03B,EAAkB,GACxB,IAAIhzB,GAAYyX,SAEhB,IAAK,IAAI5c,EAAI,EAAG+M,EAAKtM,EAAQQ,WAAYjB,EAAI+M,EAAI/M,GAAK,EAAG,CACxD,MAAMsD,EAAI7C,EAAQ4vB,UAAUrwB,GACtBuD,EAAI9C,EAAQ4vB,UAAUrwB,EAAI,GAC1BywB,EAAIhwB,EAAQ4vB,UAAUrwB,EAAI,GAE5BsD,IAAMC,GAAKD,IAAMmtB,GAAKltB,IAAMktB,IAEhC0H,EAAgBr0B,KAAKR,EAAGC,EAAGktB,GAC3BtrB,EAAWxC,KAAKgF,IAAIxC,EAAU7B,EAAGC,EAAGktB,IAGrC,MAAMuH,EAAkB/yB,EAAckzB,EAAgB5yB,OAAQJ,GAC9D6yB,EAAgB31B,IAAI81B,GACpB13B,EAAQuE,SAASgzB,GDgQjBI,CAAe53B,GAvId63B,CAAexxB,EAAKrG,EAAMoG,IAiJ5B,SAASsxB,GACRzvB,EACAwvB,EACA5T,EACA7f,GAEA,MAAM8zB,GAZ0ClzB,EAYT6yB,EAAQpzB,WAZWU,EAYEf,EAAWyzB,EAAQvzB,qBAVpE0rB,EADOhrB,EAAMsY,aACHnY,IAWfgzB,EAAUN,EAAQzpB,QAAQxJ,SAASszB,GACnCE,EAAO,IAAInb,WAAW7Y,GAd7B,IAAiDY,EAAUG,EAgB1D,IAAK,IAAIvF,EAAI,EAAG8M,EAAK,GAAgB9M,EAAIqkB,EAAQ9e,OAAQvF,IACnDw4B,EAAKnU,EAAQrkB,MACjBu4B,EAAQ9qB,WAAW4W,EAAQrkB,GAAIi4B,EAAQjrB,WAAWhN,EAAG8M,IACrD0rB,EAAKnU,EAAQrkB,IAAM,GAIrByI,EAAOpE,KAAK4zB,EAASM,GAGgB,IAAjCN,EAAQtvB,cAAcpD,QAAc0yB,EAAQnmB,UAGjD,MAAM2mB,GAAK,GACLC,GAAK,GAGX,SAAS5B,GAAsBzwB,EAAkBzC,EAAqBqvB,GAGrE,MAAiB,WAAb5sB,GAAsC,YAAbA,EApRrB,GAqRJA,EAASgS,WAAW,UAtRjB,IAuRHhS,EAASgS,WAAW,aAxRd,KAyRNhS,EAASgS,WAAW,WAtRhB,EAuRJhS,EAASgS,WAAW,YAtRf,KAwRTogB,GAAGlzB,OAASmzB,GAAGnzB,OAAS,EACxB3B,EAAUonB,iBAAiByN,IAC3B70B,EAAUqnB,iBAAiByN,IAEpBzF,GADOtwB,KAAKgF,OAAO+wB,IAAM/1B,KAAKiF,OAAO6wB,KAAO,IAKpD,SAASX,GAAkBl0B,EAAqBN,EAAWC,EAAW0vB,EAAmB0F,GACxF/0B,EAAUoJ,WAAW1J,EAAGm1B,IACxB70B,EAAUoJ,WAAWzJ,EAAGm1B,IACxB,IAAK,IAAI14B,EAAI,EAAG+M,EAAKnJ,EAAUc,iBAAkB1E,EAAI+M,EAAI/M,IACxD,GAAI2C,KAAKa,IAAIi1B,GAAGz4B,GAAK04B,GAAG14B,IAAMizB,EAC7B,SAGF,SAUD,MAAM2F,GAAe,CAAC,GAAI,EAAG,GAE7B,SAASpB,GAAwBrpB,EAASgpB,GACzC,MAAM70B,EAAO,GACPu2B,EAAK,CAAC,EAAG,EAAG,GAClB,IAAK,MAAM74B,KAAK44B,GACf,IAAK,MAAM14B,KAAK04B,GACf,IAAK,MAAM92B,KAAK82B,GACfC,EAAG,GAAK1qB,EAAE,GAAKnO,EAAIm3B,EACnB0B,EAAG,GAAK1qB,EAAE,GAAKjO,EAAIi3B,EACnB0B,EAAG,GAAK1qB,EAAE,GAAKrM,EAAIq1B,EACnB70B,EAAKwB,KAAKszB,GAAWyB,EAAI1B,IAI5B,OAAO70B,EAGR,SAAS80B,GAAWjpB,EAASgpB,GAI5B,OAHcx0B,KAAKwa,MAAMhP,EAAE,GAAKgpB,GAGjB,IAFDx0B,KAAKwa,MAAMhP,EAAE,GAAKgpB,GAEH,IADfx0B,KAAKwa,MAAMhP,EAAE,GAAKgpB,GE9WjC,MAkBa2B,GAAmE,CAC/EC,MAAO,EACPC,MAAO,KACPC,YAAY,GAkCAC,GAAYvyB,IACxB,MAAMC,OAAekyB,GAAsBnyB,GAErCwyB,EAAavyB,EAAQuyB,WAE3B,IAAKA,EACJ,UAAU33B,6EAGX,OAAO5C,EAhEK,WAgEiBua,MAAO1T,EAAoBtG,KACvD,MAAM2H,EAASrB,EAASsB,kBAElBoyB,EAAW5U,YACX9e,EAASmU,UAAUyc,GAAK,CAAEtoB,WAAW,KAG3C,IAAK,MAAMD,KAAQrI,EAASM,UAAUyK,aACrC,IAAK,MAAMhQ,KAAQsN,EAAKG,iBACnBzN,EAAKK,YAAcC,EAAUC,KAAKM,UAMtC+3B,GAAkB3zB,EAAUjF,EAAMoG,GALjCE,EAAOiX,8CACkCjQ,EAAK8K,6CAU5C1Z,EAAmBC,EArFb,WAqF4B,gBAChCsG,EAASmU,UAAU3J,GAAM,CAAEL,cAAe,CAACvB,EAAawB,aAG/D/I,EAAOU,yCAIO4xB,GAAkB3zB,EAAoBjF,EAAiBmG,GACtE,MAAMC,OAAekyB,GAAsBnyB,GACrCwyB,EAAavyB,EAAQuyB,WAErBryB,EAASrB,EAASsB,YAClBpG,EAAWH,EAAKI,aAAa,YAC7B8jB,EAAalkB,EAAKE,aAClBwvB,EAAiBvvB,EAASM,WAEhC,IAAIo4B,EAAgB14B,EAASkE,WACzB0c,EAAemD,EAAW7f,WAI9B,GAAIlE,EAAS2F,qBAAuBgvB,EAASgE,cAAcC,MAC1D,GAAI54B,EAAS6Q,gBAAiB,CAC7B,MAAMrN,EAAMk1B,EACNj1B,EAAM,IAAIgF,aAAajF,EAAIoB,QAGjC,IAAK,IAAIvF,EAAI,EAAG+M,EAAKpM,EAASM,WAAY6L,EAAK,GAAgB9M,EAAI+M,EAAI/M,IACtE8M,EAAKnM,EAASqM,WAAWhN,EAAG8M,GAC5BnM,EAASqE,SAASZ,GAAKqJ,WAAWzN,EAAG8M,GAAI9H,SAASb,GAGnDk1B,EAAgBj1B,OAEhBi1B,EAAgB,IAAIjwB,aAAaiwB,GAI/B3U,EAAWpe,qBAAuBgvB,EAASgE,cAAcE,eAC5DjY,EAAe,IAAIjc,YAAYic,IAKhC,MAAMkY,EAAiE,EAAnD92B,KAAKC,MAAOgE,EAAQmyB,MAAQ7I,EAAkB,IAC3D8H,EAAiBgB,GAASG,EAAWD,SAC3C3X,EACA8X,EACA,EACAI,EACA7yB,EAAQoyB,MACRpyB,EAAQqyB,WAAa,CAAC,cAAgB,KAGhC10B,EAAOqgB,GAAUuU,EAAWO,YAAY1B,GAE/ClxB,EAAOU,mBAAkBnE,EAAc1C,EAASM,WAAY2jB,uBAA4BoU,EAAMh2B,QAAQ,OAItG,IAAK,MAAM8L,KAAgBpL,EAAmBlD,GAAO,CACpD,MAAMwO,EAAeF,EAAaN,QAClClK,EAAe0K,EAAczK,EAAOqgB,GACpC1gB,EAAkB1D,EAAMsO,EAAcE,GACI,IAAtCF,EAAanG,cAAcpD,QAAcuJ,EAAagD,UAK3D,MAAMqP,EAAauD,EAAWlW,QAK9B,OAJA2S,EAAWnc,SAASkrB,GAAkB,MAAQ,IAAI7qB,YAAY2yB,GAAmBA,GACjFx3B,EAAK4gB,WAAWD,GACwB,IAApCuD,EAAW/b,cAAcpD,QAAcmf,EAAW5S,UAE/CtR,EC1KR,MAWMm5B,GAA2C,CAChDZ,MAAO,EAAI,YAwBIa,GAAOjzB,EAA0BgzB,IAChD,MAEMZ,OAFeY,GAAoBhzB,GAEnBoyB,MACtB,GAAIA,EAAQ,GAAKA,EAAQ,EACxB,UAAUv3B,gDAGX,OAAO5C,EA5CK,SA4CkB6G,IAC7B,MAAMuB,EAAOvB,EAASM,UAChBe,EAASrB,EAASsB,YAExB,IAAI8yB,EAAgB,EAEpB,IAAK,MAAMnpB,KAAY1J,EAAK+L,gBAAiB,CAC5C,MAAM7N,EAAQwL,EAASzP,WACjB64B,EAAO91B,MAAM0M,EAAShM,kBAAkB6hB,KAAK,GAC7CzZ,EAAK9I,MAAM0M,EAAShM,kBAAkB6hB,KAAK,GAEjD,IAAIwT,EAAe,EACnB,IAAK,IAAI/5B,EAAI,EAAGA,EAAIkF,IACnBwL,EAAS1D,WAAWhN,EAAG8M,GAClB0C,EAAUC,GAAG3C,EAAIgtB,EAAM,IAAIC,MAC5BA,EAAe70B,GAAS6zB,IAHF/4B,KAM3B,MAAM45B,EAASG,EAAe70B,EAAQ6zB,EAClCa,IAAWlpB,EAASspB,cACvBtpB,EAASqa,UAAU6O,GACnBC,KAIF/yB,EAAOU,yBAA0BqyB,gBACjC/yB,EAAOU,6BClET,MAAMyyB,GAAO,gBAmBDC,IAAAA,IAAZ,SAAYA,GAEXA,sBAEAA,sBAJD,CAAYA,KAAAA,QAOCC,MAAAA,GAAgD,CAC5Dv4B,KAAM,CAAC,KAAM,MACbgH,OAAQsxB,GAAoBE,SAC5BxmB,QAAS,KACT0H,MAAO,eAUQ+e,GAAc1zB,EAAiCwzB,IAC9D,MAAMvzB,OAAeuzB,GAA4BxzB,GAEjD,OAAO/H,EAAgBq7B,GAAM9gB,MAAAA,IAC5B,MAAMrS,EAASD,EAAIE,YAEnB,IAAK,MAAM6U,KAAW/U,EAAId,UAAUkM,eAAgB,CACnD,MAAMpT,EAAO+c,EAAQhD,UACf0D,EAAMV,EAAQW,SAEpB,GADe3V,EAAQgN,UAAWhN,EAAQgN,QAAQM,KAAKrV,KAAS+H,EAAQgN,QAAQM,KAAKoI,GACzE,CACXxV,EAAOU,SAASyyB,kDAChB,SAGD,GAA8B,cAA1Bre,EAAQ7b,eAA2D,eAA1B6b,EAAQ7b,cAAgC,CACpF+G,EAAOiX,QAAQkc,2CAA6Cre,EAAQ7b,mBACpE,SAGD,MAAMub,EAAQ6I,GAAiBvI,GAC/B,GAAIhV,EAAQ0U,QAAUA,EAAMpN,KAAMosB,0BAAS1zB,EAAQ0U,cAARif,EAAermB,KAAKomB,KAAQ,CACtExzB,EAAOU,SAASyyB,kBAAoB3e,EAAM/U,KAAK,yCAC/C,SAGD,MAAOi0B,EAAUC,GAAa7zB,EAAQhF,MAC/B84B,EAAUC,GAAa/e,EAAQvJ,UAEtC,GAAIqoB,GAAYF,GAAYG,GAAaF,EAAW,CACnD3zB,EAAOU,SAASyyB,wCAChB,SAGD,IAAIW,EAAWF,EACXG,EAAYF,EAEZC,EAAWJ,IACdK,EAAYl4B,KAAKC,MAAMi4B,GAAaL,EAAWI,IAC/CA,EAAWJ,GAGRK,EAAYJ,IACfG,EAAWj4B,KAAKC,MAAMg4B,GAAYH,EAAYI,IAC9CA,EAAYJ,GAGb,MAAM96B,EAAWic,EAAQhc,WACnBk7B,QAAmBh7B,EAAUH,EAAUic,EAAQ7b,eAC/Cg7B,EAAYC,EAAQ,IAAI3d,WAAWud,EAAWC,EAAY,GAAI,CAACD,EAAUC,EAAW,IAE1F/zB,EAAOU,SAASyyB,iBAAmB3d,GAAOzd,OAAUi8B,EAAU76B,WAAW86B,EAAU96B,YACnF6G,EAAOU,SAASyyB,gBAAkB3e,EAAM/U,KAAK,UAE7C,IACCK,EAAQgC,SAAWsxB,GAAoBE,SACpCa,EAASH,EAAWC,GACpBG,EAASJ,EAAWC,GACtB,MAAOnkB,GACR,GAAIA,aAAapV,MAAO,CACvBsF,EAAOiX,QAAQkc,yBAA2B3d,GAAOzd,QAAW+X,EAAEukB,aAC9D,SAED,MAAMvkB,EAGPgF,EAAQvb,eAAeD,EAAW26B,EAAWnf,EAAQ7b,gBAGtD+G,EAAOU,SAASyyB,mBC5GlB,MAAMA,GAAO,kBAGPmB,GAAU,CAAC,OAAQ,MAAO,OAAQ,QAClCC,GAAuB,CAAC,aAAc,YAAa,aAAc,cAuC1DC,GACZ,CACCC,aAAcrB,GAAoBE,SAClCxmB,QAAS,KACT4nB,QAAS,KACTlgB,MAAO,KACPmgB,QAAS,KACTC,OAAQ,KACRC,UAAU,EACVC,cAAc,GA6BHC,GAAkB,SAAUl1B,GACxC,MAAMC,OAAe00B,GAA8B30B,GAE7Cm1B,EAAel1B,EAAQk1B,aACvBC,EAAYn1B,EAAQgN,QACpBooB,EAAYp1B,EAAQ40B,QACpBS,EAAUr1B,EAAQ0U,MAExB,IANgB1U,EAAQ0d,QAOvB,UAAU9iB,SAASs6B,qDAGpB,OAAOl9B,EAAgBq7B,GAAM9gB,MAAAA,IAC5B,MAAMrS,EAASrB,EAASsB,YAClBiL,EAAWvM,EAASM,UAAUkM,qBAE9BiqB,QAAQC,IACbnqB,EAAS5L,IAAI+S,MAAOyC,EAASwgB,KAC5B,MAAM9gB,EAAQ6I,GAAiBvI,GACzBqB,EAAWqG,GAAsB1H,GACjCygB,EACLzgB,EAAQW,UACRX,EAAQhD,cACLwjB,EAAe,KAAK32B,EAASM,UAAUkM,eAAe1M,SACpDuhB,KAAYmT,MAAQoC,KAI1B,IAAKhB,GAAqBnrB,SAAS0L,EAAQ7b,eAE1C,YADA+G,EAAOU,SAASsf,0CAA+ClL,EAAQ7b,sBAE7Dg8B,IAAcA,EAAU7nB,KAAK0H,EAAQhD,aAAemjB,EAAU7nB,KAAK0H,EAAQW,UAErF,YADAzV,EAAOU,SAASsf,oDAENkV,IAAcA,EAAU9nB,KAAK0H,EAAQ7b,eAE/C,YADA+G,EAAOU,SAASsf,iBAAsBlL,EAAQ7b,sDAEpCk8B,GAAW3gB,EAAM/V,SAAW+V,EAAMpN,KAAMosB,GAAS2B,EAAQ/nB,KAAKomB,IAExE,YADAxzB,EAAOU,SAASsf,iBAAsBxL,EAAM/U,KAAK,4CAEd,SAAzBK,EAAQk1B,cAA2B7e,EAAWsG,EAAeI,EAEvE,YADA7c,EAAOiX,QAAQ+I,iBAAsBxL,EAAM/U,KAAK,kCAIjD,MAAM+1B,EAAYC,GAAU3gB,GAE5B9U,EAAOU,SAASsf,eAAoBwV,OADlBR,GAAgBQ,KAElCx1B,EAAOU,SAASsf,eAAoBxL,EAAM/U,KAAK,UAE/C,MAAM5G,EAAWic,EAAQhc,WACnB48B,EAAgB78B,EAASmb,iBAEzB2hB,GAAgB7gB,EAAShV,GAE/B,MAAMzG,EAAWyb,EAAQhc,WACnB88B,EAAgBv8B,EAAS2a,WAEzB6hB,EAAOh9B,IAAaQ,EAAW,YAAc,GAEnD2G,EAAOU,SAASsf,aAAkBvkB,EAAYi6B,QAAoBj6B,EAAYm6B,KAAiBC,QAKjG,MAAMC,EAAgBn3B,EAASsO,gBAAgB8oB,GAC3C7qB,EAAS9D,KAAM0N,GAAsC,eAA1BA,EAAQ7b,eACtC68B,EAAc5nB,aAAY,GAE1B4nB,EAAc9qB,UAIf,MAAMgrB,EAAgBr3B,EAASsO,gBAAgBgpB,GAC3C/qB,EAAS9D,KAAM0N,GAAsC,eAA1BA,EAAQ7b,eACtC+8B,EAAc9nB,aAAY,GAE1B8nB,EAAchrB,UAGfhL,EAAOU,SAASyyB,mCAyBIwC,GAAgB7gB,EAAkBjV,GACvD,MAAMC,OAAe00B,GAA8B30B,GAC7C2d,EAAU1d,EAAQ0d,QAExB,IAAKA,EACJ,UAAU9iB,SAASoF,EAAQk1B,gEAG5B,MAAMQ,EAAYC,GAAU3gB,GACtBohB,EAAYp2B,EAAQk1B,cAAgBQ,EACpCW,EAAcrhB,EAAQ7b,cACtBm9B,WAAuBF,IAE7B,IAAIG,EAA+F,GAEnG,OAAQH,GACP,IAAK,OACJG,EAAiB,CAAE1B,QAAS70B,EAAQ60B,SACpC,MACD,IAAK,MACJ0B,EAAiB,CAChB1B,QAAS70B,EAAQ60B,QACjBC,OAAQn3B,GAAMqC,EAAQ80B,OAAQ,IAAK,KAEpC,MACD,IAAK,OACJyB,EAAiB,CAChB1B,QAAS70B,EAAQ60B,QACjBC,OAAQn3B,GAAMqC,EAAQ80B,OAAQ,IAAK,GACnCC,SAAU/0B,EAAQ+0B,SAClBC,aAAch1B,EAAQg1B,cAEvB,MACD,IAAK,OACJuB,EAAiB,CAChB1B,QAAS70B,EAAQ60B,QACjBC,OAAQn3B,GAAMqC,EAAQ80B,OAAQ,IAAK,GACnCC,SAAU/0B,EAAQ+0B,UAKrB,MAAMh8B,EAAWic,EAAQhc,WACnBge,EAAW0G,EAAQ3kB,GAAUy9B,SAASJ,EAAWG,GAGnDv2B,EAAQy2B,QACXzf,EAASyf,OAAOz2B,EAAQy2B,OAAO,GAAIz2B,EAAQy2B,OAAO,GAAI,CACrDC,IAAK,SACLC,OAAQ32B,EAAQ20B,aAChBiC,oBAAoB,IAItB,MAAMr9B,EAAWkR,EAAYC,aAAasM,EAAS6f,YAKnD,KAAIR,IAAgBC,GAFE/8B,EAAS2a,YADTnb,EAASmb,eAMpBmiB,IAAgBC,EAE1BthB,EAAQvb,SAASF,OACX,CAEN,MAAMu9B,EAAe5hB,EAAW6hB,oBAAoBV,GAC9CW,EAAe9hB,EAAW6hB,oBAAoBT,GAC9CW,EAASjiB,EAAQW,SAASnZ,QAAQ,IAAI06B,aAAaJ,UAAsBE,KAC/EhiB,EAAQvb,SAASF,GAAUG,YAAY48B,GAAahM,OAAO2M,IAI7D,SAAStB,GAAU3gB,GAClB,MAAMY,EAAWZ,EAAQ7b,cACnBg+B,EAASvhB,EAASwhB,MAAM,KAAKve,MACnC,IAAKse,IAAW3C,GAAQlrB,SAAS6tB,GAChC,UAAUv8B,4BAA4Bgb,OAEvC,OAAOuhB,EAGR,SAASx5B,GAAMtF,EAAkCg/B,EAAgBC,GAChE,OAAa,MAATj/B,OACG0D,KAAKwa,MAAOle,EAAQg/B,EAAUC,GCpRtC,MAeMC,GAAyE,CAC9EpwB,WAAW,YAmBIqwB,GAASz3B,EAA4Bw3B,IACpD,IAAKx3B,EAAS03B,iBACb,UAAU78B,8EAGX,MAAMoF,OAAeu3B,GAAsBx3B,GAE3C,OAAO/H,EA1CK,WA0CkBiI,IAC7B,MAAMC,EAASD,EAAIE,YACbu3B,EAAe,IAAI38B,IACnB48B,EAAe,IAAI58B,IACzB,IAAI6uB,EAAW,EAEf,IAAK,MAAM1iB,KAAQjH,EAAId,UAAUyK,aAAc,CAC9C,MAAMguB,EAAW1wB,EAAK8K,UAChB6lB,EAAiB3wB,EAAKG,iBAE5B,IAAK,IAAIjO,EAAI,EAAGA,EAAIy+B,EAAel5B,OAAQvF,IAAK,CAC/C,MAAMQ,EAAOi+B,EAAez+B,GAG5B,IAAK0+B,GAAgBl+B,EAAMsG,EAAQ03B,EAAUx+B,EAAG4G,EAAQmH,WAAY,SAEpE,MAAM4wB,EAAmBC,GAAkBp+B,GAGrCG,EAAWH,EAAKI,aAAa,YAAaiE,WAC1C6H,EAASlM,EAAKI,aAAa,UAAWiE,WACtCg6B,EAAWr+B,EAAKI,aAAa+9B,GAAmB95B,WAGhDi6B,EAAaR,EAAan8B,IAAIxB,IAAao+B,IACjDT,EAAaj8B,IAAI1B,EAAUm+B,GAE3B,MAAME,EAAWV,EAAan8B,IAAIuK,IAAWqyB,IAC7CT,EAAaj8B,IAAIqK,EAAQsyB,GAEzB,MAAMC,EAAaX,EAAan8B,IAAI08B,IAAaE,IACjDT,EAAaj8B,IAAIw8B,EAAUI,GAG3B,MAAMC,EAAc1+B,EAAKI,aAAa,WAClCs+B,GAAoD,IAArCA,EAAYv2B,cAAcpD,QAAc25B,EAAYptB,UAGvE,MAAMqtB,KAAmBL,KAAcE,KAAYC,IACnD,IAAIryB,EAAU2xB,EAAap8B,IAAIg9B,GAC/B,GAAIvyB,EAAS,CACZ9F,EAAOU,6CAA4CxH,cAAcw+B,OACjEh+B,EAAK4X,aAAa,UAAWxL,GAC7B4jB,IACA,SAID1pB,EAAOU,4CAA2CxH,cAAcw+B,OAChE,MAAMY,EAAgB5+B,EAAKI,aAAa,YAAaif,YAC/Cwf,EAAez4B,EAAQy3B,iBAC5B19B,aAAoByI,aAAezI,EAAW,IAAIyI,aAAazI,GAC/D+L,aAAkBtD,aAAesD,EAAS,IAAItD,aAAasD,GAC3DmyB,aAAoBz1B,aAAey1B,EAAW,IAAIz1B,aAAay1B,IAIhE,IAAK,IAAI7+B,EAAI,EAAGA,EAAIq/B,EAAa95B,OAAQvF,GAAK,EAAGq/B,EAAar/B,KAAO,EAErE4M,EAAU/F,EAAIiZ,iBAAiBE,UAAUof,GAAep6B,SAASq6B,GAActf,QAAQ,QACvFvf,EAAK4X,aAAa,UAAWxL,GAE7B2xB,EAAal8B,IAAI88B,EAAevyB,GAChC4jB,KAIGA,EAGJ1pB,EAAOU,6BAFPV,EAAOiX,sEAOV,SAAS6gB,GAAkBp+B,GAC1B,MAAMqF,EAAWrF,EAAKsF,cACtB,IAAKD,EAAU,MAAO,aAEtB,MAAMy5B,EAAoBz5B,EAAS05B,uBACnC,IAAKD,EAAmB,MAAO,aAE/B,MACMj5B,cADWi5B,EAAkBxmB,gBAEnC,OAAItY,EAAKI,aAAayF,GAAkBA,EAEjC,aAGR,SAASq4B,GAAgBl+B,EAAiBsG,EAAiB03B,EAAkBx+B,EAAW+N,GACvF,OACCvN,EAAKK,YAAcC,EAAUC,KAAKM,WACjCb,EAAKI,aAAa,aAClBJ,EAAKI,aAAa,WAClBJ,EAAKI,aAAa,cAShBJ,EAAKI,aAAa,aAAemN,GACpCjH,EAAOU,sCAAqCxH,cAAcw+B,2BAIvDh+B,EAAKE,eAERoG,EAAOiX,qCAAoC/d,cAAcw+B,yCAdzD13B,EAAOU,sCACyBxH,cAAcw+B,8FC3InCgB,MAAAA,GAAQ,IACZ34B,IACP,MACM24B,EADiB34B,EAAIkN,gBAAgB0rB,GACdC,cAC7B74B,EAAId,UACFC,gBACAqB,QAASxB,IACTA,EAASgZ,aAAa,sBAAuB2gB,MCH3CG,GAAqD,GAiBrDC,GAAc,CAACj5B,EAA+Bg5B,WAE9BA,GAAyBh5B,GAEvC/H,EAzBK,cAyBiBua,MAAAA,IAC5B,MAAMrS,EAASrB,EAASsB,YAElB6Y,EAASna,EAASM,UAAU+R,cAAc,GAChDrS,EACEM,UACAgN,gBACA1L,QAAS/D,GAAMA,EAAE0c,UAAUJ,IAC7Bna,EACEM,UACA+R,cACAzQ,QAAQ,CAAC9D,EAAGgE,IAAWA,EAAQ,EAAIhE,EAAEuO,UAAY,MAEnDhL,EAAOU,mCCtCHyyB,GAAO,mBAWA4F,GAAaC,YAiBVA,GAAiBl5B,GAChC,OAAOhI,EAAgBq7B,GAAOpzB,IAC7B,MAAMC,EAASD,EAAIE,YAEbg5B,GAAmBn5B,EAAQm5B,iBAAmBn5B,EAAQo5B,eAAiB,IAAIC,cAEjF,GAAwB,gBAApBF,EAEH,YADAj5B,EAAOkR,QAAQiiB,0DAIhB,GAAwB,SAApB8F,EAKH,YAJAj5B,EAAOkyB,SACHiB,kCAAoC8F,gEAMzC,MAAMG,EAAY,IAAI99B,IAGtB,SAAS+9B,EAAa1P,GACrB,OAAOA,EAAI,OAAc,YAAJA,EAAmB9tB,KAAKI,IAAQ,YAAJ0tB,EAAmB,YAAc,KAGnF,SAAS2P,EAAgB3vB,GACxB,MAAM4vB,EAAQ,CAAC,EAAG,EAAG,GACrB,IAAIz8B,EACJ,IAAK,IAAI5D,EAAI,EAAI4D,EAAY6M,EAAU7P,sBAAsBZ,KAAOA,IACnE,IAAIkgC,EAAUr+B,IAAI+B,GAAlB,CAEA,IAAK,IAAI1D,EAAI,EAAGA,EAAI0D,EAAU3C,WAAYf,IACzC0D,EAAUoJ,WAAW9M,EAAGmgC,GACxBA,EAAM,GAAKF,EAAaE,EAAM,IAC9BA,EAAM,GAAKF,EAAaE,EAAM,IAC9BA,EAAM,GAAKF,EAAaE,EAAM,IAC9Bz8B,EAAU6J,WAAWvN,EAAGmgC,GAGzBH,EAAUn+B,IAAI6B,IAIhBiD,EAAId,UACFyK,aACAnJ,QAASyG,GAASA,EAAKG,iBAAiB5G,QAAQ+4B,IAElDt5B,EAAOU,SAASyyB"}